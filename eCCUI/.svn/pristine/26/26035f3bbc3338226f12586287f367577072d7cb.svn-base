<?xml version="1.0" encoding="ISO-8859-1"?>

<comcat-dax-config>

      <stmt-group id="catalogProd">
      
      <stmt id="getAssociatedQuote" >
    	<![CDATA[
         select {result}:= cqm.quote_id from cat_quote_mapping cqm, quote_bundle_info qbi where  cqm.cat_catalog_id = {?:catalog_id} 
           and cqm.quote_id = qbi.quote_id 
           and qbi.bundle_type||'_'||qbi.bundle_id= {?:prod_id} and rownum=1
    	]]>
      </stmt>
    	      
      <stmt id="updateSkipValidation">
          UPDATE cat_item_options
          SET cop_skip_fusn_ord = {?:skipFusionValidation},
		  cop_skip_lclp_ord = {?:skipLclpValidation},
		  cop_skip_plc_ord = {?:skipPlcValidation},
		  cop_last_modified_by = {?:lastModifiedBy},
		  cop_last_modified_date = sysdate
          WHERE cop_opt_key = {?:id} 
      </stmt>

         <stmt id ="updateOptions">
                UPDATE cat_item_options SET cop_skip_fusn_ord = {?:skipFusionValidation},
                            cop_ovrt_fusn_skip = 'Y',   
							cop_skip_lclp_ord = {?:skipLclpValidation},
							cop_ovrt_lclp_skip = 'Y',
							cop_skip_plc_ord = {?:skipPlcValidation},
							cop_ovrt_plc_skip = 'Y',
                                    cop_last_modified_by = {?:lastModifiedBy},
                                    cop_last_modified_date = SYSDATE
                                WHERE cat_catalog_id = {?:catalogID} 
                                AND cop_opt_key = {?:id}
          </stmt>

    <stmt id="getShippingOutUnit">
    <![CDATA[
        select {string2}:=out_unit
        from unit_conversion
        where unit_std = {?:string1}
        and rownum = 1
    ]]> 
    </stmt> 
        <stmt id="getTotalCount">
        <![CDATA[
            select {totalCount}:=count(1)
            from   cat_item
            where  cat_catalog_id = {?:catalogID}
            and    cit_exclude_flag = 'N' 
            and    cit_bundle_flag <> 'I'       
        ]]>
      </stmt>  
      
      <stmt id="getInvalidProductTotalCount">
      <![CDATA[
          select {invProdCount}:=count(1)
          from   cat_item_options opt
          where  opt.cat_catalog_id = {?:catalogID}
          and    opt.cop_valid_status = 'I'         
            
      ]]>
      </stmt>  
      
      <stmt id="getAPDProdListValidPrc">
      <![CDATA[
            SELECT  /*+ ORDERED USE_NL(info , item, opt, prc, prod, sup ) */ 
                    {supplierPartID}:= prod.supplier_part_id,
                    {ilpPrice}:= prc.CIP_INT_LIST_PRICE,
                    {acrpPrice}:= prc.CIP_AVG_CUST_RETL_PRICE,
                    {netPriceD}:= prc.cip_net_price,
                {dealPriceD}:= prc.cip_deal_price,
                    {priceEndDateD}:= prc.CIP_PRICE_END_DATE,
                    {priceEffDateD}:=prc.CIP_PRICE_START_DATE,
                    {priceDescriptor}:=prc.CIP_PRICE_DESCRIPTOR,
                    {validationStatus}:= opt.COP_VALID_STATUS,
                    {lastModifiedDateD}:= item.CIT_LAST_MODIFIED_DATE,
                    {prodId}:= opt.COP_LOCALIZE_PROD,
                    {programKey}:= item.CIT_PGM_KEY,
                    {FFsID}:= prc.CIP_FFS_ID,
                    {mfgPartID}:= prod.MFG_PART_ID,
                    {shortDesc}:= BE_CONTENT_FALLBACK.get_short_desc(info.cat_catalog_id, opt.cop_localize_prod),
                    {longDesc}:= BE_CONTENT_FALLBACK.get_long_desc(info.cat_catalog_id, opt.cop_localize_prod),
                    {netPriceD}:= prc.CIP_NET_PRICE,
                    {id}:= item.CIT_ITEM_KEY,
                    {contextID}:= item.cit_context_id
            FROM    cat_info info, cat_item item, CAT_ITEM_OPTIONS opt,
                    cat_item_price prc,
                    products prod, supplier_info sup
                                                                
           WHERE info.CAT_CATALOG_ID = {?:catalogID}
           and   item.CAT_CATALOG_ID = info.CAT_CATALOG_ID                      
           and   opt.CAT_ITEM_KEY   = item.CIT_ITEM_KEY
           and   item.CIT_DELETE_FLAG = 'N'
           and   item.CIT_EXCLUDE_FLAG = 'N'                    
           and   prc.CIT_PRICE_ITEM_KEY(+) = item.CIT_PRICE_ITEM_KEY           
           and   NVL(prc.CIP_PRICE_DESCRIPTOR, 0) = NVL({?:priceDescriptor}, 0)
           and   NVL(prc.CIP_ZONE_DESCRIPTOR, 0) = NVL({?:zonePriceDescriptor}, 0)
           and   prod.PROD = item.CIT_SRC_PROD                                          
           and   sup.supplier_id = nvl(info.cat_supplier_id, '149761140')
          
       ]]>      
      </stmt>
      
      <stmt id="getAPDProdList">
            <![CDATA[
                  SELECT  /*+ ORDERED USE_NL(info , item, opt, prc, prod, sup ) */ 
                      {supplierPartID}:= prod.supplier_part_id,
                          {ilpPrice}:= prc.CIP_INT_LIST_PRICE,
                          {acrpPrice}:= prc.CIP_AVG_CUST_RETL_PRICE,
                          {netPriceD}:= prc.cip_net_price,
                  {dealPriceD}:= prc.cip_deal_price,
                  {priceDescriptor}:=prc.CIP_PRICE_DESCRIPTOR,
                          {priceEndDateD}:= prc.CIP_PRICE_END_DATE,
                          {priceEffDateD}:=prc.CIP_PRICE_START_DATE,
                          {validationStatus}:= opt.COP_VALID_STATUS,
                          {lastModifiedDateD}:= item.CIT_LAST_MODIFIED_DATE,
                          {prodId}:= opt.COP_LOCALIZE_PROD,
                          {id}:= item.CIT_ITEM_KEY,
                          {contextID}:= item.cit_context_id,
                          {programKey}:= item.CIT_PGM_KEY,
                          {FFsID}:= prc.CIP_FFS_ID,
                          {mfgPartID}:= prod.MFG_PART_ID,
                          {shortDesc}:= BE_CONTENT_FALLBACK.get_short_desc(info.cat_catalog_id, opt.cop_localize_prod),
                          {longDesc}:= BE_CONTENT_FALLBACK.get_long_desc(info.cat_catalog_id, opt.cop_localize_prod),
                          {netPriceD}:= prc.CIP_NET_PRICE
                 FROM    cat_info info, cat_item item, CAT_ITEM_OPTIONS opt,
                          cat_item_price prc,
                          products prod, supplier_info sup
                                                        
                WHERE info.CAT_CATALOG_ID = {?:catalogID}
                and   item.CAT_CATALOG_ID = info.CAT_CATALOG_ID                 
                and   opt.CAT_ITEM_KEY   = item.CIT_ITEM_KEY
                and   item.CIT_DELETE_FLAG = 'N'
                and   item.CIT_EXCLUDE_FLAG = 'N'                       
                and   prc.CIT_PRICE_ITEM_KEY(+) = item.CIT_PRICE_ITEM_KEY      
                and   NVL(prc.CIP_PRICE_DESCRIPTOR, 0) = NVL({?:priceDescriptor}, 0)
                and   NVL(prc.CIP_ZONE_DESCRIPTOR, 0) = NVL({?:zonePriceDescriptor}, 0)
                and   prod.PROD = item.CIT_SRC_PROD                                             
                and   sup.supplier_id = nvl(info.cat_supplier_id, '149761140')                
             ]]>        
      </stmt>
      
      <stmt id="getCASMBProdList">
      <![CDATA[
        SELECT  /*+ ORDERED USE_NL(info , item, opt, prc, prod, sup ) */ 
              {supplierPartID}:= prod.supplier_part_id,
            {ilpPrice}:= prc.CIP_INT_LIST_PRICE,
            {acrpPrice}:= prc.CIP_AVG_CUST_RETL_PRICE,
            {netPriceD}:= prc.cip_net_price,
          {dealPriceD}:= prc.cip_deal_price,
          {priceDescriptor}:=prc.CIP_PRICE_DESCRIPTOR,
            {priceEndDateD}:= prc.CIP_PRICE_END_DATE,
            {priceEffDateD}:=prc.CIP_PRICE_START_DATE,
            {validationStatus}:= opt.COP_VALID_STATUS,
            {lastModifiedDateD}:= item.CIT_LAST_MODIFIED_DATE,
            {prodId}:= opt.COP_LOCALIZE_PROD,
            {id}:= item.CIT_ITEM_KEY,
            {contextID}:= item.cit_context_id,
            {programKey}:= item.CIT_PGM_KEY,
            {FFsID}:= prc.CIP_FFS_ID,
            {mfgPartID}:= prod.MFG_PART_ID,
            {shortDesc}:= BE_CONTENT_FALLBACK.get_short_desc({?:catalogID},opt.COP_LOCALIZE_PROD),
            {longDesc}:= BE_CONTENT_FALLBACK.get_long_desc({?:catalogID},opt.COP_LOCALIZE_PROD),
            {netPriceD}:= prc.CIP_NET_PRICE,
            {stockCode}:=prod.stock_code stock_code,
            {visionFlag}:=prod.vision_flag,
            {authModel}:=prod.auth_model,
            {activityCode}:=prod.activity_code
           FROM    cat_info info, cat_item item, CAT_ITEM_OPTIONS opt,
            cat_item_price prc,
            products prod, supplier_info sup

          WHERE info.CAT_CATALOG_ID = {?:catalogID}
          and   item.CAT_CATALOG_ID = info.CAT_CATALOG_ID                 
          and   opt.CAT_ITEM_KEY   = item.CIT_ITEM_KEY
          and   item.CIT_DELETE_FLAG = 'N'
          and   item.CIT_EXCLUDE_FLAG = 'N'   
          and   item.CIT_CONFIG_ID is null
          and   prc.CIT_PRICE_ITEM_KEY = item.CIT_PRICE_ITEM_KEY      
          and  prc.CIP_PRICE_DESCRIPTOR = {?:priceDescriptor}
          and  prc.CIP_ZONE_DESCRIPTOR is null
          and   prod.PROD = item.CIT_SRC_PROD                                             
          and   sup.supplier_id = nvl(info.cat_supplier_id, '149761140')                
       ]]>        
      </stmt>
      
      <stmt id="getOtherProdListValidPrc">
      <![CDATA[
        SELECT  /*+ ORDERED USE_NL(info , item, opt, prc, prod, sup ) */ 
            {netPriceD}:= prc.cip_net_price,
                {dealPriceD}:= prc.cip_deal_price,
                {priceEndDateD}:= prc.CIP_PRICE_END_DATE,
                {priceDescriptor}:=prc.CIP_PRICE_DESCRIPTOR,
                {supplierID}:= sup.supplier_id,
                {supplierName}:=sup.supplier_name,
                {supplierPartID}:= prod.supplier_part_id,
                {mfgPartID}:= prod.MFG_PART_ID,
                {mfg}:= nvl(prod.mfg, 'HP'),
                {mfgURL}:= nvl(item.CIT_DF_MFG_URL,prod.mfg_url),
                {srt}:=nvl(item.CIT_DF_SRT, prod.srt),
                {imageName}:= BE_CONTENT_FALLBACK.get_image_url(info.cat_catalog_id, opt.cop_localize_prod),
                {longDesc}:= BE_CONTENT_FALLBACK.get_long_desc(info.cat_catalog_id, opt.cop_localize_prod),
                {shortDesc}:= BE_CONTENT_FALLBACK.get_short_desc(info.cat_catalog_id, opt.cop_localize_prod),
                {dataSheetName}:= BE_CONTENT_FALLBACK.get_datasheet_url(info.cat_catalog_id, opt.cop_localize_prod),
                {lastModifiedDateD}:= item.cit_last_modified_date,
                {prodId}:= opt.COP_LOCALIZE_PROD,
                {cntryCode}:= opt.COP_CNTRY_CODE,
                {id}:= item.cit_item_key,
                {contextID}:= item.cit_context_id,
                {supplierURL}:= nvl(item.CIT_DF_SUPPLIER_URL, prod.supplier_url),
                {uom}:= prod.uom,
                {FFsID}:= prc.cip_ffs_id,
                {validationStatus}:= opt.COP_VALID_STATUS
          
                FROM    cat_info info, cat_item item, CAT_ITEM_OPTIONS opt,
                        cat_item_price prc, 
                        products prod, supplier_info sup
                        
                WHERE info.CAT_CATALOG_ID = {?:catalogID}
            and   item.CAT_CATALOG_ID = info.CAT_CATALOG_ID         
            and   opt.CAT_ITEM_KEY   = item.CIT_ITEM_KEY
            and   item.CIT_DELETE_FLAG = 'N'
            and   item.CIT_EXCLUDE_FLAG = 'N'   
            and   item.CIT_CONFIG_ID is null
            and   prc.CIT_PRICE_ITEM_KEY(+) = item.CIT_PRICE_ITEM_KEY       
            and   NVL(prc.CIP_PRICE_DESCRIPTOR, 0) = NVL({?:priceDescriptor}, 0)
            and   NVL(prc.CIP_ZONE_DESCRIPTOR, 0) = NVL({?:zonePriceDescriptor}, 0)                             
            and   prc.CIP_NET_PRICE is not NULL
            and   prod.PROD = item.CIT_SRC_PROD
            and   sup.supplier_id = nvl(info.cat_supplier_id, '149761140')          
            
            
       ]]>  
      </stmt>
      
      <stmt id="getOtherProdList">
    <![CDATA[
          SELECT/*+ ORDERED USE_NL(info , item, opt , prc, prod, sup ) */ 
                {netPriceD}:= prc.cip_net_price,
                {dealPriceD}:= prc.cip_deal_price,
                {priceEndDateD}:= prc.CIP_PRICE_END_DATE,
                {priceDescriptor}:=prc.CIP_PRICE_DESCRIPTOR,
                {supplierID}:= prod.supplier_id,
                {supplierName}:=prod.supplier_name,
                {supplierPartID}:= prod.supplier_part_id,
            {mfgPartID}:= prod.MFG_PART_ID,
                {mfg}:= nvl(prod.mfg, 'HP'),
                {mfgURL}:= nvl(item.CIT_DF_MFG_URL,prod.mfg_url),
                {srt}:=nvl(item.CIT_DF_SRT, prod.srt),
                {imageName}:= BE_CONTENT_FALLBACK.get_image_url(info.cat_catalog_id, opt.cop_localize_prod),
                {longDesc}:= BE_CONTENT_FALLBACK.get_long_desc(info.cat_catalog_id, opt.cop_localize_prod),
                {shortDesc}:= BE_CONTENT_FALLBACK.get_short_desc(info.cat_catalog_id, opt.cop_localize_prod),
                {dataSheetName}:= BE_CONTENT_FALLBACK.get_datasheet_url(info.cat_catalog_id, opt.cop_localize_prod),
                {lastModifiedDateD}:= item.cit_last_modified_date,
                {prodId}:= opt.COP_LOCALIZE_PROD,
                {cntryCode}:= opt.COP_CNTRY_CODE,
                {id}:= item.cit_item_key,
                {contextID}:= item.cit_context_id,
                {supplierURL}:= nvl(item.CIT_DF_SUPPLIER_URL, prod.supplier_url),
                {uom}:= prod.uom,
                {FFsID}:= prc.cip_ffs_id,
                {validationStatus}:= opt.COP_VALID_STATUS,
            {stockCode}:=prod.stock_code stock_code,
            {visionFlag}:=prod.vision_flag,
            {authModel}:=prod.auth_model,
            {activityCode}:=prod.activity_code
                FROM    cat_info info, cat_item item, CAT_ITEM_OPTIONS opt,
                        cat_item_price prc,
                        products prod, supplier_info sup
                        
                WHERE info.CAT_CATALOG_ID = {?:catalogID}
                and   item.CAT_CATALOG_ID = info.CAT_CATALOG_ID             
                and   opt.CAT_ITEM_KEY   = item.CIT_ITEM_KEY
                and   item.CIT_DELETE_FLAG = 'N'
                and   item.CIT_EXCLUDE_FLAG = 'N'               
                and   item.CIT_CONFIG_ID is null
                and   prc.CIT_PRICE_ITEM_KEY(+) = item.CIT_PRICE_ITEM_KEY       
                and   NVL(prc.CIP_PRICE_DESCRIPTOR,0) = NVL({?:priceDescriptor},0)
                and   NVL(prc.CIP_ZONE_DESCRIPTOR, 0) = NVL({?:zonePriceDescriptor}, 0)
                and   prod.PROD = item.CIT_SRC_PROD                             
                and   sup.supplier_id = nvl(info.cat_supplier_id, '149761140')              
        
     ]]>    
      </stmt>
      
      <stmt id="getItemsByAlertPriorityOld">
        <![CDATA[
        SELECT/*+ ORDERED USE_NL(info , item, pd, prc, opt, prod, sup) */                 
          {netPriceD}:=prc.cip_net_price cip_net_price,
          {dealPriceD}:=prc.cip_deal_price cip_deal_price,
          {localPriceD}:=prc.cip_local_price cip_local_price,
          {priceEndDateD}:=prc.CIP_PRICE_END_DATE CIP_PRICE_END_DATE,
          {priceDescriptor}:=prc.CIP_PRICE_DESCRIPTOR CIP_PRICE_DESCRIPTOR,
          {supplierID}:=prod.supplier_id supplier_id,
          {supplierName}:=prod.supplier_name supplier_name,
          {supplierPartID}:=prod.prod prod,
          {mfgPartID}:=prod.MFG_PART_ID MFG_PART_ID,         
          {mfg}:=nvl(item.CIT_DF_MFG,prod.mfg) mfg,
          {mfgURL}:=nvl(item.CIT_DF_MFG_URL,prod.mfg_url) mfg_url,
          {pgmSLA}:=prc.CIP_SLA CIP_SLA,
          {imageName}:=BE_CONTENT_FALLBACK.get_image_url(info.cat_catalog_id, opt.cop_localize_prod) ctc_image_url,
          {longDesc}:=BE_CONTENT_FALLBACK.get_long_desc(info.cat_catalog_id, opt.cop_localize_prod) ctc_long_desc,
          {shortDesc}:=BE_CONTENT_FALLBACK.get_short_desc(info.cat_catalog_id, opt.cop_localize_prod) ctc_short_desc,
          {dataSheetName}:=BE_CONTENT_FALLBACK.get_datasheet_url(info.cat_catalog_id, opt.cop_localize_prod) ctc_datasheet_url,
          {lastModifiedDateD}:=item.cit_last_modified_date cit_last_modified_date,
          {prodId}:=opt.COP_LOCALIZE_PROD COP_LOCALIZE_PROD,
          {cntryCode}:=opt.COP_CNTRY_CODE COP_CNTRY_CODE,
          {id}:=item.cit_item_key cit_item_key,
          {contextID}:=item.cit_context_id cit_context_id,
          {supplierURL}:=nvl(item.CIT_DF_SUPPLIER_URL, prod.supplier_url) supplier_url,
          {uom}:=prod.uom uom,
          {productLine}:=prod.pl pl,
          {FFsID}:=prc.cip_ffs_id cip_ffs_id,
          {validationStatus}:=opt.COP_VALID_STATUS COP_VALID_STATUS,
                  {stockCode}:=prod.stock_code stock_code
        FROM    cat_info info, cat_item item, cat_item_price prc,
         cat_price_descriptor pd, CAT_ITEM_OPTIONS opt,
            products prod, supplier_info sup
        WHERE info.CAT_CATALOG_ID = {?:catalogID}
        and   item.CAT_CATALOG_ID = info.CAT_CATALOG_ID
        and   pd.CAT_CATALOG_ID(+) = item.CAT_CATALOG_ID
        and   opt.CAT_CATALOG_ID = item.CAT_CATALOG_ID
        and   opt.CAT_ITEM_KEY   = item.CIT_ITEM_KEY
        and   (opt.cop_valid_status = 'V' or
            (opt.cop_valid_status = 'I' and 
                exists (select 'x' from alert_log where catalog_id = info.cat_catalog_id
                and catalog_item_key = item.cit_item_key
                and alert_priority > {?:alertPriority})
            )
              )
        and   item.CIT_DELETE_FLAG = 'N'
        and   item.CIT_EXCLUDE_FLAG = 'N'                                               
        and   prc.CIT_PRICE_ITEM_KEY(+) = item.CIT_PRICE_ITEM_KEY      
        and   NVL(prc.CIP_PRICE_DESCRIPTOR, 0) = NVL(pd.CPD_PRICE_DESCRIPTOR, 0)
        and   NVL(prc.CIP_ZONE_DESCRIPTOR, 0) = NVL(pd.CPD_ZONE_DESCRIPTOR, 0)
        and   prod.PROD = item.CIT_SRC_PROD                                             
        and   sup.supplier_id = nvl(info.cat_supplier_id, '149761140')
        order by opt.COP_LOCALIZE_PROD, prc.CIP_PRICE_DESCRIPTOR

        ]]> 
      </stmt>
      <stmt id="getVistaItemsByAlertPriority">
              <![CDATA[
              SELECT/*+ ORDERED USE_NL(info , item, prc, opt, prod) */                 
              {netPriceD}:=prc.cip_net_price cip_net_price,
              {dealPriceD}:=prc.cip_deal_price cip_deal_price,
              {localPriceD}:=prc.cip_local_price cip_local_price,
              {priceEndDateD}:=prc.CIP_PRICE_END_DATE CIP_PRICE_END_DATE,
              {priceDescriptor}:=prc.CIP_PRICE_DESCRIPTOR CIP_PRICE_DESCRIPTOR,
              {lastModifiedDateD}:=item.cit_last_modified_date cit_last_modified_date,
              {prodId}:=opt.COP_LOCALIZE_PROD COP_LOCALIZE_PROD,
              {cntryCode}:=opt.COP_CNTRY_CODE COP_CNTRY_CODE,
              {id}:=item.cit_item_key cit_item_key,
              {contextID}:=item.cit_context_id cit_context_id,
              {validationStatus}:=opt.COP_VALID_STATUS COP_VALID_STATUS,
              {stockCode}:=prod.stock_code stock_code,
              {bdID}:= decode(prc.cip_price_src_type,'DEAL', prc.CIP_PRICE_SRC_ID, 'GLOBAL', prc.CIP_PRICE_SRC_ID, 'LOCALDEAL', prc.CIP_PRICE_SRC_ID, 'PROMO_TIER', prc.CIP_PRICE_SRC_ID, 'GLOBALFW', prc.CIP_PRICE_SRC_ID, 'GENERAL', prc.CIP_PRICE_SRC_ID, 'LOCALFW', prc.CIP_PRICE_SRC_ID, 'PROMO_TIERFW', prc.CIP_PRICE_SRC_ID, 'PATSY', prc.CIP_PRICE_SRC_ID,''),    
          {visionFlag}:=prod.vision_flag,
          {authModel}:=prod.auth_model,
          {activityCode}:=prod.activity_code,
          {shipWeightImperial}:=prod.ship_weight_imperial,
          {shipWeightMetric}:=prod.ship_weight_metric,
          {streetPrice}:=(select local_price from local_price where prod = prod.prod and price_descriptor = 'USUSDDP' and rownum = 1)
            FROM  cat_info info, cat_item item, cat_item_price prc,
                  CAT_ITEM_OPTIONS opt, products prod
            WHERE info.CAT_CATALOG_ID = {?:catalogID}
            and   item.CAT_CATALOG_ID = info.CAT_CATALOG_ID                         
            and   item.CIT_DELETE_FLAG = 'N'
            and   item.CIT_EXCLUDE_FLAG = 'N'                                               
            and   prc.CIT_PRICE_ITEM_KEY = item.CIT_PRICE_ITEM_KEY      
            and   prc.CIP_PRICE_DESCRIPTOR = {?:priceDescriptor}
            and   prc.CIP_ZONE_DESCRIPTOR is null
            and   opt.CAT_CATALOG_ID = item.CAT_CATALOG_ID
        and   opt.CAT_ITEM_KEY   = item.CIT_ITEM_KEY
        and   (opt.cop_valid_status = 'V' or
            (opt.cop_valid_status = 'I' and 
                exists (select 'x' from alert_log where catalog_id = info.cat_catalog_id
                and catalog_item_key = item.cit_item_key
                and alert_priority > {?:alertPriority})
            )
                  )
            and prod.prod = opt.cop_localize_prod      
            order by opt.COP_LOCALIZE_PROD, prc.CIP_PRICE_DESCRIPTOR, prod.bundle_flag DESC
      
              ]]>   
      </stmt>
      
        <stmt id="getItemsByAlertPriority">
        <![CDATA[
      SELECT/*+ ORDERED USE_NL(info , item, pd, prc, opt, alog , prod, sup) */ 
              {netPriceD}:=catalog_item.cip_net_price,
              {dealPriceD}:=catalog_item.cip_deal_price,
              {localPriceD}:=catalog_item.cip_local_price,
              {priceEndDateD}:=catalog_item.CIP_PRICE_END_DATE,
              {priceDescriptor}:=catalog_item.CIP_PRICE_DESCRIPTOR,
              {supplierID}:=catalog_item.supplier_id,
              {supplierName}:=catalog_item.supplier_name,
              {supplierPartID}:=catalog_item.prod,
              {mfgPartID}:=catalog_item.MFG_PART_ID,         
              {mfg}:=catalog_item.mfg,
        	  {tangibleFlag}:=catalog_item.tangible_flag,
        	  {productLine}:=catalog_item.pl,
        	  {productFamily}:=catalog_item.prod_fmly_cd,
        	  {recyclableFlag}:=catalog_item.recyclable_flag,
        	  {priceType}:=catalog_item.cit_contract_identifier,
        	  {dealType}:=catalog_item.cip_deal_type,
        	  {priceSourceType}:=catalog_item.cip_price_src_type,
        	  {bidPrice}:=catalog_item.cip_deal_price,
			  {currencyCode}:=catalog_item.cip_tx_curr_cd,
			  {mfgURL}:=catalog_item.mfg_url,
              {pgmSLA}:=catalog_item.CIP_SLA,
              {imageName}:=catalog_item.ctc_image_url,
              {longDesc}:=catalog_item.ctc_long_desc,
              {shortDesc}:=catalog_item.ctc_short_desc,
              {dataSheetName}:=catalog_item.ctc_datasheet_url,
              {lastModifiedDateD}:=catalog_item.cit_last_modified_date,
              {prodId}:=catalog_item.COP_LOCALIZE_PROD,
              {cntryCode}:=catalog_item.COP_CNTRY_CODE,
              {id}:=catalog_item.cit_item_key,
              {contextID}:=catalog_item.cit_context_id,
              {supplierURL}:=catalog_item.supplier_url,
              {uom}:=catalog_item.uom,
              {FFsID}:=catalog_item.cip_ffs_id,
              {validationStatus}:=catalog_item.COP_VALID_STATUS,
              {bdID}:= catalog_item.CIP_PRICE_SRC_ID,
              {stockCode}:=catalog_item.stock_code,     
              {visionFlag}:=catalog_item.vision_flag,
              {authModel}:=catalog_item.auth_model,
              {activityCode}:=catalog_item.activity_code,
              {shipWeightImperial}:=catalog_item.ship_weight_imperial,
              {shipWeightMetric}:=catalog_item.ship_weight_metric,
              {streetPrice}:=(SELECT local_price FROM local_price WHERE prod = catalog_item.prod AND price_descriptor = 'USUSDDP' AND ROWNUM = 1),
              {otherUnspsc}:=catalog_item.other_unspsc,
              {unspscProd}:=catalog_item.unspsc_prod
        FROM
              (SELECT/*+ ORDERED USE_NL(info , item, pd, prc, opt, alog , prod, sup) test */ 
                        prc.cip_net_price cip_net_price,
                        prc.cip_deal_price cip_deal_price,
                        prc.cip_local_price cip_local_price,
                        prc.CIP_PRICE_END_DATE CIP_PRICE_END_DATE,
                        prc.CIP_PRICE_DESCRIPTOR CIP_PRICE_DESCRIPTOR,
                        prod.supplier_id supplier_id,
                        prod.supplier_name supplier_name,
                        prod.prod prod,
                        prod.MFG_PART_ID MFG_PART_ID,         
                        NVL(prod.mfg, 'HP') mfg,
            						NVL(prod.tangible_flag,'N') tangible_flag,
            						prod.pl pl,
            						prod.prod_fmly_cd prod_fmly_cd,
            						NVL(prod.recyclable_flag, 'N') recyclable_flag,
            						item.cit_contract_identifier cit_contract_identifier,
            						prc.cip_deal_type cip_deal_type,
            						prc.cip_price_src_type cip_price_src_type,
									prc.cip_tx_curr_cd cip_tx_curr_cd,
            						NVL(item.CIT_DF_MFG_URL,prod.mfg_url) mfg_url,
                        prc.CIP_SLA CIP_SLA,
                        BE_CONTENT_FALLBACK.get_image_url({?:catalogID},opt.COP_LOCALIZE_PROD) ctc_image_url,
                        REPLACE(REPLACE(REPLACE(BE_CONTENT_FALLBACK.get_long_desc({?:catalogID},opt.COP_LOCALIZE_PROD), CHR(13), ' '), CHR(10), ' '), CHR(9), ' ') ctc_long_desc,
                        REPLACE(REPLACE(REPLACE(BE_CONTENT_FALLBACK.get_short_desc({?:catalogID},opt.COP_LOCALIZE_PROD), CHR(13), ' '), CHR(10), ' '), CHR(9), ' ') ctc_short_desc,                        
                        BE_CONTENT_FALLBACK.get_datasheet_url({?:catalogID},opt.COP_LOCALIZE_PROD) ctc_datasheet_url,
                        item.cit_last_modified_date cit_last_modified_date,
                        opt.COP_LOCALIZE_PROD COP_LOCALIZE_PROD,
                        opt.COP_CNTRY_CODE COP_CNTRY_CODE,
                        item.cit_item_key cit_item_key,
                        item.cit_context_id cit_context_id,
                        NVL(item.CIT_DF_SUPPLIER_URL, prod.supplier_url) supplier_url,
                        prod.uom uom,
                        prc.cip_ffs_id cip_ffs_id,
                        opt.COP_VALID_STATUS COP_VALID_STATUS,
                        DECODE(prc.cip_price_src_type,'DEAL', prc.CIP_PRICE_SRC_ID, 'GLOBAL', prc.CIP_PRICE_SRC_ID, 'LOCALDEAL', prc.CIP_PRICE_SRC_ID, 'PROMO_TIER', prc.CIP_PRICE_SRC_ID, 'GLOBALFW', prc.CIP_PRICE_SRC_ID, 'GENERAL', prc.CIP_PRICE_SRC_ID, 'LOCALFW', prc.CIP_PRICE_SRC_ID, 'PROMO_TIERFW', prc.CIP_PRICE_SRC_ID, 'PATSY', prc.CIP_PRICE_SRC_ID, 'BD', prc.CIP_PRICE_SRC_ID,'') CIP_PRICE_SRC_ID,
                        prod.stock_code stock_code,
                        prod.vision_flag vision_flag,
                        prod.auth_model auth_model,
                        prod.activity_code activity_code,
                        prod.ship_weight_imperial ship_weight_imperial,
                        prod.ship_weight_metric ship_weight_metric,
                        DECODE( NVL(ctg.ctg_id,1),
									        1, NULL,
									      	DECODE(NVL(( SELECT (SELECT node_ext_path FROM ctg_tree WHERE node_id =  t.node_id AND ctg_id =  t.ctg_id ) node_ext_path	
									                       FROM ctg_prod t 
									                      WHERE t.ctg_id = DECODE(info.UNSPSC_VERSION,	'ECCMA', DECODE(ctg.parent_ctg_id, 254, ctg.ctg_id,NULL),
									      																										          'UNDP', DECODE(ctg.parent_ctg_id, 5598, ctg.ctg_id,NULL),
									      																			  NULL)
									      									AND t.prod = prod.prod
									      									AND ROWNUM = 1),
									                   1), 
									                1, (SELECT  (SELECT node_ext_path FROM ctg_tree WHERE node_id =  t.node_id AND ctg_id =  t.ctg_id ) node_ext_path	
									                       FROM ctg_prod t 
									                      WHERE ctg_id = DECODE(info.UNSPSC_VERSION, 'ECCMA', 254,
									                                                                 'UNDP',5598,
									                                                                  NULL) 
									                        AND t.prod = prod.prod
									                        AND ROWNUM = 1),
									                (SELECT (SELECT node_ext_path FROM ctg_tree WHERE node_id =  t.node_id AND ctg_id =  t.ctg_id ) node_ext_path	
									                   FROM ctg_prod t 
									                  WHERE t.ctg_id = DECODE(info.UNSPSC_VERSION,	'ECCMA', DECODE(ctg.parent_ctg_id, 254, ctg.ctg_id,NULL),
									      																										      'UNDP', DECODE(ctg.parent_ctg_id, 5598, ctg.ctg_id,NULL),
									      																			                     NULL)
									                    AND t.prod = prod.prod
									                    AND ROWNUM = 1)
									              )
									           ) other_unspsc,
						(SELECT (SELECT node_ext_path FROM ctg_tree WHERE node_id =  t.node_id AND ctg_id =  t.ctg_id ) node_ext_path	
											    FROM ctg_prod t WHERE t.ctg_id = 254 AND t.prod = prod.prod AND ROWNUM = 1)unspsc_prod               
		 FROM    CAT_INFO info, CAT_ITEM item, CAT_ITEM_PRICE prc,
                        CAT_PRICE_DESCRIPTOR pd, CAT_ITEM_OPTIONS opt, 
                        (SELECT MIN(alert_priority) alert_priority, catalog_item_key 
                           FROM ALERT_LOG  
                          WHERE catalog_id= {?:catalogID} 
                            AND src_type='catalog_item' 
                      GROUP BY catalog_item_key) alog, 
                        
                        products prod, supplier_info sup,
                        ctg_access_info acc,ctg_info ctg
                WHERE   info.CAT_CATALOG_ID = {?:catalogID}
                  AND   item.CAT_CATALOG_ID = info.CAT_CATALOG_ID
                  AND   pd.CAT_CATALOG_ID(+) = item.CAT_CATALOG_ID
                  AND   opt.CAT_CATALOG_ID = item.CAT_CATALOG_ID
                  AND   opt.CAT_ITEM_KEY   = item.CIT_ITEM_KEY
                  AND   opt.cop_valid_status = 'I'
                  AND   item.CIT_DELETE_FLAG = 'N'
                  AND   item.CIT_EXCLUDE_FLAG = 'N'                       
                  AND   alog.alert_priority > {?:alertPriority}
                  AND   alog.catalog_item_key = item.CIT_ITEM_KEY
                  AND   prc.CIT_PRICE_ITEM_KEY(+) = item.CIT_PRICE_ITEM_KEY      
                  AND   NVL(prc.CIP_PRICE_DESCRIPTOR, 0) = NVL(pd.CPD_PRICE_DESCRIPTOR, 0)
                  AND   NVL(prc.CIP_ZONE_DESCRIPTOR, 0) = NVL(pd.CPD_ZONE_DESCRIPTOR, 0)                                          
                  AND   prod.PROD = opt.COP_LOCALIZE_PROD                                             
                  AND   sup.supplier_id = NVL(info.cat_supplier_id, '149761140')
                  AND   info.cust_key =  acc.cust_key (+)
						      AND   ctg.ctg_id (+) = acc.ctg_id  
            UNION
                SELECT/*+ ORDERED USE_NL(info , item, pd, prc, opt,  prod, sup) */ 
                        prc.cip_net_price cip_net_price,
                        prc.cip_deal_price cip_deal_price,
                        prc.cip_local_price cip_local_price,
                        prc.CIP_PRICE_END_DATE CIP_PRICE_END_DATE,
                        prc.CIP_PRICE_DESCRIPTOR CIP_PRICE_DESCRIPTOR,
                        prod.supplier_id supplier_id,
                        prod.supplier_name supplier_name,
                        prod.prod prod,
                        prod.MFG_PART_ID MFG_PART_ID,         
                        NVL(prod.mfg, 'HP') mfg,
                  			NVL(prod.tangible_flag,'N') tangible_flag,
                  			prod.pl pl,
                  			prod.prod_fmly_cd prod_fmly_cd,
                  			NVL(prod.recyclable_flag, 'N') recyclable_flag,
                  			item.cit_contract_identifier cit_contract_identifier,
                  			prc.cip_deal_type cip_deal_type,
                  			prc.cip_price_src_type cip_price_src_type,
							prc.cip_tx_curr_cd cip_tx_curr_cd,
                  			NVL(item.CIT_DF_MFG_URL,prod.mfg_url) mfg_url,
                        prc.CIP_SLA CIP_SLA,
                        BE_CONTENT_FALLBACK.get_image_url({?:catalogID},opt.COP_LOCALIZE_PROD) ctc_image_url,
                        REPLACE(REPLACE(REPLACE(BE_CONTENT_FALLBACK.get_long_Desc({?:catalogID},opt.COP_LOCALIZE_PROD), CHR(13), ' '), CHR(10), ' '), CHR(9), ' ') ctc_long_desc,
                        REPLACE(REPLACE(REPLACE(BE_CONTENT_FALLBACK.get_short_Desc({?:catalogID},opt.COP_LOCALIZE_PROD), CHR(13), ' '), CHR(10), ' '), CHR(9), ' ') ctc_short_desc,                        
                        BE_CONTENT_FALLBACK.get_datasheet_url({?:catalogID},opt.COP_LOCALIZE_PROD) ctc_datasheet_url,
                        item.cit_last_modified_date cit_last_modified_date,
                        opt.COP_LOCALIZE_PROD COP_LOCALIZE_PROD,
                        opt.COP_CNTRY_CODE COP_CNTRY_CODE,
                        item.cit_item_key cit_item_key,
                        item.cit_context_id cit_context_id,
                        NVL(item.CIT_DF_SUPPLIER_URL, prod.supplier_url) supplier_url,
                        prod.uom uom,
                        prc.cip_ffs_id cip_ffs_id,
                        opt.COP_VALID_STATUS COP_VALID_STATUS,
                        DECODE(prc.cip_price_src_type,'DEAL', prc.CIP_PRICE_SRC_ID, 'GLOBAL', prc.CIP_PRICE_SRC_ID, 'LOCALDEAL', prc.CIP_PRICE_SRC_ID, 'PROMO_TIER', prc.CIP_PRICE_SRC_ID, 'GLOBALFW', prc.CIP_PRICE_SRC_ID, 'GENERAL', prc.CIP_PRICE_SRC_ID, 'LOCALFW', prc.CIP_PRICE_SRC_ID, 'PROMO_TIERFW', prc.CIP_PRICE_SRC_ID, 'PATSY', prc.CIP_PRICE_SRC_ID, 'BD', prc.CIP_PRICE_SRC_ID,'') CIP_PRICE_SRC_ID,
                        prod.stock_code stock_code,
                        prod.vision_flag vision_flag,
                        prod.auth_model auth_model,
                        prod.activity_code activity_code,
                        prod.ship_weight_imperial ship_weight_imperial,
                        prod.ship_weight_metric ship_weight_metric,
                                                DECODE( NVL(ctg.ctg_id,1),
									        1, NULL,
									      	DECODE(NVL(( SELECT (SELECT node_ext_path FROM ctg_tree WHERE node_id =  t.node_id AND ctg_id =  t.ctg_id ) node_ext_path	
									                       FROM ctg_prod t 
									                      WHERE t.ctg_id = DECODE(info.UNSPSC_VERSION,	'ECCMA', DECODE(ctg.parent_ctg_id, 254, ctg.ctg_id,NULL),
									      																										          'UNDP', DECODE(ctg.parent_ctg_id, 5598, ctg.ctg_id,NULL),
									      																			  NULL)
									      									AND t.prod = prod.prod
									      									AND ROWNUM = 1),
									                   1), 
									                1, (SELECT  (SELECT node_ext_path FROM ctg_tree WHERE node_id =  t.node_id AND ctg_id =  t.ctg_id ) node_ext_path	
									                       FROM ctg_prod t 
									                      WHERE ctg_id = DECODE(info.UNSPSC_VERSION, 'ECCMA', 254,
									                                                                 'UNDP',5598,
									                                                                  NULL) 
									                        AND t.prod = prod.prod
									                        AND ROWNUM = 1),
									                (SELECT (SELECT node_ext_path FROM ctg_tree WHERE node_id =  t.node_id AND ctg_id =  t.ctg_id ) node_ext_path	
									                   FROM ctg_prod t 
									                  WHERE t.ctg_id = DECODE(info.UNSPSC_VERSION,	'ECCMA', DECODE(ctg.parent_ctg_id, 254, ctg.ctg_id,NULL),
									      																										      'UNDP', DECODE(ctg.parent_ctg_id, 5598, ctg.ctg_id,NULL),
									      																			                     NULL)
									                    AND t.prod = prod.prod
									                    AND ROWNUM = 1)
									              )
									           ) other_unspsc,
									           (SELECT (SELECT node_ext_path FROM ctg_tree WHERE node_id =  t.node_id AND ctg_id =  t.ctg_id ) node_ext_path	
											    FROM ctg_prod t WHERE t.ctg_id = 254 AND t.prod = prod.prod AND ROWNUM = 1)unspsc_prod
                FROM    CAT_INFO info, CAT_ITEM item, CAT_ITEM_PRICE prc,
                        CAT_PRICE_DESCRIPTOR pd, CAT_ITEM_OPTIONS opt, 
                        products prod, supplier_info sup,
                        ctg_access_info acc,
                        ctg_info ctg
                WHERE   info.CAT_CATALOG_ID = {?:catalogID}
                  AND   item.CAT_CATALOG_ID = info.CAT_CATALOG_ID
                  AND   pd.CAT_CATALOG_ID(+) = item.CAT_CATALOG_ID
                  AND   opt.CAT_CATALOG_ID = item.CAT_CATALOG_ID
                  AND   opt.CAT_ITEM_KEY   = item.CIT_ITEM_KEY
                  AND   opt.cop_valid_status = 'V'
                  AND   item.CIT_DELETE_FLAG = 'N'
                  AND   item.CIT_EXCLUDE_FLAG = 'N'                                               
                  AND   prc.CIT_PRICE_ITEM_KEY(+) = item.CIT_PRICE_ITEM_KEY      
                  AND   NVL(prc.CIP_PRICE_DESCRIPTOR, 0) = NVL(pd.CPD_PRICE_DESCRIPTOR, 0)
                  AND   NVL(prc.CIP_ZONE_DESCRIPTOR, 0) = NVL(pd.CPD_ZONE_DESCRIPTOR, 0)                                          
                  AND   prod.PROD = opt.COP_LOCALIZE_PROD                                             
                  AND   sup.supplier_id = NVL(info.cat_supplier_id, '149761140')
                  AND   info.cust_key =  acc.cust_key (+)
						      AND   ctg.ctg_id (+) = acc.ctg_id      
              ) catalog_item                   
      ORDER BY catalog_item.COP_LOCALIZE_PROD, catalog_item.CIP_PRICE_DESCRIPTOR
                        
         ]]>    
      </stmt>

      <stmt id="getValidItems">
        <![CDATA[
              SELECT/*+ ORDERED USE_NL(info , item, pd, prc, opt, prod, sup) */ 
                        {netPriceD}:= prc.cip_net_price,
                        {dealPriceD}:= prc.cip_deal_price,
                        {localPriceD}:= prc.cip_local_price,
                        {priceEndDateD}:= prc.CIP_PRICE_END_DATE,
                        {priceDescriptor}:=prc.CIP_PRICE_DESCRIPTOR,
                        {supplierID}:= prod.supplier_id,
                        {supplierName}:=prod.supplier_name,
                        {supplierPartID}:= prod.prod,
                        {mfgPartID}:= prod.MFG_PART_ID,
                        {mfg}:= nvl(prod.mfg, 'HP'),
                        {mfgURL}:= nvl(item.CIT_DF_MFG_URL,prod.mfg_url),
                        {pgmSLA}:= prc.CIP_SLA,
                        {imageName}:= BE_CONTENT_FALLBACK.get_image_url({?:catalogID},opt.COP_LOCALIZE_PROD),
                        {longDesc}:= BE_CONTENT_FALLBACK.get_long_desc({?:catalogID},opt.COP_LOCALIZE_PROD),
                        {shortDesc}:= BE_CONTENT_FALLBACK.get_short_desc({?:catalogID},opt.COP_LOCALIZE_PROD),
                        {dataSheetName}:= BE_CONTENT_FALLBACK.get_datasheet_url({?:catalogID},opt.COP_LOCALIZE_PROD),
                        {lastModifiedDateD}:= item.cit_last_modified_date,
                        {prodId}:= opt.COP_LOCALIZE_PROD,
                        {cntryCode}:= opt.COP_CNTRY_CODE,
                        {id}:= item.cit_item_key,
                        {contextID}:= item.cit_context_id,
                        {supplierURL}:= nvl(item.CIT_DF_SUPPLIER_URL, prod.supplier_url),
                        {uom}:= prod.uom,
                        {productLine}:= prod.pl,
                        {FFsID}:= prc.cip_ffs_id,
                        {validationStatus}:= opt.COP_VALID_STATUS,
                        {bdID}:= decode(prc.cip_price_src_type,'DEAL', prc.CIP_PRICE_SRC_ID, 'GLOBAL', prc.CIP_PRICE_SRC_ID, 'LOCALDEAL', prc.CIP_PRICE_SRC_ID, 'PROMO_TIER', prc.CIP_PRICE_SRC_ID, 'GLOBALFW', prc.CIP_PRICE_SRC_ID, 'GENERAL', prc.CIP_PRICE_SRC_ID, 'LOCALFW', prc.CIP_PRICE_SRC_ID, 'PROMO_TIERFW', prc.CIP_PRICE_SRC_ID, 'PATSY', prc.CIP_PRICE_SRC_ID, 'BD', prc.CIP_PRICE_SRC_ID,''),          
            			{stockCode}:=prod.stock_code,   
                		{visionFlag}:=prod.vision_flag,
                		{authModel}:=prod.auth_model,
                		{activityCode}:=prod.activity_code,
                		{shipWeightImperial}:=prod.ship_weight_imperial,
                		{shipWeightMetric}:=prod.ship_weight_metric,
            			{streetPrice}:=(select local_price from local_price where prod = prod.prod and price_descriptor = 'USUSDDP' and rownum = 1),
                        {tangibleFlag}:=prod.tangible_flag,
                        {productFamily}:=prod.prod_fmly_cd,
        	  			{recyclableFlag}:=prod.recyclable_flag,
 		        	    {priceType}:=item.cit_contract_identifier,
        	  			{dealType}:=prc.cip_deal_type,
        	  			{priceSourceType}:=prc.cip_price_src_type,
        	  			{bidPrice}:=prc.cip_deal_price,
			  			{currencyCode}:=prc.cip_tx_curr_cd,
			  			{otherUnspsc}:=(SELECT local_price FROM local_price WHERE prod = prod.prod AND price_descriptor = 'USUSDDP' AND ROWNUM = 1), (SELECT local_price FROM local_price WHERE prod = prod.prod AND price_descriptor = 'USUSDDP' AND ROWNUM = 1) loc, DECODE( NVL(ctg.ctg_id,1),
									        1, NULL,
									      	DECODE(NVL(( SELECT (SELECT node_ext_path FROM ctg_tree WHERE node_id =  t.node_id AND ctg_id =  t.ctg_id ) node_ext_path	
									                       FROM ctg_prod t 
									                      WHERE t.ctg_id = DECODE(info.UNSPSC_VERSION,	'ECCMA', DECODE(ctg.parent_ctg_id, 254, ctg.ctg_id,NULL),
									      																										          'UNDP', DECODE(ctg.parent_ctg_id, 5598, ctg.ctg_id,NULL),
									      																			  NULL)
									      									AND t.prod = prod.prod
									      									AND ROWNUM = 1),
									                   1), 
									                1, (SELECT  (SELECT node_ext_path FROM ctg_tree WHERE node_id =  t.node_id AND ctg_id =  t.ctg_id ) node_ext_path	
									                       FROM ctg_prod t 
									                      WHERE ctg_id = DECODE(info.UNSPSC_VERSION, 'ECCMA', 254,
									                                                                 'UNDP',5598,
									                                                                  NULL) 
									                        AND t.prod = prod.prod
									                        AND ROWNUM = 1),
									                (SELECT (SELECT node_ext_path FROM ctg_tree WHERE node_id =  t.node_id AND ctg_id =  t.ctg_id ) node_ext_path	
									                   FROM ctg_prod t 
									                  WHERE t.ctg_id = DECODE(info.UNSPSC_VERSION,	'ECCMA', DECODE(ctg.parent_ctg_id, 254, ctg.ctg_id,NULL),
									      																										      'UNDP', DECODE(ctg.parent_ctg_id, 5598, ctg.ctg_id,NULL),
									      																			                     NULL)
									                    AND t.prod = prod.prod
									                    AND ROWNUM = 1)
									              )
									           ) other_unspsc,
						{unspscProd}:=(SELECT (SELECT node_ext_path FROM ctg_tree WHERE node_id =  t.node_id AND ctg_id =  t.ctg_id ) node_ext_path									    FROM ctg_prod t WHERE t.ctg_id = 254 AND t.prod = prod.prod AND ROWNUM = 1)unspsc_prod
			  			
                        FROM    cat_info info, cat_item item, cat_item_price prc,
                                cat_price_descriptor pd, CAT_ITEM_OPTIONS opt,
                                products prod, supplier_info sup,
								ctg_access_info acc,ctg_info ctg
                        WHERE info.CAT_CATALOG_ID = {?:catalogID}
                        and   item.CAT_CATALOG_ID = info.CAT_CATALOG_ID
                        and   pd.CAT_CATALOG_ID(+) = item.CAT_CATALOG_ID
                        and   opt.CAT_CATALOG_ID = item.CAT_CATALOG_ID
                        and   opt.CAT_ITEM_KEY   = item.CIT_ITEM_KEY
                        and   opt.cop_valid_status = 'V'
                        and   item.CIT_DELETE_FLAG = 'N'
                        and   item.CIT_EXCLUDE_FLAG = 'N'                                               
                        and   prc.CIT_PRICE_ITEM_KEY(+) = item.CIT_PRICE_ITEM_KEY      
                        and   NVL(prc.CIP_PRICE_DESCRIPTOR, 0) = NVL(pd.CPD_PRICE_DESCRIPTOR,0)
                        and   NVL(prc.CIP_ZONE_DESCRIPTOR, 0) = NVL(pd.CPD_ZONE_DESCRIPTOR, 0)                                          
                        and   prod.PROD = opt.COP_LOCALIZE_PROD                                             
                        and   sup.supplier_id = nvl(info.cat_supplier_id, '149761140')
                        and   info.cust_key =  acc.cust_key (+)
						and   ctg.ctg_id (+) = acc.ctg_id  
                        order by opt.COP_LOCALIZE_PROD, prc.CIP_PRICE_DESCRIPTOR

         ]]>    
      </stmt>
      <stmt id="getVistaValidItems">
              <![CDATA[
                    SELECT/*+ ORDERED USE_NL(info , item, prc, opt, prod) */ 
              {netPriceD}:= prc.cip_net_price,
              {dealPriceD}:= prc.cip_deal_price,
              {localPriceD}:= prc.cip_local_price,
              {priceEndDateD}:= prc.CIP_PRICE_END_DATE,
              {priceDescriptor}:=prc.CIP_PRICE_DESCRIPTOR,
              {lastModifiedDateD}:= item.cit_last_modified_date,
              {prodId}:= opt.COP_LOCALIZE_PROD,
              {cntryCode}:= opt.COP_CNTRY_CODE,
              {id}:= item.cit_item_key,
              {contextID}:= item.cit_context_id,
              {validationStatus}:= opt.COP_VALID_STATUS,
              {stockCode}:=prod.stock_code stock_code,  
              {visionFlag}:=prod.vision_flag,
              {authModel}:=prod.auth_model,
              {activityCode}:=prod.activity_code,
              {shipWeightImperial}:=prod.ship_weight_imperial,
              {shipWeightMetric}:=prod.ship_weight_metric,
              {streetPrice}:=(select local_price from local_price where prod = prod.prod and price_descriptor = 'USUSDDP' and rownum = 1)
              FROM    cat_info info, cat_item item, cat_item_price prc,
                  CAT_ITEM_OPTIONS opt, products prod

              WHERE info.CAT_CATALOG_ID = {?:catalogID}
              and   item.CAT_CATALOG_ID = info.CAT_CATALOG_ID                         
              and   item.CIT_DELETE_FLAG = 'N'
              and   item.CIT_EXCLUDE_FLAG = 'N'                                               
              and   prc.CIT_PRICE_ITEM_KEY = item.CIT_PRICE_ITEM_KEY      
              and   prc.CIP_PRICE_DESCRIPTOR = {?:priceDescriptor}
              and   prc.CIP_ZONE_DESCRIPTOR is null
              and   opt.CAT_CATALOG_ID = item.CAT_CATALOG_ID
              and   opt.CAT_ITEM_KEY   = item.CIT_ITEM_KEY
              and   opt.cop_valid_status = 'V'  
              and   prod.prod = opt.cop_localize_prod
              order by opt.COP_LOCALIZE_PROD, prc.CIP_PRICE_DESCRIPTOR, prod.bundle_flag DESC
      
               ]]>    
      </stmt>
      <stmt id="getAllItems">
        <![CDATA[
              SELECT/*+ ORDERED USE_NL(info , item, pd, prc, opt, prod, sup) */ 
                        {netPriceD}:= prc.cip_net_price,
                        {dealPriceD}:= prc.cip_deal_price,
                        {localPriceD}:= prc.cip_local_price,
                        {priceEndDateD}:= prc.CIP_PRICE_END_DATE,
                        {priceDescriptor}:=prc.CIP_PRICE_DESCRIPTOR,
                        {supplierID}:= prod.supplier_id,
                        {supplierName}:=prod.supplier_name,
                        {supplierPartID}:= prod.prod,
                        {mfgPartID}:= prod.MFG_PART_ID,
                        {mfg}:= nvl(prod.mfg, 'HP'),
                        {mfgURL}:= nvl(item.CIT_DF_MFG_URL,prod.mfg_url),
                        {pgmSLA}:= prc.CIP_SLA,
                        {imageName}:= BE_CONTENT_FALLBACK.get_image_url({?:catalogID},opt.COP_LOCALIZE_PROD),
                        {longDesc}:= BE_CONTENT_FALLBACK.get_long_desc({?:catalogID},opt.COP_LOCALIZE_PROD),
                        {shortDesc}:= BE_CONTENT_FALLBACK.get_short_desc({?:catalogID},opt.COP_LOCALIZE_PROD),
                        {dataSheetName}:= BE_CONTENT_FALLBACK.get_datasheet_url({?:catalogID},opt.COP_LOCALIZE_PROD),
                        {lastModifiedDateD}:= item.cit_last_modified_date,
                        {prodId}:= opt.COP_LOCALIZE_PROD,
                        {cntryCode}:= opt.COP_CNTRY_CODE,
                        {id}:= item.cit_item_key,
                        {contextID}:= item.cit_context_id,
                        {supplierURL}:= nvl(item.CIT_DF_SUPPLIER_URL, prod.supplier_url),
                        {uom}:= prod.uom,
                        {productLine}:= prod.pl,
                        {FFsID}:= prc.cip_ffs_id,
                        {validationStatus}:= opt.COP_VALID_STATUS,
                        {bdID}:= decode(prc.cip_price_src_type,'DEAL', prc.CIP_PRICE_SRC_ID, 'GLOBAL', prc.CIP_PRICE_SRC_ID, 'LOCALDEAL', prc.CIP_PRICE_SRC_ID, 'PROMO_TIER', prc.CIP_PRICE_SRC_ID, 'GLOBALFW', prc.CIP_PRICE_SRC_ID, 'GENERAL', prc.CIP_PRICE_SRC_ID, 'LOCALFW', prc.CIP_PRICE_SRC_ID, 'PROMO_TIERFW', prc.CIP_PRICE_SRC_ID, 'PATSY', prc.CIP_PRICE_SRC_ID, 'BD', prc.CIP_PRICE_SRC_ID,''),
                		{stockCode}:=prod.stock_code,
                		{visionFlag}:=prod.vision_flag,
                		{authModel}:=prod.auth_model,
                		{activityCode}:=prod.activity_code,
                		{shipWeightImperial}:=prod.ship_weight_imperial,
                		{shipWeightMetric}:=prod.ship_weight_metric,
                		{streetPrice}:=(select local_price from local_price where prod = prod.prod and price_descriptor = 'USUSDDP' and rownum = 1),
                		{tangibleFlag}:=prod.tangible_flag,
                        {productLine}:=prod.pl,
        	 		    {productFamily}:=prod.prod_fmly_cd,
        	  			{recyclableFlag}:=prod.recyclable_flag,
 		        	    {priceType}:=item.cit_contract_identifier,
        	  			{dealType}:=prc.cip_deal_type,
        	  			{priceSourceType}:=prc.cip_price_src_type,
        	  			{bidPrice}:=prc.cip_deal_price,
			  			{currencyCode}:=prc.cip_tx_curr_cd,
			  			{otherUnspsc}:=(SELECT local_price FROM local_price WHERE prod = prod.prod AND price_descriptor = 'USUSDDP' AND ROWNUM = 1), (SELECT local_price FROM local_price WHERE prod = prod.prod AND price_descriptor = 'USUSDDP' AND ROWNUM = 1) loc, DECODE( NVL(ctg.ctg_id,1),
									        1, NULL,
									      	DECODE(NVL(( SELECT (SELECT node_ext_path FROM ctg_tree WHERE node_id =  t.node_id AND ctg_id =  t.ctg_id ) node_ext_path	
									                       FROM ctg_prod t 
									                      WHERE t.ctg_id = DECODE(info.UNSPSC_VERSION,	'ECCMA', DECODE(ctg.parent_ctg_id, 254, ctg.ctg_id,NULL),
									      																										          'UNDP', DECODE(ctg.parent_ctg_id, 5598, ctg.ctg_id,NULL),
									      																			  NULL)
									      									AND t.prod = prod.prod
									      									AND ROWNUM = 1),
									                   1), 
									                1, (SELECT  (SELECT node_ext_path FROM ctg_tree WHERE node_id =  t.node_id AND ctg_id =  t.ctg_id ) node_ext_path	
									                       FROM ctg_prod t 
									                      WHERE ctg_id = DECODE(info.UNSPSC_VERSION, 'ECCMA', 254,
									                                                                 'UNDP',5598,
									                                                                  NULL) 
									                        AND t.prod = prod.prod
									                        AND ROWNUM = 1),
									                (SELECT (SELECT node_ext_path FROM ctg_tree WHERE node_id =  t.node_id AND ctg_id =  t.ctg_id ) node_ext_path	
									                   FROM ctg_prod t 
									                  WHERE t.ctg_id = DECODE(info.UNSPSC_VERSION,	'ECCMA', DECODE(ctg.parent_ctg_id, 254, ctg.ctg_id,NULL),
									      																										      'UNDP', DECODE(ctg.parent_ctg_id, 5598, ctg.ctg_id,NULL),
									      																			                     NULL)
									                    AND t.prod = prod.prod
									                    AND ROWNUM = 1)
									              )
									           ) other_unspsc,
						{unspscProd}:=(SELECT (SELECT node_ext_path FROM ctg_tree WHERE node_id =  t.node_id AND ctg_id =  t.ctg_id ) node_ext_path									    FROM ctg_prod t WHERE t.ctg_id = 254 AND t.prod = prod.prod AND ROWNUM = 1)unspsc_prod
			  			FROM    cat_info info, cat_item item, cat_item_price prc,
                                cat_price_descriptor pd, CAT_ITEM_OPTIONS opt, 
                                products prod, supplier_info sup,
     							ctg_access_info acc,ctg_info ctg
                        WHERE info.CAT_CATALOG_ID = {?:catalogID}
                        and   item.CAT_CATALOG_ID = info.CAT_CATALOG_ID
                        and   pd.CAT_CATALOG_ID(+) = item.CAT_CATALOG_ID
                        and   opt.CAT_CATALOG_ID = item.CAT_CATALOG_ID
                        and   opt.CAT_ITEM_KEY   = item.CIT_ITEM_KEY                            
                        and   item.CIT_DELETE_FLAG = 'N'
                        and   item.CIT_EXCLUDE_FLAG = 'N'                                               
                        and   prc.CIT_PRICE_ITEM_KEY(+) = item.CIT_PRICE_ITEM_KEY      
                        and   NVL(prc.CIP_PRICE_DESCRIPTOR, 0) = NVL(pd.CPD_PRICE_DESCRIPTOR, 0)
                        and   NVL(prc.CIP_ZONE_DESCRIPTOR, 0) = NVL(pd.CPD_ZONE_DESCRIPTOR, 0)                                          
                        and   prod.PROD = opt.COP_LOCALIZE_PROD                                             
                        and   sup.supplier_id = nvl(info.cat_supplier_id, '149761140')
                        and   info.cust_key =  acc.cust_key (+)
						and   ctg.ctg_id (+) = acc.ctg_id 
                        order by opt.COP_LOCALIZE_PROD, prc.CIP_PRICE_DESCRIPTOR
                
         ]]>    
      </stmt>

      <stmt id="getVistaAllItems">
              <![CDATA[
                    SELECT/*+ ORDERED USE_NL(info , item, prc, opt, prod) */ 
              {netPriceD}:= prc.cip_net_price,
              {dealPriceD}:= prc.cip_deal_price,
              {localPriceD}:= prc.cip_local_price,
              {priceEndDateD}:= prc.CIP_PRICE_END_DATE,
              {priceDescriptor}:=prc.CIP_PRICE_DESCRIPTOR,
              {lastModifiedDateD}:= item.cit_last_modified_date,
              {prodId}:= opt.COP_LOCALIZE_PROD,
              {cntryCode}:= opt.COP_CNTRY_CODE,
              {id}:= item.cit_item_key,
              {contextID}:= item.cit_context_id,
              {validationStatus}:= opt.COP_VALID_STATUS,        
              {stockCode}:=prod.stock_code stock_code,
              {bdID}:= decode(prc.cip_price_src_type,'DEAL', prc.CIP_PRICE_SRC_ID, 'GLOBAL', prc.CIP_PRICE_SRC_ID, 'LOCALDEAL', prc.CIP_PRICE_SRC_ID, 'PROMO_TIER', prc.CIP_PRICE_SRC_ID, 'GLOBALFW', prc.CIP_PRICE_SRC_ID, 'GENERAL', prc.CIP_PRICE_SRC_ID, 'LOCALFW', prc.CIP_PRICE_SRC_ID, 'PROMO_TIERFW', prc.CIP_PRICE_SRC_ID, 'PATSY', prc.CIP_PRICE_SRC_ID,''),
              {visionFlag}:=prod.vision_flag,
              {authModel}:=prod.auth_model,
              {activityCode}:=prod.activity_code,
              {shipWeightImperial}:=prod.ship_weight_imperial,
              {shipWeightMetric}:=prod.ship_weight_metric,
              {streetPrice}:=(select local_price from local_price where prod = prod.prod and price_descriptor = 'USUSDDP' and rownum = 1)
              
              FROM    cat_info info, cat_item item, cat_item_price prc,
                  CAT_ITEM_OPTIONS opt, products prod

              WHERE info.CAT_CATALOG_ID = {?:catalogID}
              and   item.CAT_CATALOG_ID = info.CAT_CATALOG_ID                         
              and   item.CIT_DELETE_FLAG = 'N'
              and   item.CIT_EXCLUDE_FLAG = 'N'                                               
              and   prc.CIT_PRICE_ITEM_KEY = item.CIT_PRICE_ITEM_KEY      
              and   prc.CIP_PRICE_DESCRIPTOR = {?:priceDescriptor}
              and   prc.CIP_ZONE_DESCRIPTOR is null
              and   opt.CAT_CATALOG_ID = item.CAT_CATALOG_ID
              and   opt.CAT_ITEM_KEY   = item.CIT_ITEM_KEY
              and   prod.prod = opt.cop_localize_prod
              order by opt.COP_LOCALIZE_PROD, prc.CIP_PRICE_DESCRIPTOR
                      
               ]]>    
      </stmt>
      
      <stmt id="getOmihItemsByAlertPriority">
      <![CDATA[
     SELECT/*+ ORDERED USE_NL(info , item, pd, prc, opt, alog, bundle, prod, sup) */ 
          {catMasterItemKey}:=item.CIT_PARENT_ITEM_KEY,
          {catMasterKey}:=info.CAT_PARENT_CATALOG_ID, 
          {prodId}:=opt.COP_LOCALIZE_PROD,
          {shortDesc}:=BE_CONTENT_FALLBACK.get_short_desc({?:catalogID},opt.COP_LOCALIZE_PROD),
          {netPriceD}:=prc.CIP_NET_PRICE,
          {priceDescriptor}:=prc.CIP_PRICE_DESCRIPTOR,
          {longDesc}:=BE_CONTENT_FALLBACK.get_long_desc({?:catalogID},opt.COP_LOCALIZE_PROD),
          {bundleFlag}:=item.CIT_BUNDLE_FLAG,
          {FFsID}:=prc.cip_ffs_id,
          {supplierID}:=prod.supplier_id,
          {validationStatus}:=opt.COP_VALID_STATUS,
          {lastModifiedDateD}:=item.CIT_LAST_MODIFIED_DATE,
          {bundleName}:= bundle.BDL_CUST_BUNDLE_ID,
          {bundleFlag}:='B'
          from CAT_INFO info,  cat_price_descriptor pd, CAT_ITEM item, 
           CAT_ITEM_OPTIONS opt, alert_log alog, CAT_BUNDLE bundle, CAT_ITEM_PRICE prc,
           products prod, supplier_info sup
          WHERE info.CAT_CATALOG_ID = {?:catalogID}
          and   pd.CAT_CATALOG_ID = item.CAT_CATALOG_ID
          and   item.CAT_CATALOG_ID = info.CAT_CATALOG_ID           
          and   opt.CAT_ITEM_KEY   = item.CIT_ITEM_KEY
          and   opt.cop_valid_status = 'I'
          and   alog.catalog_id = item.cat_catalog_id
          and   alog.alert_priority >= {?:alertPriority}
          and   alog.catalog_item_key = item.CIT_ITEM_KEY
          and   bundle.CIT_ITEM_KEY = item.CIT_PARENT_ITEM_KEY
          and   upper(bundle.BDL_STATE) = 'R' and bundle.BDL_END_DATE >= SYSDATE
          and   item.CIT_SOURCE = 'COMCAT_BDL' 
          and   prc.CIP_NET_PRICE is not null
          and   prc.CIT_PRICE_ITEM_KEY = item.CIT_PRICE_ITEM_KEY      
          and   NVL(prc.CIP_PRICE_DESCRIPTOR, 0) = NVL(pd.CPD_PRICE_DESCRIPTOR, 0)
          and   NVL(prc.CIP_ZONE_DESCRIPTOR, 0) = NVL(pd.CPD_ZONE_DESCRIPTOR, 0)                                                                        
          and   prod.PROD = opt.COP_LOCALIZE_PROD                               
          and   sup.supplier_id = nvl(info.cat_supplier_id, '149761140')    
          order by opt.COP_LOCALIZE_PROD, prc.CIP_PRICE_DESCRIPTOR
                 
          UNION
          SELECT/*+ ORDERED USE_NL(info , item, pd, prc, opt, bundle, prod, sup) */ 
          {catMasterItemKey}:=item.CIT_PARENT_ITEM_KEY,
          {catMasterKey}:=info.CAT_PARENT_CATALOG_ID, 
          {prodId}:=opt.COP_LOCALIZE_PROD,
          {shortDesc}:=BE_CONTENT_FALLBACK.get_short_desc({?:catalogID},opt.COP_LOCALIZE_PROD),
          {netPriceD}:=prc.CIP_NET_PRICE,
          {priceDescriptor}:=prc.CIP_PRICE_DESCRIPTOR,
          {longDesc}:=BE_CONTENT_FALLBACK.get_long_desc({?:catalogID},opt.COP_LOCALIZE_PROD),
          {bundleFlag}:=item.CIT_BUNDLE_FLAG,
          {FFsID}:=prc.cip_ffs_id,
          {supplierID}:=prod.supplier_id,
          {validationStatus}:=opt.COP_VALID_STATUS,
          {lastModifiedDateD}:=item.CIT_LAST_MODIFIED_DATE,
          {bundleName}:= bundle.BDL_CUST_BUNDLE_ID,
          {bundleFlag}:='B'
          from CAT_INFO info,  cat_price_descriptor pd, CAT_ITEM item, 
           CAT_ITEM_OPTIONS opt, CAT_BUNDLE bundle, CAT_ITEM_PRICE prc,
           products prod, supplier_info sup

          WHERE info.CAT_CATALOG_ID = {?:catalogID}
          and   pd.CAT_CATALOG_ID = item.CAT_CATALOG_ID
          and   item.CAT_CATALOG_ID = info.CAT_CATALOG_ID           
          and   opt.CAT_ITEM_KEY   = item.CIT_ITEM_KEY
          and   opt.cop_valid_status = 'V'
          and   bundle.CIT_ITEM_KEY = item.CIT_PARENT_ITEM_KEY
          and   upper(bundle.BDL_STATE) = 'R' and bundle.BDL_END_DATE >= SYSDATE
          and   item.CIT_SOURCE = 'COMCAT_BDL' 
          and   prc.CIP_NET_PRICE is not null
          and   prc.CIT_PRICE_ITEM_KEY = item.CIT_PRICE_ITEM_KEY      
          and   NVL(prc.CIP_PRICE_DESCRIPTOR, 0) = NVL(pd.CPD_PRICE_DESCRIPTOR, 0)
          and   NVL(prc.CIP_ZONE_DESCRIPTOR, 0) = NVL(pd.CPD_ZONE_DESCRIPTOR, 0)                                                                        
          and   prod.PROD = opt.COP_LOCALIZE_PROD                               
          and   sup.supplier_id = nvl(info.cat_supplier_id, '149761140')    
          order by opt.COP_LOCALIZE_PROD, prc.CIP_PRICE_DESCRIPTOR                        
             ]]>    
            </stmt>
            
            <stmt id="getOmihValidItems">
              <![CDATA[
                    SELECT/*+ ORDERED USE_NL(info , item, pd, prc, opt, bundle, prod, sup) */ 
              {catMasterItemKey}:=item.CIT_PARENT_ITEM_KEY,
              {catMasterKey}:=info.CAT_PARENT_CATALOG_ID, 
              {prodId}:=opt.COP_LOCALIZE_PROD,
              {shortDesc}:=BE_CONTENT_FALLBACK.get_short_desc({?:catalogID},opt.COP_LOCALIZE_PROD),
              {netPriceD}:=prc.CIP_NET_PRICE,
              {priceDescriptor}:=prc.CIP_PRICE_DESCRIPTOR,
              {longDesc}:=BE_CONTENT_FALLBACK.get_short_desc({?:catalogID},opt.COP_LOCALIZE_PROD),
              {bundleFlag}:=item.CIT_BUNDLE_FLAG,
              {FFsID}:=prc.cip_ffs_id,
              {supplierID}:=prod.supplier_id,
              {validationStatus}:=opt.COP_VALID_STATUS,
                  {lastModifiedDateD}:=item.CIT_LAST_MODIFIED_DATE,
                  {bundleName}:= bundle.BDL_CUST_BUNDLE_ID,
              {bundleFlag}:='B'           

              from CAT_INFO info,  cat_price_descriptor pd, CAT_ITEM item, 
                   CAT_ITEM_OPTIONS opt, CAT_BUNDLE bundle, CAT_ITEM_PRICE prc,
                   products prod, supplier_info sup
              WHERE info.CAT_CATALOG_ID = {?:catalogID}
              and   pd.CAT_CATALOG_ID = item.CAT_CATALOG_ID
              and   item.CAT_CATALOG_ID = info.CAT_CATALOG_ID           
              and   opt.CAT_ITEM_KEY   = item.CIT_ITEM_KEY
              and   opt.cop_valid_status = 'V'
              and   bundle.CIT_ITEM_KEY = item.CIT_PARENT_ITEM_KEY
              and   upper(bundle.BDL_STATE) = 'R' and bundle.BDL_END_DATE >= SYSDATE
              and   item.CIT_SOURCE = 'COMCAT_BDL' 
              and   prc.CIP_NET_PRICE is not null
              and   prc.CIT_PRICE_ITEM_KEY = item.CIT_PRICE_ITEM_KEY      
                  and   NVL(prc.CIP_PRICE_DESCRIPTOR, 0) = NVL(pd.CPD_PRICE_DESCRIPTOR, 0)
                  and   NVL(prc.CIP_ZONE_DESCRIPTOR, 0) = NVL(pd.CPD_ZONE_DESCRIPTOR, 0)                                                                        
              and   prod.PROD = opt.COP_LOCALIZE_PROD                               
                  and   sup.supplier_id = nvl(info.cat_supplier_id, '149761140')    
              order by opt.COP_LOCALIZE_PROD, prc.CIP_PRICE_DESCRIPTOR
               ]]>    
            </stmt>
            
            <stmt id="getOmihAllItems">
              <![CDATA[
                    SELECT/*+ ORDERED USE_NL(info , item, pd, prc, opt, bundle, prod, sup) */ 
              {catMasterItemKey}:=item.CIT_PARENT_ITEM_KEY,
              {catMasterKey}:=info.CAT_PARENT_CATALOG_ID, 
              {prodId}:=opt.COP_LOCALIZE_PROD,
              {shortDesc}:=BE_CONTENT_FALLBACK.get_short_desc(info.cat_catalog_id, opt.cop_localize_prod),
              {netPriceD}:=prc.CIP_NET_PRICE,
              {priceDescriptor}:=prc.CIP_PRICE_DESCRIPTOR,
              {longDesc}:=BE_CONTENT_FALLBACK.get_long_desc(info.cat_catalog_id, opt.cop_localize_prod),
              {bundleFlag}:=item.CIT_BUNDLE_FLAG,
              {FFsID}:=prc.cip_ffs_id,
              {supplierID}:=prod.supplier_id,
              {validationStatus}:=opt.COP_VALID_STATUS,
              {lastModifiedDateD}:=item.CIT_LAST_MODIFIED_DATE,
              {bundleName}:= bundle.BDL_CUST_BUNDLE_ID,
              {bundleFlag}:='B'           

              from CAT_INFO info,  cat_price_descriptor pd, CAT_ITEM item, 
               CAT_ITEM_OPTIONS opt, CAT_BUNDLE bundle, CAT_ITEM_PRICE prc,
               products prod, supplier_info sup
              WHERE info.CAT_CATALOG_ID = {?:catalogID}
              and   pd.CAT_CATALOG_ID = item.CAT_CATALOG_ID
              and   item.CAT_CATALOG_ID = info.CAT_CATALOG_ID           
              and   opt.CAT_ITEM_KEY   = item.CIT_ITEM_KEY            
              and   bundle.CIT_ITEM_KEY = item.CIT_PARENT_ITEM_KEY
              and   upper(bundle.BDL_STATE) = 'R' and bundle.BDL_END_DATE >= SYSDATE
              and   item.CIT_SOURCE = 'COMCAT_BDL' 
              and   prc.CIP_NET_PRICE is not null
              and   prc.CIT_PRICE_ITEM_KEY = item.CIT_PRICE_ITEM_KEY      
              and   NVL(prc.CIP_PRICE_DESCRIPTOR, 0) = NVL(pd.CPD_PRICE_DESCRIPTOR, 0)
              and   NVL(prc.CIP_ZONE_DESCRIPTOR, 0) = NVL(pd.CPD_ZONE_DESCRIPTOR, 0)
              and   prod.PROD = opt.COP_LOCALIZE_PROD                               
              and   sup.supplier_id = nvl(info.cat_supplier_id, '149761140')    
              order by opt.COP_LOCALIZE_PROD, prc.CIP_PRICE_DESCRIPTOR
               ]]>    
      </stmt>
      
      <stmt id="getOptionsForProd">
        <![CDATA[
            select {options}:= opt.COP_LOCALIZE_PROD
            from   cat_item_options opt, cat_item item
            where  item.CIT_SRC_PROD = {?:prodId} 
            and    opt.CAT_ITEM_KEY = item.CIT_ITEM_KEY
            and    opt.COP_LOCALIZE_PROD != item.CIT_SRC_PROD
         ]]>    
      </stmt>
      
      <stmt id="getCatalogProd">
        <![CDATA[
            select  {prodId}:=item.cop_localize_prod,
                 {nodeId}:=item.node_id,
                 item.isParent
                from  ( select opt.cop_localize_prod,
                         cprod.node_id, 0 isparent from cat_info info,  ctg_info cinfo, cat_item_options opt, ctg_prod cprod
                where  info.cat_catalog_id = {?:catalogID}
                and    cinfo.CTG_ID = info.CAT_BROWSE_CTG_ID
                and    opt.cat_catalog_id = info.cat_catalog_id
                and    cprod.prod = opt.cop_localize_prod
                and    cprod.ctg_id = DECODE(info.CAT_BROWSE_CTG_ID, '1000', '452', cinfo.PARENT_CTG_ID)
                   union
                   select opt.cop_localize_prod,
                         cprod.node_id, 1 isparent from cat_info info,  cat_item_options opt, ctg_prod cprod
                 where  info.cat_catalog_id = {?:catalogID}
                 and    opt.cat_catalog_id = info.cat_catalog_id
                 and    cprod.prod = opt.cop_localize_prod
                 and cprod.ctg_id =info.CAT_BROWSE_CTG_ID) item 
            order by item.isparent
            
            
         ]]>    
      </stmt>
      
      <stmt id="updateProdValidStatus">
        <![CDATA[
            call FE_PROD.updateValidStatus (
                        {i:catalogID},
                        {i:prodIdInList|CAT_SRC_VALIDPROD_TBL})      
         ]]>    
      </stmt>
      
		<stmt id="getContent">
        <![CDATA[
			SELECT {catalogID}:= cat_catalog_id,
			       {optLocalizeProd}:= cop_localize_prod,
			       {shortDesc}:= BE_CONTENT_FALLBACK.get_short_desc( cat_catalog_id, cop_localize_prod )
			FROM cat_item_options
			WHERE cat_catalog_id in ({@q:strArray1})
			AND cop_localize_prod in ({string2})
         ]]>    
		</stmt>

      <!-- fetching CTO product information from Corona -Keshav-->
      <stmt id="customCatalogSearchAP">
        <![CDATA[
        select * from (
			select a.*,rownum as ttt from (
                SELECT  {source}:= source,
						{id}:= cat_item_key,
						{contextID}:= context_id,
						{crossSellAvail}:= cross_sell_avail_flag,
						{showHideFlag}:= CIT_SHOW_HIDE_FLAG,
						{locOptFlag}:= LOC_OPT_FLAG,
						{deleteFlag}:= CIT_DELETE_FLAG,
						{prodId}:= prodId,                          
						{srcProd}:= CIT_SRC_PROD,
						{optBaseModel}:= COP_BASE_MODEL,
						{optLocalizeProd}:= COP_LOCALIZE_PROD,
						{cntryCode}:= COP_CNTRY_CODE,
						{validationStatus}:= COP_VALID_STATUS,
						{partType}:= part_type,
						{casualBuyFlag}:= contract_identifier,
						{netPriceD}:= net_price,
						{bundleFlag}:= CIT_BUNDLE_FLAG,
						{mfgPartID}:= mfg_part_id,                          
						{lastModifiedDateD}:= LAST_MODIFIED_DATE,
						{productLine}:= pl,
						{bdID}:= bd_number,
						{configID}:= config_id,
						{pgmName}:= pgm_name,    
						{txCurrencyCode}:= tx_currency_code,
						{cpmSvcProviderEmails}:= cpm_svc_provider_emails,
						{pgmSLA}:= sla,
						{bundleSla}:= basesla,
						{configFlag}:= CBD_TYPE_FLAG,
						{programKey}:= cit_pgm_key,
						{fusionStatus}:= cop_fusn_ord_status,
						{skipFusionValidation}:= cop_skip_fusn_ord,
						{lclpStatus}:= cop_lclp_ord_status,
						{skipLclpValidation}:= cop_skip_lclp_ord,
						{plcStatus}:= cop_plc_ord_status,
						{skipPlcValidation}:= cop_skip_plc_ord,
						{FFsID}:= fs_id,
						{priceSource}:= CIP_PRICE_SRC_TYPE,
						{replacedByString}:= CBD_REPLACED_BY,
						{replacementStatus}:= CONFIG_REPLACEMENT_STATUS ,
						{zeroPriceOptFlag}:= zero_price_option,
						{eolDateStr}:= END_OF_LIFE_DATE,
						{discontinueDateStr}:= DISCONTINUED_DATE,
						{gaDateStr}:= PRODUCT_RELEASE_DATE,
						{esDateStr}:= MARKETING_OBSOLETE_DATE,
						{replProdInfo}:= REPLACEMENT_PRODUCT,
						{priceStatus}:= cip_status,
						{consumeInventoryFlag}:= CI_FLAG,
						{bdlTemplateId}:= bdt_template_id,
						{baseProd}:= cbd_base_prod,
						{callCenterPrdFlag}:= cc_flag,
						{pgmOverwriteFlag}:= cit_pgm_overwrite_flag,
						{shortDesc}:=short_desc,
						{dataSheetName}:= datasheet_name
                 FROM(
                 SELECT /*+ ORDERED USE_NL(info, item, pd, prc, cbi, opt, prod, prog, pim) */ 
                        item.cit_source source,
						opt.cat_item_key cat_item_key,
						item.cit_context_id context_id,
						item.CIT_CS_AVAIL_FLAG cross_sell_avail_flag,
						item.CIT_SHOW_HIDE_FLAG CIT_SHOW_HIDE_FLAG,
						prod.LOC_OPT_FLAG LOC_OPT_FLAG,
						item.CIT_DELETE_FLAG CIT_DELETE_FLAG,
						item.CIT_BASE_MODEL prodId,                          
						item.CIT_SRC_PROD CIT_SRC_PROD,
						opt.COP_BASE_MODEL COP_BASE_MODEL,
						opt.COP_LOCALIZE_PROD COP_LOCALIZE_PROD,
						opt.COP_CNTRY_CODE COP_CNTRY_CODE,
						opt.COP_VALID_STATUS COP_VALID_STATUS,
						item.CIT_PART_TYPE part_type,
						nvl(item.CIT_CONTRACT_IDENTIFIER,'Contract') contract_identifier,
						prc.CIP_NET_PRICE net_price,
						NVL(item.CIT_BUNDLE_FLAG, 'S') CIT_BUNDLE_FLAG,
						prod.mfg_part_id mfg_part_id,                          
						item.CIT_LAST_MODIFIED_DATE LAST_MODIFIED_DATE,
						prod.pl pl,
						prc.CIP_PRICE_SRC_ID bd_number,
						item.CIT_CONFIG_ID config_id,
						prog.pgm_name pgm_name,    
						prc.cip_tx_curr_cd tx_currency_code,
						item.cit_cpm_svc_prov_emails cpm_svc_provider_emails,
						prc.CIP_SLA sla,
						DECODE (NVL (prc.cip_df_sla, 'N'), 'Y', prc.cip_sla, 'N', (SELECT ci2.cip_sla FROM cat_item_price ci2 WHERE ci2.cat_catalog_id = NVL (info.cat_parent_catalog_id, info.cat_catalog_id ) AND ci2.cit_src_prod = cbd_base_prod AND ROWNUM = 1) ) basesla,
						NVL(cbi.cbd_type_flag, 'C') cbd_type_flag,
						item.cit_pgm_key cit_pgm_key,
						opt.cop_fusn_ord_status cop_fusn_ord_status,
						opt.cop_skip_fusn_ord cop_skip_fusn_ord,
						opt.cop_lclp_ord_status cop_lclp_ord_status,
						opt.cop_skip_lclp_ord cop_skip_lclp_ord,
						opt.cop_plc_ord_status cop_plc_ord_status,
						opt.cop_skip_plc_ord cop_skip_plc_ord,
						NVL(prc.CIP_FFS_ID,(select ffs_id from cat_ffs where region_code = info.cat_region_code)) fs_id,
						DECODE(prc.CIP_PRICE_SRC_TYPE, 'PROMO','PROMO_TIER','PROMOFW','PROMO_TIERFW',CIP_PRICE_SRC_TYPE) CIP_PRICE_SRC_TYPE,
						DECODE ( cbi.cbd_replaced_by, NULL, NULL, cbi.cbd_replaced_by || ' on ' || cbi.cbd_replaced_date) CBD_REPLACED_BY,
						DECODE ( cbi.cbd_type_flag, 'Q', DECODE(cbi.cbd_replaced_by, NULL, DECODE (cbi.cbd_replacement_for, NULL, NULL, 'RT'), 'R'), NULL) CONFIG_REPLACEMENT_STATUS, 
						(select 'Y' from zero_price_option where base_prod = item.CIT_BASE_MODEL and rownum < 2) zero_price_option,
						TO_CHAR ( end_of_life_date, 'DD-Mon-YYYY' ) end_of_life_date,
						TO_CHAR ( discontinued_date, 'DD-Mon-YYYY' ) discontinued_date,
						TO_CHAR ( product_release_date, 'DD-Mon-YYYY' ) product_release_date,
						TO_CHAR ( marketing_obsolete_date, 'DD-Mon-YYYY' ) marketing_obsolete_date,
						pim.replacement_product replacement_product,
						prc.cip_status cip_status,
						item.CI_FLAG CI_FLAG,
						cbi.bdt_template_id bdt_template_id, cbi.cbd_base_prod cbd_base_prod,
						item.cc_flag cc_flag,
						nvl(item.cit_pgm_overwrite_flag,'N') cit_pgm_overwrite_flag,
						BE_CONTENT_FALLBACK.get_short_desc( info.cat_catalog_id, opt.cop_localize_prod ) short_desc,
				   		null datasheet_name
                  FROM    cat_info info, cat_item item, cat_item_options opt,
                          cat_price_descriptor pd, cat_item_price prc, products prod,
                          cat_program prog, cat_bundle_info cbi, plc_inheritance_merge pim
                  WHERE   {string1} and prod.prod = opt.COP_LOCALIZE_PROD
                  AND pim.country_code(+) = {?:cntryCode} AND pim.product_number(+) = opt.cop_localize_prod
                  AND ( item.cit_config_id is null OR 'N' = be_config_util.get_corona_read_flag('gui') )
				 UNION ALL
                 SELECT /*+ ORDERED USE_NL(info, item, pd, prc, cpi, cbi, opt, prod, prog, pim) */ 
                        item.cit_source source,
						opt.cat_item_key cat_item_key,
						item.cit_context_id context_id,
						item.CIT_CS_AVAIL_FLAG cross_sell_avail_flag,
						item.CIT_SHOW_HIDE_FLAG CIT_SHOW_HIDE_FLAG,
						prod.LOC_OPT_FLAG LOC_OPT_FLAG,
						item.CIT_DELETE_FLAG CIT_DELETE_FLAG,
						item.CIT_BASE_MODEL prodId,                          
						item.CIT_SRC_PROD CIT_SRC_PROD,
						opt.COP_BASE_MODEL COP_BASE_MODEL,
						opt.COP_LOCALIZE_PROD COP_LOCALIZE_PROD,
						opt.COP_CNTRY_CODE COP_CNTRY_CODE,
						NVL(cpi.overall_status, DECODE( NVL(opt.cop_valid_status, 'X'), 'P', 'P', 'N')) COP_VALID_STATUS, 
						item.CIT_PART_TYPE part_type,
						nvl(item.CIT_CONTRACT_IDENTIFIER,'Contract') contract_identifier,
						cpi.net_price net_price,
						NVL(item.CIT_BUNDLE_FLAG, 'S') CIT_BUNDLE_FLAG,
						prod.mfg_part_id mfg_part_id,                          
						item.CIT_LAST_MODIFIED_DATE LAST_MODIFIED_DATE,
						prod.pl pl,
						DECODE(cpi.price_source, 'LP', DECODE(NVL(cpi.deal_number,'X'), 'X', 'LOCAL_PRICE', cpi.deal_number), NVL(cpi.deal_number, prc.cip_price_src_id))  bd_number,
						item.CIT_CONFIG_ID config_id,
						prog.pgm_name pgm_name,    
						prc.cip_tx_curr_cd tx_currency_code,
						item.cit_cpm_svc_prov_emails cpm_svc_provider_emails,
						prc.CIP_SLA sla,
						DECODE (NVL (prc.cip_df_sla, 'N'), 'Y', prc.cip_sla, 'N', (SELECT ci2.cip_sla FROM cat_item_price ci2 WHERE ci2.cat_catalog_id = NVL (info.cat_parent_catalog_id, info.cat_catalog_id ) AND ci2.cit_src_prod = cbd_base_prod AND ROWNUM = 1) ) basesla,
						NVL(cbi.cbd_type_flag, 'C') cbd_type_flag,
						item.cit_pgm_key cit_pgm_key,
						opt.cop_fusn_ord_status cop_fusn_ord_status,
						opt.cop_skip_fusn_ord cop_skip_fusn_ord,
						opt.cop_lclp_ord_status cop_lclp_ord_status,
						opt.cop_skip_lclp_ord cop_skip_lclp_ord,
						opt.cop_plc_ord_status cop_plc_ord_status,
						opt.cop_skip_plc_ord cop_skip_plc_ord,
						decode(cpi.BOM_FRMT, 'VALUE', decode(NVL(prc.CIP_FFS_ID,(select ffs_id from cat_ffs where region_code = info.cat_region_code)), 'AP_DIRECT', 'EG_DIRECT', 'EU_DIRECT', 'EG_DIRECT', 'US_DIRECT', 'EG_DIRECT', 'CA_DIRECT', 'EG_DIRECT', 'LA_DIRECT', 'EG_DIRECT', 'GL_DIRECT', 'EG_DIRECT', NVL(prc.CIP_FFS_ID,(select ffs_id from cat_ffs where region_code = info.cat_region_code))), NVL(prc.CIP_FFS_ID,(select ffs_id from cat_ffs where region_code = info.cat_region_code))) fs_id,
						DECODE ( NVL(cpi.PRICE_SRC_TYPE, prc.CIP_PRICE_SRC_TYPE),
					             'PROMO', 'PROMO_TIER',
					             'PROMOFW', 'PROMO_TIERFW',
					             NVL(cpi.PRICE_SRC_TYPE, prc.CIP_PRICE_SRC_TYPE)
					            ) CIP_PRICE_SRC_TYPE,
						DECODE ( cbi.cbd_replaced_by, NULL, NULL, cbi.cbd_replaced_by || ' on ' || cbi.cbd_replaced_date) cbd_replaced_by,
						DECODE ( cbi.cbd_type_flag, 'Q', DECODE(cbi.cbd_replaced_by, NULL, DECODE (cbi.cbd_replacement_for, NULL, NULL, 'RT'), 'R'), NULL) config_replacement_status, 
						(select 'Y' from zero_price_option where base_prod = item.CIT_BASE_MODEL and rownum < 2) zero_price_option,
						TO_CHAR ( end_of_life_date, 'DD-Mon-YYYY' ) end_of_life_date,
						TO_CHAR ( discontinued_date, 'DD-Mon-YYYY' ) discontinued_date,
						TO_CHAR ( product_release_date, 'DD-Mon-YYYY' ) product_release_date,
						TO_CHAR ( marketing_obsolete_date, 'DD-Mon-YYYY' ) marketing_obsolete_date,
						pim.replacement_product replacement_product,
						prc.cip_status cip_status,
						item.CI_FLAG CI_FLAG,
						cbi.bdt_template_id bdt_template_id, cbi.cbd_base_prod cbd_base_prod,
						item.cc_flag cc_flag,
						nvl(item.cit_pgm_overwrite_flag,'N') cit_pgm_overwrite_flag,
						BE_CONTENT_FALLBACK.get_short_desc( info.cat_catalog_id, opt.cop_localize_prod ) short_desc,
				   		null datasheet_name
                  FROM    cat_info info, cat_item item, cat_item_options opt,
                          cat_price_descriptor pd, cat_item_price prc, products prod,
                          cat_program prog, config_permutation_info cpi, cat_bundle_info cbi, plc_inheritance_merge pim
                  WHERE   'Y'= be_config_util.get_corona_read_flag('gui')
                  		  and ({string1}
                  		  and prod.prod = opt.COP_LOCALIZE_PROD
                          AND pim.country_code(+) = {?:cntryCode} AND pim.product_number(+) = opt.cop_localize_prod
						  and item.cit_config_id is not null
						  and UPPER(cpi.price_id(+)) =  {?:priceMergeId} 
						  and cpi.ship_to_country = {?:cntryCode}
						  and prc.cit_src_prod = cpi.config_prod_id(+)
						  and prc.cip_price_descriptor = cpi.price_descriptor(+) )
					)
				) a 
		) b
		where {sortByAndSortOrder}
                ]]>     
      </stmt>

	<stmt id="customCatalogSearchAPNoPgn">
        <![CDATA[
         select * from (
			select a.*,rownum as ttt from (
                SELECT  {source}:= source,
						{id}:= cat_item_key,
						{contextID}:= context_id,
						{crossSellAvail}:= cross_sell_avail_flag,
						{showHideFlag}:= CIT_SHOW_HIDE_FLAG,
						{locOptFlag}:= LOC_OPT_FLAG,
						{deleteFlag}:= CIT_DELETE_FLAG,
						{prodId}:= prodId,                          
						{srcProd}:= CIT_SRC_PROD,
						{optBaseModel}:= COP_BASE_MODEL,
						{optLocalizeProd}:= COP_LOCALIZE_PROD,
						{cntryCode}:= COP_CNTRY_CODE,
						{validationStatus}:= COP_VALID_STATUS,
						{partType}:= part_type,
						{casualBuyFlag}:= contract_identifier,
						{netPriceD}:= net_price,
						{bundleFlag}:= CIT_BUNDLE_FLAG,
						{mfgPartID}:= mfg_part_id,                          
						{lastModifiedDateD}:= LAST_MODIFIED_DATE,
						{productLine}:= pl,
						{bdID}:= bd_number,
						{configID}:= config_id,
						{pgmName}:= pgm_name,    
						{txCurrencyCode}:= tx_currency_code,
						{cpmSvcProviderEmails}:= cpm_svc_provider_emails,
						{pgmSLA}:= sla,
						{bundleSla}:= basesla,
						{configFlag}:= CBD_TYPE_FLAG,
						{programKey}:= cit_pgm_key,
						{fusionStatus}:= cop_fusn_ord_status,
						{skipFusionValidation}:= cop_skip_fusn_ord,
						{lclpStatus}:= cop_lclp_ord_status,
						{skipLclpValidation}:= cop_skip_lclp_ord,
						{plcStatus}:= cop_plc_ord_status,
						{skipPlcValidation}:= cop_skip_plc_ord,
						{FFsID}:= fs_id,
						{priceSource}:= CIP_PRICE_SRC_TYPE,
						{replacedByString}:= CBD_REPLACED_BY,
						{replacementStatus}:= CONFIG_REPLACEMENT_STATUS ,
						{zeroPriceOptFlag}:= zero_price_option,
						{eolDateStr}:= END_OF_LIFE_DATE,
						{discontinueDateStr}:= DISCONTINUED_DATE,
						{gaDateStr}:= PRODUCT_RELEASE_DATE,
						{esDateStr}:= MARKETING_OBSOLETE_DATE,
						{replProdInfo}:= REPLACEMENT_PRODUCT,
						{priceStatus}:= cip_status,
						{consumeInventoryFlag}:= CI_FLAG,
						{bdlTemplateId}:= bdt_template_id,
						{baseProd}:= cbd_base_prod,
						{callCenterPrdFlag}:= cc_flag,
						{pgmOverwriteFlag}:= cit_pgm_overwrite_flag,
						{shortDesc}:=short_desc,
						{dataSheetName}:= datasheet_name
                 FROM(
                 SELECT /*+ ORDERED USE_NL(info, item, pd, prc, cbi, opt, prod, prog, pim) */ 
                        item.cit_source source,
						opt.cat_item_key cat_item_key,
						item.cit_context_id context_id,
						item.CIT_CS_AVAIL_FLAG cross_sell_avail_flag,
						item.CIT_SHOW_HIDE_FLAG CIT_SHOW_HIDE_FLAG,
						prod.LOC_OPT_FLAG LOC_OPT_FLAG,
						item.CIT_DELETE_FLAG CIT_DELETE_FLAG,
						item.CIT_BASE_MODEL prodId,                          
						item.CIT_SRC_PROD CIT_SRC_PROD,
						opt.COP_BASE_MODEL COP_BASE_MODEL,
						opt.COP_LOCALIZE_PROD COP_LOCALIZE_PROD,
						opt.COP_CNTRY_CODE COP_CNTRY_CODE,
						opt.COP_VALID_STATUS COP_VALID_STATUS,
						item.CIT_PART_TYPE part_type,
						nvl(item.CIT_CONTRACT_IDENTIFIER,'Contract') contract_identifier,
						prc.CIP_NET_PRICE net_price,
						NVL(item.CIT_BUNDLE_FLAG, 'S') CIT_BUNDLE_FLAG,
						prod.mfg_part_id mfg_part_id,                          
						item.CIT_LAST_MODIFIED_DATE LAST_MODIFIED_DATE,
						prod.pl pl,
						prc.CIP_PRICE_SRC_ID bd_number,
						item.CIT_CONFIG_ID config_id,
						prog.pgm_name pgm_name,    
						prc.cip_tx_curr_cd tx_currency_code,
						item.cit_cpm_svc_prov_emails cpm_svc_provider_emails,
						prc.CIP_SLA sla,
						DECODE (NVL (prc.cip_df_sla, 'N'), 'Y', prc.cip_sla, 'N', (SELECT ci2.cip_sla FROM cat_item_price ci2 WHERE ci2.cat_catalog_id = NVL (info.cat_parent_catalog_id, info.cat_catalog_id ) AND ci2.cit_src_prod = cbd_base_prod AND ROWNUM = 1) ) basesla,
						NVL(cbi.cbd_type_flag, 'C') cbd_type_flag,
						item.cit_pgm_key cit_pgm_key,
						opt.cop_fusn_ord_status cop_fusn_ord_status,
						opt.cop_skip_fusn_ord cop_skip_fusn_ord,
						opt.cop_lclp_ord_status cop_lclp_ord_status,
						opt.cop_skip_lclp_ord cop_skip_lclp_ord,
						opt.cop_plc_ord_status cop_plc_ord_status,
						opt.cop_skip_plc_ord cop_skip_plc_ord,
						NVL(prc.CIP_FFS_ID,(select ffs_id from cat_ffs where region_code = info.cat_region_code)) fs_id,
						DECODE(prc.CIP_PRICE_SRC_TYPE, 'PROMO','PROMO_TIER','PROMOFW','PROMO_TIERFW',CIP_PRICE_SRC_TYPE) CIP_PRICE_SRC_TYPE,
						DECODE ( cbi.cbd_replaced_by, NULL, NULL, cbi.cbd_replaced_by || ' on ' || cbi.cbd_replaced_date) CBD_REPLACED_BY,
						DECODE ( cbi.cbd_type_flag, 'Q', DECODE(cbi.cbd_replaced_by, NULL, DECODE (cbi.cbd_replacement_for, NULL, NULL, 'RT'), 'R'), NULL) CONFIG_REPLACEMENT_STATUS, 
						(select 'Y' from zero_price_option where base_prod = item.CIT_BASE_MODEL and rownum < 2) zero_price_option,
						TO_CHAR ( end_of_life_date, 'DD-Mon-YYYY' ) end_of_life_date,
						TO_CHAR ( discontinued_date, 'DD-Mon-YYYY' ) discontinued_date,
						TO_CHAR ( product_release_date, 'DD-Mon-YYYY' ) product_release_date,
						TO_CHAR ( marketing_obsolete_date, 'DD-Mon-YYYY' ) marketing_obsolete_date,
						pim.replacement_product replacement_product,
						prc.cip_status cip_status,
						item.CI_FLAG CI_FLAG,
						cbi.bdt_template_id bdt_template_id, cbi.cbd_base_prod cbd_base_prod,
						item.cc_flag cc_flag,
						nvl(item.cit_pgm_overwrite_flag,'N') cit_pgm_overwrite_flag,
						BE_CONTENT_FALLBACK.get_short_desc( info.cat_catalog_id, opt.cop_localize_prod ) short_desc,
				   		null datasheet_name
                  FROM    cat_info info, cat_item item, cat_item_options opt,
                          cat_price_descriptor pd, cat_item_price prc, products prod,
                          cat_program prog, cat_bundle_info cbi, plc_inheritance_merge pim
                  WHERE   {string1} and prod.prod = opt.COP_LOCALIZE_PROD
                  AND pim.country_code(+) = {?:cntryCode} AND pim.product_number(+) = opt.cop_localize_prod
                  AND ( item.cit_config_id is null OR 'N' = be_config_util.get_corona_read_flag('gui') )
				 UNION ALL
                 SELECT /*+ ORDERED USE_NL(info, item, pd, prc, cpi, cbi, opt, prod, prog, pim) */ 
                        item.cit_source source,
						opt.cat_item_key cat_item_key,
						item.cit_context_id context_id,
						item.CIT_CS_AVAIL_FLAG cross_sell_avail_flag,
						item.CIT_SHOW_HIDE_FLAG CIT_SHOW_HIDE_FLAG,
						prod.LOC_OPT_FLAG LOC_OPT_FLAG,
						item.CIT_DELETE_FLAG CIT_DELETE_FLAG,
						item.CIT_BASE_MODEL prodId,                          
						item.CIT_SRC_PROD CIT_SRC_PROD,
						opt.COP_BASE_MODEL COP_BASE_MODEL,
						opt.COP_LOCALIZE_PROD COP_LOCALIZE_PROD,
						opt.COP_CNTRY_CODE COP_CNTRY_CODE,
						NVL(cpi.overall_status, DECODE( NVL(opt.cop_valid_status, 'X'), 'P', 'P', 'N')) COP_VALID_STATUS, 
						item.CIT_PART_TYPE part_type,
						nvl(item.CIT_CONTRACT_IDENTIFIER,'Contract') contract_identifier,
						cpi.net_price net_price,
						NVL(item.CIT_BUNDLE_FLAG, 'S') CIT_BUNDLE_FLAG,
						prod.mfg_part_id mfg_part_id,                          
						item.CIT_LAST_MODIFIED_DATE LAST_MODIFIED_DATE,
						prod.pl pl,
						DECODE(cpi.price_source, 'LP', DECODE(NVL(cpi.deal_number,'X'), 'X', 'LOCAL_PRICE', cpi.deal_number), NVL(cpi.deal_number, prc.cip_price_src_id))  bd_number,
						item.CIT_CONFIG_ID config_id,
						prog.pgm_name pgm_name,    
						prc.cip_tx_curr_cd tx_currency_code,
						item.cit_cpm_svc_prov_emails cpm_svc_provider_emails,
						prc.CIP_SLA sla,
						DECODE (NVL (prc.cip_df_sla, 'N'), 'Y', prc.cip_sla, 'N', (SELECT ci2.cip_sla FROM cat_item_price ci2 WHERE ci2.cat_catalog_id = NVL (info.cat_parent_catalog_id, info.cat_catalog_id ) AND ci2.cit_src_prod = cbd_base_prod AND ROWNUM = 1) ) basesla,
						NVL(cbi.cbd_type_flag, 'C') cbd_type_flag,
						item.cit_pgm_key cit_pgm_key,
						opt.cop_fusn_ord_status cop_fusn_ord_status,
						opt.cop_skip_fusn_ord cop_skip_fusn_ord,
						opt.cop_lclp_ord_status cop_lclp_ord_status,
						opt.cop_skip_lclp_ord cop_skip_lclp_ord,
						opt.cop_plc_ord_status cop_plc_ord_status,
						opt.cop_skip_plc_ord cop_skip_plc_ord,
						decode(cpi.BOM_FRMT, 'VALUE', decode(NVL(prc.CIP_FFS_ID,(select ffs_id from cat_ffs where region_code = info.cat_region_code)), 'AP_DIRECT', 'EG_DIRECT', 'EU_DIRECT', 'EG_DIRECT', 'US_DIRECT', 'EG_DIRECT', 'CA_DIRECT', 'EG_DIRECT', 'LA_DIRECT', 'EG_DIRECT', 'GL_DIRECT', 'EG_DIRECT', NVL(prc.CIP_FFS_ID,(select ffs_id from cat_ffs where region_code = info.cat_region_code))), NVL(prc.CIP_FFS_ID,(select ffs_id from cat_ffs where region_code = info.cat_region_code))) fs_id,
						DECODE ( NVL(cpi.PRICE_SRC_TYPE, prc.CIP_PRICE_SRC_TYPE),
					             'PROMO', 'PROMO_TIER',
					             'PROMOFW', 'PROMO_TIERFW',
					             NVL(cpi.PRICE_SRC_TYPE, prc.CIP_PRICE_SRC_TYPE)
					            ) CIP_PRICE_SRC_TYPE,
						DECODE ( cbi.cbd_replaced_by, NULL, NULL, cbi.cbd_replaced_by || ' on ' || cbi.cbd_replaced_date) cbd_replaced_by,
						DECODE ( cbi.cbd_type_flag, 'Q', DECODE(cbi.cbd_replaced_by, NULL, DECODE (cbi.cbd_replacement_for, NULL, NULL, 'RT'), 'R'), NULL) config_replacement_status, 
						(select 'Y' from zero_price_option where base_prod = item.CIT_BASE_MODEL and rownum < 2) zero_price_option,
						TO_CHAR ( end_of_life_date, 'DD-Mon-YYYY' ) end_of_life_date,
						TO_CHAR ( discontinued_date, 'DD-Mon-YYYY' ) discontinued_date,
						TO_CHAR ( product_release_date, 'DD-Mon-YYYY' ) product_release_date,
						TO_CHAR ( marketing_obsolete_date, 'DD-Mon-YYYY' ) marketing_obsolete_date,
						pim.replacement_product replacement_product,
						prc.cip_status cip_status,
						item.CI_FLAG CI_FLAG,
						cbi.bdt_template_id bdt_template_id, cbi.cbd_base_prod cbd_base_prod,
						item.cc_flag cc_flag,
						nvl(item.cit_pgm_overwrite_flag,'N') cit_pgm_overwrite_flag,
						BE_CONTENT_FALLBACK.get_short_desc( info.cat_catalog_id, opt.cop_localize_prod ) short_desc,
				   		null datasheet_name
                  FROM    cat_info info, cat_item item, cat_item_options opt,
                          cat_price_descriptor pd, cat_item_price prc, products prod,
                          cat_program prog, config_permutation_info cpi, cat_bundle_info cbi, plc_inheritance_merge pim
                  WHERE   'Y'= be_config_util.get_corona_read_flag('gui')
                  		  and ({string1}
                  		  and prod.prod = opt.COP_LOCALIZE_PROD
                          AND pim.country_code(+) = {?:cntryCode} AND pim.product_number(+) = opt.cop_localize_prod
						  and item.cit_config_id is not null
						  and UPPER(cpi.price_id(+)) =  {?:priceMergeId} 
						  and cpi.ship_to_country = {?:cntryCode}
						  and prc.cit_src_prod = cpi.config_prod_id(+)
						  and prc.cip_price_descriptor = cpi.price_descriptor(+) )
					)
					) a 
		) b
		where {sortByAndSortOrder}	
                ]]>     
      </stmt>
      
   <stmt id="customCatalogSearch">
        <![CDATA[
        select * from (
			select a.*,rownum as ttt from (
                 SELECT {source}:= source,
						{id}:= cat_item_key,
						{contextID}:= context_id,
						{crossSellAvail}:= cross_sell_avail_flag,
						{showHideFlag}:= CIT_SHOW_HIDE_FLAG,
						{locOptFlag}:= LOC_OPT_FLAG,
						{deleteFlag}:= CIT_DELETE_FLAG,
						{prodId}:=  prodId,                          
						{srcProd}:= CIT_SRC_PROD,
						{optBaseModel}:= COP_BASE_MODEL,
						{optLocalizeProd}:= COP_LOCALIZE_PROD,
						{cntryCode}:= COP_CNTRY_CODE,
						{validationStatus}:= COP_VALID_STATUS,
						{partType}:= part_type,
						{casualBuyFlag}:= contract_identifier,
						{netPriceD}:= net_price,
						{bundleFlag}:=  CIT_BUNDLE_FLAG,
						{mfgPartID}:=  mfg_part_id,                          
						{lastModifiedDateD}:= LAST_MODIFIED_DATE,
						{productLine}:= pl,
						{bdID}:= bd_number,
						{configID}:= config_id,
						{pgmName}:= pgm_name,
						{fusionStatus}:= cop_fusn_ord_status,
						{skipFusionValidation}:= cop_skip_fusn_ord,
						{lclpStatus}:= cop_lclp_ord_status,
						{skipLclpValidation}:= cop_skip_lclp_ord,
						{plcStatus}:= cop_plc_ord_status,
						{skipPlcValidation}:= cop_skip_plc_ord,
						{txCurrencyCode}:= tx_currency_code,
						{cpmSvcProviderEmails}:= cpm_svc_provider_emails,
						{pgmSLA}:= sla,
						{priceStatus}:= cip_status,
						{bundleSla}:= basesla,
						{configFlag}:= CBD_TYPE_FLAG,
						{programKey}:= cit_pgm_key,
						{FFsID}:= fs_id,
						{priceSource}:= CIP_PRICE_SRC_TYPE,
						{replacedByString}:=CBD_REPLACED_BY,
						{replacementStatus}:= CONFIG_REPLACEMENT_STATUS ,
						{zeroPriceOptFlag}:= zero_price_option,
						{eolDateStr}:= END_OF_LIFE_DATE,
						{discontinueDateStr}:= DISCONTINUED_DATE,
						{gaDateStr}:= PRODUCT_RELEASE_DATE,
						{esDateStr}:= MARKETING_OBSOLETE_DATE,
						{replProdInfo}:= REPLACEMENT_PRODUCT,
						{bdlTemplateId}:= bdt_template_id,
						{baseProd}:=cbd_base_prod,
						{pgmOverwriteFlag}:= cit_pgm_overwrite_flag,
						{shortDesc}:=short_desc,
						{dataSheetName}:= datasheet_name
                  FROM(
                  SELECT /*+ ORDERED USE_NL(info, item, pd, prc, cbi, opt, prod, prog, pim) */
                        item.cit_source source,
                        opt.cat_item_key cat_item_key,
                        item.cit_context_id context_id,
                        item.CIT_CS_AVAIL_FLAG cross_sell_avail_flag,
                        item.CIT_SHOW_HIDE_FLAG CIT_SHOW_HIDE_FLAG,
                        prod.LOC_OPT_FLAG LOC_OPT_FLAG,
                        item.CIT_DELETE_FLAG CIT_DELETE_FLAG,
                        item.CIT_BASE_MODEL prodId,                          
                        item.CIT_SRC_PROD CIT_SRC_PROD,
                        opt.COP_BASE_MODEL COP_BASE_MODEL,
                        opt.COP_LOCALIZE_PROD COP_LOCALIZE_PROD,
                        opt.COP_CNTRY_CODE COP_CNTRY_CODE,
                        opt.COP_VALID_STATUS COP_VALID_STATUS,
                        item.CIT_PART_TYPE part_type,
                        nvl(item.CIT_CONTRACT_IDENTIFIER,'Contract') contract_identifier,
                        prc.CIP_NET_PRICE net_price,
                        NVL(item.CIT_BUNDLE_FLAG, 'S') CIT_BUNDLE_FLAG,
                        prod.mfg_part_id mfg_part_id,                          
                        item.CIT_LAST_MODIFIED_DATE LAST_MODIFIED_DATE,
                        prod.pl pl,
                        prc.CIP_PRICE_SRC_ID bd_number,
                        item.CIT_CONFIG_ID config_id,
                        prog.pgm_name pgm_name,
                        opt.cop_fusn_ord_status cop_fusn_ord_status,
                        opt.cop_skip_fusn_ord cop_skip_fusn_ord,
 					    opt.cop_lclp_ord_status cop_lclp_ord_status,
					  	opt.cop_skip_lclp_ord cop_skip_lclp_ord,
					  	opt.cop_plc_ord_status cop_plc_ord_status,
					  	opt.cop_skip_plc_ord cop_skip_plc_ord,
                        prc.cip_tx_curr_cd tx_currency_code,
                        item.cit_cpm_svc_prov_emails cpm_svc_provider_emails,
                        prc.CIP_SLA sla,
				  		prc.cip_status cip_status,
						DECODE (NVL (prc.cip_df_sla, 'N'), 'Y', prc.cip_sla, 'N', (SELECT ci2.cip_sla FROM cat_item_price ci2 WHERE ci2.cat_catalog_id = NVL (info.cat_parent_catalog_id, info.cat_catalog_id ) AND ci2.cit_src_prod = cbd_base_prod AND ROWNUM = 1) ) basesla,
						NVL(cbi.cbd_type_flag, 'C') cbd_type_flag,
                        item.cit_pgm_key cit_pgm_key,
                        NVL(prc.CIP_FFS_ID,(select ffs_id from cat_ffs where region_code = info.cat_region_code)) fs_id,
                        DECODE(prc.CIP_PRICE_SRC_TYPE, 'PROMO','PROMO_TIER','PROMOFW','PROMO_TIERFW',CIP_PRICE_SRC_TYPE) CIP_PRICE_SRC_TYPE,
						DECODE ( cbi.cbd_replaced_by, NULL, NULL, cbi.cbd_replaced_by || ' on ' || cbi.cbd_replaced_date) CBD_REPLACED_BY,
						DECODE ( cbi.cbd_type_flag, 'Q', DECODE(cbi.cbd_replaced_by, NULL, DECODE (cbi.cbd_replacement_for, NULL, NULL, 'RT'), 'R'), NULL) CONFIG_REPLACEMENT_STATUS, 
                        (select 'Y' from zero_price_option where base_prod = item.CIT_BASE_MODEL and rownum < 2) zero_price_option,
						TO_CHAR ( end_of_life_date, 'DD-Mon-YYYY' ) end_of_life_date,
						TO_CHAR ( discontinued_date, 'DD-Mon-YYYY' ) discontinued_date,
						TO_CHAR ( product_release_date, 'DD-Mon-YYYY' ) product_release_date,
						TO_CHAR ( marketing_obsolete_date, 'DD-Mon-YYYY' ) marketing_obsolete_date,
						pim.replacement_product replacement_product,
						cbi.bdt_template_id bdt_template_id, cbi.cbd_base_prod cbd_base_prod,
                	 	nvl(item.cit_pgm_overwrite_flag,'N') cit_pgm_overwrite_flag,
						BE_CONTENT_FALLBACK.get_short_desc( info.cat_catalog_id, opt.cop_localize_prod ) short_desc,
				   		null datasheet_name
                FROM    cat_info info, cat_item item, cat_item_options opt,
                        cat_price_descriptor pd, cat_item_price prc, products prod,
                        cat_program prog, cat_bundle_info cbi, plc_inheritance_merge pim
                WHERE   {string1} and prod.prod = opt.COP_LOCALIZE_PROD
                AND pim.country_code(+) = {?:cntryCode} AND pim.product_number(+) = opt.cop_localize_prod
                AND (item.cit_config_id is null OR 'N' = be_config_util.get_corona_read_flag('gui') )
				  UNION ALL
				  SELECT /*+ ORDERED USE_NL(info, item, pd, prc, cpi, cbi, opt, prod, prog, pim) */
                        item.cit_source source,
                        opt.cat_item_key cat_item_key,
                        item.cit_context_id context_id,
                        item.CIT_CS_AVAIL_FLAG cross_sell_avail_flag,
                        item.CIT_SHOW_HIDE_FLAG CIT_SHOW_HIDE_FLAG,
                        prod.LOC_OPT_FLAG LOC_OPT_FLAG,
                        item.CIT_DELETE_FLAG CIT_DELETE_FLAG,
                        item.CIT_BASE_MODEL prodId,                          
                        item.CIT_SRC_PROD CIT_SRC_PROD,
                        opt.COP_BASE_MODEL COP_BASE_MODEL,
                        opt.COP_LOCALIZE_PROD COP_LOCALIZE_PROD,
                        opt.COP_CNTRY_CODE COP_CNTRY_CODE,
						NVL(cpi.overall_status, DECODE( NVL(opt.cop_valid_status, 'X'), 'P', 'P', 'N')) COP_VALID_STATUS, 
                        item.CIT_PART_TYPE part_type,
                        nvl(item.CIT_CONTRACT_IDENTIFIER,'Contract') contract_identifier,
                        cpi.net_price net_price,
                        NVL(item.CIT_BUNDLE_FLAG, 'S') CIT_BUNDLE_FLAG,
                        prod.mfg_part_id mfg_part_id,                          
                        item.CIT_LAST_MODIFIED_DATE LAST_MODIFIED_DATE,
                        prod.pl pl,
                        DECODE(cpi.price_source, 'LP', DECODE(NVL(cpi.deal_number,'X'), 'X', 'LOCAL_PRICE', cpi.deal_number), NVL(cpi.deal_number, prc.cip_price_src_id))  bd_number,
                        item.CIT_CONFIG_ID config_id,
                        prog.pgm_name pgm_name,
                        opt.cop_fusn_ord_status cop_fusn_ord_status,
                        opt.cop_skip_fusn_ord cop_skip_fusn_ord,
 					    opt.cop_lclp_ord_status cop_lclp_ord_status,
					  	opt.cop_skip_lclp_ord cop_skip_lclp_ord,
					  	opt.cop_plc_ord_status cop_plc_ord_status,
					  	opt.cop_skip_plc_ord cop_skip_plc_ord,
                        prc.cip_tx_curr_cd tx_currency_code,
                        item.cit_cpm_svc_prov_emails cpm_svc_provider_emails,
                        prc.CIP_SLA sla,
				  		prc.cip_status cip_status,
						DECODE (NVL (prc.cip_df_sla, 'N'), 'Y', prc.cip_sla, 'N', (SELECT ci2.cip_sla FROM cat_item_price ci2 WHERE ci2.cat_catalog_id = NVL (info.cat_parent_catalog_id, info.cat_catalog_id ) AND ci2.cit_src_prod = cbd_base_prod AND ROWNUM = 1) ) basesla,
						NVL(cbi.cbd_type_flag, 'C') cbd_type_flag,
                        item.cit_pgm_key cit_pgm_key,
                        decode(cpi.BOM_FRMT, 'VALUE', decode(NVL(prc.CIP_FFS_ID,(select ffs_id from cat_ffs where region_code = info.cat_region_code)), 'AP_DIRECT', 'EG_DIRECT', 'EU_DIRECT', 'EG_DIRECT', 'US_DIRECT', 'EG_DIRECT', 'CA_DIRECT', 'EG_DIRECT', 'LA_DIRECT', 'EG_DIRECT', 'GL_DIRECT', 'EG_DIRECT', NVL(prc.CIP_FFS_ID,(select ffs_id from cat_ffs where region_code = info.cat_region_code))), NVL(prc.CIP_FFS_ID,(select ffs_id from cat_ffs where region_code = info.cat_region_code))) fs_id,
                        DECODE ( NVL(cpi.PRICE_SRC_TYPE, prc.CIP_PRICE_SRC_TYPE),
					             'PROMO', 'PROMO_TIER',
					             'PROMOFW', 'PROMO_TIERFW',
					             NVL(cpi.PRICE_SRC_TYPE, prc.CIP_PRICE_SRC_TYPE)
					            ) CIP_PRICE_SRC_TYPE,
						DECODE ( cbi.cbd_replaced_by, NULL, NULL, cbi.cbd_replaced_by || ' on ' || cbi.cbd_replaced_date) CBD_REPLACED_BY,
						DECODE ( cbi.cbd_type_flag, 'Q', DECODE(cbi.cbd_replaced_by, NULL, DECODE (cbi.cbd_replacement_for, NULL, NULL, 'RT'), 'R'), NULL) CONFIG_REPLACEMENT_STATUS, 
                        (select 'Y' from zero_price_option where base_prod = item.CIT_BASE_MODEL and rownum < 2) zero_price_option,
						TO_CHAR ( end_of_life_date, 'DD-Mon-YYYY' ) end_of_life_date,
						TO_CHAR ( discontinued_date, 'DD-Mon-YYYY' ) discontinued_date,
						TO_CHAR ( product_release_date, 'DD-Mon-YYYY' ) product_release_date,
						TO_CHAR ( marketing_obsolete_date, 'DD-Mon-YYYY' ) marketing_obsolete_date,
						pim.replacement_product replacement_product,
						cbi.bdt_template_id bdt_template_id, cbi.cbd_base_prod cbd_base_prod,
                	 	nvl(item.cit_pgm_overwrite_flag,'N') cit_pgm_overwrite_flag,
						BE_CONTENT_FALLBACK.get_short_desc( info.cat_catalog_id, opt.cop_localize_prod ) short_desc,
				   		null datasheet_name
                FROM  cat_info info, cat_item item, cat_item_options opt,
                        cat_price_descriptor pd, cat_item_price prc, products prod,
                        cat_program prog, config_permutation_info cpi, cat_bundle_info cbi, plc_inheritance_merge pim
                WHERE   'Y' = be_config_util.get_corona_read_flag('gui')
                		 and ( {string1} 
                		 and prod.prod = opt.COP_LOCALIZE_PROD
                		 AND pim.country_code(+) = {?:cntryCode} AND pim.product_number(+) = opt.cop_localize_prod
				         and item.cit_config_id is not null
				         and UPPER(cpi.price_id(+)) = {?:priceMergeId}
				         and cpi.ship_to_country = {?:cntryCode} 
						 and prc.cit_src_prod = cpi.config_prod_id(+)
						 and prc.cip_price_descriptor = cpi.price_descriptor(+)  )
					)
				) a 
		) b
		where {sortByAndSortOrder}
                ]]>     
      </stmt>
      <stmt id="customCatalogSearchNoPgn">
        <![CDATA[
         select * from (
			select a.*,rownum as ttt from (
                 SELECT {source}:= source,
						{id}:= cat_item_key,
						{contextID}:= context_id,
						{crossSellAvail}:= cross_sell_avail_flag,
						{showHideFlag}:= CIT_SHOW_HIDE_FLAG,
						{locOptFlag}:= LOC_OPT_FLAG,
						{deleteFlag}:= CIT_DELETE_FLAG,
						{prodId}:=  prodId,                          
						{srcProd}:= CIT_SRC_PROD,
						{optBaseModel}:= COP_BASE_MODEL,
						{optLocalizeProd}:= COP_LOCALIZE_PROD,
						{cntryCode}:= COP_CNTRY_CODE,
						{validationStatus}:= COP_VALID_STATUS,
						{partType}:= part_type,
						{casualBuyFlag}:= contract_identifier,
						{netPriceD}:= net_price,
						{bundleFlag}:=  CIT_BUNDLE_FLAG,
						{mfgPartID}:=  mfg_part_id,                          
						{lastModifiedDateD}:= LAST_MODIFIED_DATE,
						{productLine}:= pl,
						{bdID}:= bd_number,
						{configID}:= config_id,
						{pgmName}:= pgm_name,
						{fusionStatus}:= cop_fusn_ord_status,
						{skipFusionValidation}:= cop_skip_fusn_ord,
						{lclpStatus}:= cop_lclp_ord_status,
						{skipLclpValidation}:= cop_skip_lclp_ord,
						{plcStatus}:= cop_plc_ord_status,
						{skipPlcValidation}:= cop_skip_plc_ord,
						{txCurrencyCode}:= tx_currency_code,
						{cpmSvcProviderEmails}:= cpm_svc_provider_emails,
						{pgmSLA}:= sla,
						{priceStatus}:= cip_status,
						{bundleSla}:= basesla,
						{configFlag}:= CBD_TYPE_FLAG,
						{programKey}:= cit_pgm_key,
						{FFsID}:= fs_id,
						{priceSource}:= CIP_PRICE_SRC_TYPE,
						{replacedByString}:=CBD_REPLACED_BY,
						{replacementStatus}:= CONFIG_REPLACEMENT_STATUS ,
						{zeroPriceOptFlag}:= zero_price_option,
						{eolDateStr}:= END_OF_LIFE_DATE,
						{discontinueDateStr}:= DISCONTINUED_DATE,
						{gaDateStr}:= PRODUCT_RELEASE_DATE,
						{esDateStr}:= MARKETING_OBSOLETE_DATE,
						{replProdInfo}:= REPLACEMENT_PRODUCT,
						{bdlTemplateId}:= bdt_template_id,
						{baseProd}:=cbd_base_prod,
						{pgmOverwriteFlag}:= cit_pgm_overwrite_flag,
						{shortDesc}:=short_desc,
						{dataSheetName}:= datasheet_name
                  FROM(
                  SELECT /*+ ORDERED USE_NL(info, item, pd, prc, cbi, opt, prod, prog, pim) */
                        item.cit_source source,
                        opt.cat_item_key cat_item_key,
                        item.cit_context_id context_id,
                        item.CIT_CS_AVAIL_FLAG cross_sell_avail_flag,
                        item.CIT_SHOW_HIDE_FLAG CIT_SHOW_HIDE_FLAG,
                        prod.LOC_OPT_FLAG LOC_OPT_FLAG,
                        item.CIT_DELETE_FLAG CIT_DELETE_FLAG,
                        item.CIT_BASE_MODEL prodId,                          
                        item.CIT_SRC_PROD CIT_SRC_PROD,
                        opt.COP_BASE_MODEL COP_BASE_MODEL,
                        opt.COP_LOCALIZE_PROD COP_LOCALIZE_PROD,
                        opt.COP_CNTRY_CODE COP_CNTRY_CODE,
                        opt.COP_VALID_STATUS COP_VALID_STATUS,
                        item.CIT_PART_TYPE part_type,
                        nvl(item.CIT_CONTRACT_IDENTIFIER,'Contract') contract_identifier,
                        prc.CIP_NET_PRICE net_price,
                        NVL(item.CIT_BUNDLE_FLAG, 'S') CIT_BUNDLE_FLAG,
                        prod.mfg_part_id mfg_part_id,                          
                        item.CIT_LAST_MODIFIED_DATE LAST_MODIFIED_DATE,
                        prod.pl pl,
                        prc.CIP_PRICE_SRC_ID bd_number,
                        item.CIT_CONFIG_ID config_id,
                        prog.pgm_name pgm_name,
                        opt.cop_fusn_ord_status cop_fusn_ord_status,
                        opt.cop_skip_fusn_ord cop_skip_fusn_ord,
 					    opt.cop_lclp_ord_status cop_lclp_ord_status,
					  	opt.cop_skip_lclp_ord cop_skip_lclp_ord,
					  	opt.cop_plc_ord_status cop_plc_ord_status,
					  	opt.cop_skip_plc_ord cop_skip_plc_ord,
                        prc.cip_tx_curr_cd tx_currency_code,
                        item.cit_cpm_svc_prov_emails cpm_svc_provider_emails,
                        prc.CIP_SLA sla,
				  		prc.cip_status cip_status,
						DECODE (NVL (prc.cip_df_sla, 'N'), 'Y', prc.cip_sla, 'N', (SELECT ci2.cip_sla FROM cat_item_price ci2 WHERE ci2.cat_catalog_id = NVL (info.cat_parent_catalog_id, info.cat_catalog_id ) AND ci2.cit_src_prod = cbd_base_prod AND ROWNUM = 1) ) basesla,
						NVL(cbi.cbd_type_flag, 'C') cbd_type_flag,
                        item.cit_pgm_key cit_pgm_key,
                        NVL(prc.CIP_FFS_ID,(select ffs_id from cat_ffs where region_code = info.cat_region_code)) fs_id,
                        DECODE(prc.CIP_PRICE_SRC_TYPE, 'PROMO','PROMO_TIER','PROMOFW','PROMO_TIERFW',CIP_PRICE_SRC_TYPE) CIP_PRICE_SRC_TYPE,
						DECODE ( cbi.cbd_replaced_by, NULL, NULL, cbi.cbd_replaced_by || ' on ' || cbi.cbd_replaced_date) CBD_REPLACED_BY,
						DECODE ( cbi.cbd_type_flag, 'Q', DECODE(cbi.cbd_replaced_by, NULL, DECODE (cbi.cbd_replacement_for, NULL, NULL, 'RT'), 'R'), NULL) CONFIG_REPLACEMENT_STATUS, 
                        (select 'Y' from zero_price_option where base_prod = item.CIT_BASE_MODEL and rownum < 2) zero_price_option,
						TO_CHAR ( end_of_life_date, 'DD-Mon-YYYY' ) end_of_life_date,
						TO_CHAR ( discontinued_date, 'DD-Mon-YYYY' ) discontinued_date,
						TO_CHAR ( product_release_date, 'DD-Mon-YYYY' ) product_release_date,
						TO_CHAR ( marketing_obsolete_date, 'DD-Mon-YYYY' ) marketing_obsolete_date,
						pim.replacement_product replacement_product,
						cbi.bdt_template_id bdt_template_id, cbi.cbd_base_prod cbd_base_prod,
                	 	nvl(item.cit_pgm_overwrite_flag,'N') cit_pgm_overwrite_flag,
						BE_CONTENT_FALLBACK.get_short_desc( info.cat_catalog_id, opt.cop_localize_prod ) short_desc,
				   		null datasheet_name
                FROM    cat_info info, cat_item item, cat_item_options opt,
                        cat_price_descriptor pd, cat_item_price prc, products prod,
                        cat_program prog, cat_bundle_info cbi, plc_inheritance_merge pim
                WHERE   {string1} and prod.prod = opt.COP_LOCALIZE_PROD
                AND pim.country_code(+) = {?:cntryCode} AND pim.product_number(+) = opt.cop_localize_prod
                AND (item.cit_config_id is null OR 'N' = be_config_util.get_corona_read_flag('gui') )
				  UNION ALL
				  SELECT /*+ ORDERED USE_NL(info, item, pd, prc, cpi, cbi, opt, prod, prog, pim) */
                        item.cit_source source,
                        opt.cat_item_key cat_item_key,
                        item.cit_context_id context_id,
                        item.CIT_CS_AVAIL_FLAG cross_sell_avail_flag,
                        item.CIT_SHOW_HIDE_FLAG CIT_SHOW_HIDE_FLAG,
                        prod.LOC_OPT_FLAG LOC_OPT_FLAG,
                        item.CIT_DELETE_FLAG CIT_DELETE_FLAG,
                        item.CIT_BASE_MODEL prodId,                          
                        item.CIT_SRC_PROD CIT_SRC_PROD,
                        opt.COP_BASE_MODEL COP_BASE_MODEL,
                        opt.COP_LOCALIZE_PROD COP_LOCALIZE_PROD,
                        opt.COP_CNTRY_CODE COP_CNTRY_CODE,
						NVL(cpi.overall_status, DECODE( NVL(opt.cop_valid_status, 'X'), 'P', 'P', 'N')) COP_VALID_STATUS, 
                        item.CIT_PART_TYPE part_type,
                        nvl(item.CIT_CONTRACT_IDENTIFIER,'Contract') contract_identifier,
                        cpi.net_price net_price,
                        NVL(item.CIT_BUNDLE_FLAG, 'S') CIT_BUNDLE_FLAG,
                        prod.mfg_part_id mfg_part_id,                          
                        item.CIT_LAST_MODIFIED_DATE LAST_MODIFIED_DATE,
                        prod.pl pl,
                        DECODE(cpi.price_source, 'LP', DECODE(NVL(cpi.deal_number,'X'), 'X', 'LOCAL_PRICE', cpi.deal_number), NVL(cpi.deal_number, prc.cip_price_src_id))  bd_number,
                        item.CIT_CONFIG_ID config_id,
                        prog.pgm_name pgm_name,
                        opt.cop_fusn_ord_status cop_fusn_ord_status,
                        opt.cop_skip_fusn_ord cop_skip_fusn_ord,
 					    opt.cop_lclp_ord_status cop_lclp_ord_status,
					  	opt.cop_skip_lclp_ord cop_skip_lclp_ord,
					  	opt.cop_plc_ord_status cop_plc_ord_status,
					  	opt.cop_skip_plc_ord cop_skip_plc_ord,
                        prc.cip_tx_curr_cd tx_currency_code,
                        item.cit_cpm_svc_prov_emails cpm_svc_provider_emails,
                        prc.CIP_SLA sla,
				  		prc.cip_status cip_status,
						DECODE (NVL (prc.cip_df_sla, 'N'), 'Y', prc.cip_sla, 'N', (SELECT ci2.cip_sla FROM cat_item_price ci2 WHERE ci2.cat_catalog_id = NVL (info.cat_parent_catalog_id, info.cat_catalog_id ) AND ci2.cit_src_prod = cbd_base_prod AND ROWNUM = 1) ) basesla,
						NVL(cbi.cbd_type_flag, 'C') cbd_type_flag,
                        item.cit_pgm_key cit_pgm_key,
                        decode(cpi.BOM_FRMT, 'VALUE', decode(NVL(prc.CIP_FFS_ID,(select ffs_id from cat_ffs where region_code = info.cat_region_code)), 'AP_DIRECT', 'EG_DIRECT', 'EU_DIRECT', 'EG_DIRECT', 'US_DIRECT', 'EG_DIRECT', 'CA_DIRECT', 'EG_DIRECT', 'LA_DIRECT', 'EG_DIRECT', 'GL_DIRECT', 'EG_DIRECT', NVL(prc.CIP_FFS_ID,(select ffs_id from cat_ffs where region_code = info.cat_region_code))), NVL(prc.CIP_FFS_ID,(select ffs_id from cat_ffs where region_code = info.cat_region_code))) fs_id,
                        DECODE ( NVL(cpi.PRICE_SRC_TYPE, prc.CIP_PRICE_SRC_TYPE),
					             'PROMO', 'PROMO_TIER',
					             'PROMOFW', 'PROMO_TIERFW',
					             NVL(cpi.PRICE_SRC_TYPE, prc.CIP_PRICE_SRC_TYPE)
					            ) CIP_PRICE_SRC_TYPE,
						DECODE ( cbi.cbd_replaced_by, NULL, NULL, cbi.cbd_replaced_by || ' on ' || cbi.cbd_replaced_date) CBD_REPLACED_BY,
						DECODE ( cbi.cbd_type_flag, 'Q', DECODE(cbi.cbd_replaced_by, NULL, DECODE (cbi.cbd_replacement_for, NULL, NULL, 'RT'), 'R'), NULL) CONFIG_REPLACEMENT_STATUS, 
                        (select 'Y' from zero_price_option where base_prod = item.CIT_BASE_MODEL and rownum < 2) zero_price_option,
						TO_CHAR ( end_of_life_date, 'DD-Mon-YYYY' ) end_of_life_date,
						TO_CHAR ( discontinued_date, 'DD-Mon-YYYY' ) discontinued_date,
						TO_CHAR ( product_release_date, 'DD-Mon-YYYY' ) product_release_date,
						TO_CHAR ( marketing_obsolete_date, 'DD-Mon-YYYY' ) marketing_obsolete_date,
						pim.replacement_product replacement_product,
						cbi.bdt_template_id bdt_template_id, cbi.cbd_base_prod cbd_base_prod,
                	 	nvl(item.cit_pgm_overwrite_flag,'N') cit_pgm_overwrite_flag,
						BE_CONTENT_FALLBACK.get_short_desc( info.cat_catalog_id, opt.cop_localize_prod ) short_desc,
				   		null datasheet_name
                FROM  cat_info info, cat_item item, cat_item_options opt,
                        cat_price_descriptor pd, cat_item_price prc, products prod,
                        cat_program prog, config_permutation_info cpi, cat_bundle_info cbi, plc_inheritance_merge pim
                WHERE   'Y' = be_config_util.get_corona_read_flag('gui')
                		 and ( {string1} 
                		 and prod.prod = opt.COP_LOCALIZE_PROD
                		 AND pim.country_code(+) = {?:cntryCode} AND pim.product_number(+) = opt.cop_localize_prod
				         and item.cit_config_id is not null
				         and UPPER(cpi.price_id(+)) = {?:priceMergeId} 
				         and cpi.ship_to_country = {?:cntryCode}
						 and prc.cit_src_prod = cpi.config_prod_id(+)
						 and prc.cip_price_descriptor = cpi.price_descriptor(+)  )
					)
						) a 
		) b
		where {sortByAndSortOrder}	
                ]]>     
      </stmt>
      <!-- End Corona -->
           
      <stmt id="fedCustomCatalogSearch">
              <![CDATA[
                        SELECT /*+ ORDERED USE_NL(info , item ,pd, prc , opt ,prod, prog) */ 
                                {source}:= item.cit_source source,
                                {id}:= opt.cat_item_key,
                                {contextID}:= item.cit_context_id context_id,
                                {crossSellAvail}:= item.CIT_CS_AVAIL_FLAG cross_sell_avail_flag,
                                {FFsID}:= prc.cip_ffs_id fs_id,                          
                                {showHideFlag}:= item.CIT_SHOW_HIDE_FLAG,
                                {locOptFlag}:= prod.LOC_OPT_FLAG,
                                {deleteFlag}:= item.CIT_DELETE_FLAG,
                                {prodId}:= item.CIT_BASE_MODEL prodId,                          
                                {srcProd}:= item.CIT_SRC_PROD,
                                {optBaseModel}:= opt.COP_BASE_MODEL,
                                {optLocalizeProd}:= opt.COP_LOCALIZE_PROD,
                                {cntryCode}:= opt.COP_CNTRY_CODE,
                                {validationStatus}:= opt.COP_VALID_STATUS,
                                {partType}:= item.CIT_PART_TYPE part_type,
                                {casualBuyFlag}:= nvl(item.CIT_CONTRACT_IDENTIFIER,'Contract') contract_identifier,
                                {netPriceD}:= prc.CIP_NET_PRICE net_price,
                                {bundleFlag}:= NVL(item.CIT_BUNDLE_FLAG, 'S'),
                                {mfgPartID}:= prod.mfg_part_id,                          
                                {lastModifiedDateD}:= item.CIT_LAST_MODIFIED_DATE LAST_MODIFIED_DATE,
                                {productLine}:= prod.pl pl,
                                {bdID}:= prc.CIP_PRICE_SRC_ID bd_number,
                                {shortDesc}:= BE_CONTENT_FALLBACK.get_short_desc(info.cat_catalog_id, opt.cop_localize_prod) shortDesc,
                                {configID}:= item.CIT_CONFIG_ID config_id,                                
                               {baseProd}:= (select cbd_base_prod from cat_bundle_info where cbd_id=item.CIT_SRC_PROD  and rownum < 2) baseProd,
                               {minValueStr}:=(select cia_min_qty from cat_item_att a where a.cat_item_key= item.cit_item_key ) minvaluestr,
                               {maxValueStr}:=(select cia_max_qty from cat_item_att a where a.cat_item_key= item.cit_item_key ) maxValueStr,
                               {routingFlag}:=(select DECODE(cia_routing_flag,'VI', 'VISTA', 'PA', 'PACT', 'VIPA', 'BOTH', NULL) from cat_item_att a where a.cat_item_key= item.cit_item_key ) routingFlag,
                               {active}:=(select DECODE(cia_active_flag, 'A', 'Active', 'I', 'Inactive', NULL)  from cat_item_att a where a.cat_item_key= item.cit_item_key ) active,
                               {orderable}:=(select orderable from cat_item_att a where a.cat_item_key= item.cit_item_key ) orderable,
                               {approvalFlag}:=(select approval_flag from  cat_item_att a where  a.cat_item_key = item.cit_item_key) approvalFlag,
                               {epeatDesg}:= cat_util.get_epeat_desg(info.cat_catalog_id, item.CIT_BASE_MODEL) epeat_desg,
                               {energyStar}:= cat_util.get_energy_star(info.cat_catalog_id, item.CIT_BASE_MODEL) energy_star,
							   {preCRCStr}:=cat_util.get_pre_crc(info.cat_catalog_id, item.CIT_BASE_MODEL) pre_crc,
							   {postCRCStr}:=cat_util.get_post_crc(info.cat_catalog_id, item.CIT_BASE_MODEL) post_crc,
							   {weightStr}:=cat_util.get_weight(info.cat_catalog_id, item.CIT_BASE_MODEL) weight,
							   {manufacturer}:=cat_util.get_manufacturer(info.cat_catalog_id, item.CIT_BASE_MODEL) manufacturer,
							   {blueEarth}:=cat_util.get_blue_earth(info.cat_catalog_id, item.CIT_BASE_MODEL) blue_earth
                        FROM    cat_info info, cat_item item, cat_item_options opt,
                                cat_price_descriptor pd, cat_item_price prc, products prod,
                                cat_item_att cia
                        WHERE   {string1} and prod.prod = opt.COP_LOCALIZE_PROD
                      ]]>     
      </stmt>

  <!-- Fetch CTO's from Corona -Keshav -->
	  <stmt id="childCatalogSearchAP">
        <![CDATA[
        select * from (
			select a.*,rownum as ttt from (
                 SELECT	{source}:= source,
						{id}:= cat_item_key,
						{contextID}:=  context_id,
						{crossSellAvail}:= cross_sell_avail_flag,
						{showHideFlag}:=  CIT_SHOW_HIDE_FLAG,
						{locOptFlag}:=  LOC_OPT_FLAG,
						{deleteFlag}:= CIT_DELETE_FLAG,
						{prodId}:=  prodId,                          
						{srcProd}:=  CIT_SRC_PROD,
						{optBaseModel}:= COP_BASE_MODEL,
						{optLocalizeProd}:= COP_LOCALIZE_PROD,
						{cntryCode}:= COP_CNTRY_CODE,
						{validationStatus}:= COP_VALID_STATUS,
						{partType}:= part_type,
						{casualBuyFlag}:=  contract_identifier,
						{netPriceD}:=  net_price,
						{bundleFlag}:=  BUNDLE_FLAG,
						{mfgPartID}:= mfg_part_id,                          
						{lastModifiedDateD}:= LAST_MODIFIED_DATE,
						{productLine}:= pl,
						{bdID}:= bd_number,
						{configID}:= config_id,
						{pgmName}:= pgm_name,    
						{txCurrencyCode}:= tx_currency_code,
						{cpmSvcProviderEmails}:= cpm_svc_provider_emails,
						{pgmSLA}:= sla,
						{bundleSla}:= basesla,
						{configFlag}:= CBD_TYPE_FLAG,
						{programKey}:= cit_pgm_key,
						{fusionStatus}:= cop_fusn_ord_status,
						{FFsID}:=  fs_id,
						{priceSource}:=  CIP_PRICE_SRC_TYPE,
						{replacedByString}:= CBD_REPLACED_BY,
						{replacementStatus}:= CONFIG_REPLACEMENT_STATUS ,
						{zeroPriceOptFlag}:= zero_price_option,                     
						{esDateStr}:= marketing_obsolete_date,
						{priceStatus}:= cip_status,
						{bdlTemplateId}:= bdt_template_id,
						{baseProd}:= cbd_base_prod,
						{epeatDesg}:= epeat_desg,
						{shortDesc}:=short_desc,
						{dataSheetName}:= datasheet_name
                 FROM(
                 SELECT /*+ ORDERED USE_NL(info, item, pd, prc, cbi, opt, prod, prog, pim) */ 
						item.cit_source source,
						opt.cat_item_key cat_item_key,
						item.cit_context_id context_id,
						item.CIT_CS_AVAIL_FLAG cross_sell_avail_flag,
						item.CIT_SHOW_HIDE_FLAG CIT_SHOW_HIDE_FLAG,
						prod.LOC_OPT_FLAG LOC_OPT_FLAG,
						item.CIT_DELETE_FLAG CIT_DELETE_FLAG,
						item.CIT_BASE_MODEL prodId,                          
						item.CIT_SRC_PROD CIT_SRC_PROD,
						opt.COP_BASE_MODEL COP_BASE_MODEL,
						opt.COP_LOCALIZE_PROD COP_LOCALIZE_PROD,
						opt.COP_CNTRY_CODE COP_CNTRY_CODE,
						opt.COP_VALID_STATUS COP_VALID_STATUS,
						item.CIT_PART_TYPE part_type,
						nvl(item.CIT_CONTRACT_IDENTIFIER,'Contract') contract_identifier,
						prc.CIP_NET_PRICE net_price,
						NVL(item.CIT_BUNDLE_FLAG, 'S') BUNDLE_FLAG,
						prod.mfg_part_id mfg_part_id,                          
						item.CIT_LAST_MODIFIED_DATE LAST_MODIFIED_DATE,
						prod.pl pl,
						prc.CIP_PRICE_SRC_ID bd_number,
						item.CIT_CONFIG_ID config_id,
						prog.pgm_name pgm_name,    
						prc.cip_tx_curr_cd tx_currency_code,
						item.cit_cpm_svc_prov_emails cpm_svc_provider_emails,
						prc.CIP_SLA sla,
						DECODE (NVL (prc.cip_df_sla, 'N'), 'Y', prc.cip_sla, 'N', (SELECT ci2.cip_sla FROM cat_item_price ci2 WHERE ci2.cat_catalog_id = NVL (info.cat_parent_catalog_id, info.cat_catalog_id ) AND ci2.cit_src_prod = cbd_base_prod AND ROWNUM = 1) ) basesla,
						NVL(cbi.cbd_type_flag, 'C') cbd_type_flag,
						item.cit_pgm_key cit_pgm_key,
						opt.cop_fusn_ord_status cop_fusn_ord_status,
						NVL(prc.CIP_FFS_ID,(select ffs_id from cat_ffs where region_code = info.cat_region_code)) fs_id,
						DECODE(prc.CIP_PRICE_SRC_TYPE, 'PROMO','PROMO_TIER','PROMOFW','PROMO_TIERFW',CIP_PRICE_SRC_TYPE) CIP_PRICE_SRC_TYPE,
						DECODE ( cbi.cbd_replaced_by, NULL, NULL, cbi.cbd_replaced_by || ' on ' || cbi.cbd_replaced_date) cbd_replaced_by,
						DECODE ( cbi.cbd_type_flag, 'Q', DECODE(cbi.cbd_replaced_by, NULL, DECODE (cbi.cbd_replacement_for, NULL, NULL, 'RT'), 'R'), NULL) config_replacement_status, 
						(select 'Y' from zero_price_option where base_prod = item.CIT_BASE_MODEL and rownum < 2) zero_price_option,                     
						to_char(pim.marketing_obsolete_date, 'DD-Mon-YYYY') marketing_obsolete_date,
						prc.cip_status cip_status, 
						cbi.bdt_template_id bdt_template_id, cbi.cbd_base_prod cbd_base_prod,
						cat_util.get_epeat_desg(info.cat_catalog_id, opt.COP_LOCALIZE_PROD) epeat_desg,
						BE_CONTENT_FALLBACK.get_short_desc( info.cat_catalog_id, opt.cop_localize_prod ) short_desc,
				   		null datasheet_name
				  FROM    cat_info info, cat_item item, cat_item_options opt,
                          cat_price_descriptor pd, cat_item_price prc, products prod,
                          cat_program prog, cat_bundle_info cbi, plc_inheritance_merge pim
                  WHERE   {string1} and prod.prod = opt.COP_LOCALIZE_PROD 
                          AND pim.country_code(+) = {?:cntryCode} AND pim.product_number(+) = opt.cop_localize_prod
                          AND (item.cit_config_id is null OR 'N' = be_config_util.get_corona_read_flag('gui') )
                  UNION ALL
                  SELECT /*+ ORDERED USE_NL(info, item, pd, prc, cpi, cbi, opt, prod, prog, pim) */ 
						item.cit_source source,
						opt.cat_item_key cat_item_key,
						item.cit_context_id context_id,
						item.CIT_CS_AVAIL_FLAG cross_sell_avail_flag,
						item.CIT_SHOW_HIDE_FLAG CIT_SHOW_HIDE_FLAG,
						prod.LOC_OPT_FLAG LOC_OPT_FLAG,
						item.CIT_DELETE_FLAG CIT_DELETE_FLAG,
						item.CIT_BASE_MODEL prodId,                          
						item.CIT_SRC_PROD CIT_SRC_PROD,
						opt.COP_BASE_MODEL COP_BASE_MODEL,
						opt.COP_LOCALIZE_PROD COP_LOCALIZE_PROD,
						opt.COP_CNTRY_CODE COP_CNTRY_CODE,
						NVL(cpi.overall_status, DECODE( NVL(opt.cop_valid_status, 'X'), 'P', 'P', 'U')) COP_VALID_STATUS, 
						item.CIT_PART_TYPE part_type,
						nvl(item.CIT_CONTRACT_IDENTIFIER,'Contract') contract_identifier,
						cpi.net_price net_price,
						NVL(item.CIT_BUNDLE_FLAG, 'S') BUNDLE_FLAG,
						prod.mfg_part_id mfg_part_id,                          
						item.CIT_LAST_MODIFIED_DATE LAST_MODIFIED_DATE,
						prod.pl pl,
						DECODE(cpi.price_source, 'LP', DECODE(NVL(cpi.deal_number,'X'), 'X', 'LOCAL_PRICE', cpi.deal_number), NVL(cpi.deal_number, prc.cip_price_src_id))  bd_number,
						item.CIT_CONFIG_ID config_id,
						prog.pgm_name pgm_name,    
						prc.cip_tx_curr_cd tx_currency_code,
						item.cit_cpm_svc_prov_emails cpm_svc_provider_emails,
						prc.CIP_SLA sla,
						DECODE (NVL (prc.cip_df_sla, 'N'), 'Y', prc.cip_sla, 'N', (SELECT ci2.cip_sla FROM cat_item_price ci2 WHERE ci2.cat_catalog_id = NVL (info.cat_parent_catalog_id, info.cat_catalog_id ) AND ci2.cit_src_prod = cbd_base_prod AND ROWNUM = 1) ) basesla,
						NVL(cbi.cbd_type_flag, 'C') cbd_type_flag,
						item.cit_pgm_key cit_pgm_key,
						opt.cop_fusn_ord_status cop_fusn_ord_status,
						decode(cpi.BOM_FRMT, 'VALUE', decode(NVL(prc.CIP_FFS_ID,(select ffs_id from cat_ffs where region_code = info.cat_region_code)), 'AP_DIRECT', 'EG_DIRECT', 'EU_DIRECT', 'EG_DIRECT', 'US_DIRECT', 'EG_DIRECT', 'CA_DIRECT', 'EG_DIRECT', 'LA_DIRECT', 'EG_DIRECT', 'GL_DIRECT', 'EG_DIRECT', NVL(prc.CIP_FFS_ID,(select ffs_id from cat_ffs where region_code = info.cat_region_code))), NVL(prc.CIP_FFS_ID,(select ffs_id from cat_ffs where region_code = info.cat_region_code))) fs_id,
						DECODE ( NVL(cpi.PRICE_SRC_TYPE, prc.CIP_PRICE_SRC_TYPE),
					             'PROMO', 'PROMO_TIER',
					             'PROMOFW', 'PROMO_TIERFW',
					             NVL(cpi.PRICE_SRC_TYPE, prc.CIP_PRICE_SRC_TYPE)
					            ) CIP_PRICE_SRC_TYPE,
						DECODE ( cbi.cbd_replaced_by, NULL, NULL, cbi.cbd_replaced_by || ' on ' || cbi.cbd_replaced_date) cbd_replaced_by,
						DECODE ( cbi.cbd_type_flag, 'Q', DECODE(cbi.cbd_replaced_by, NULL, DECODE (cbi.cbd_replacement_for, NULL, NULL, 'RT'), 'R'), NULL) config_replacement_status, 
						(select 'Y' from zero_price_option where base_prod = item.CIT_BASE_MODEL and rownum < 2) zero_price_option,                     
						to_char(pim.marketing_obsolete_date, 'DD-Mon-YYYY') marketing_obsolete_date,
						prc.cip_status cip_status, 
						cbi.bdt_template_id bdt_template_id, cbi.cbd_base_prod cbd_base_prod,
						cat_util.get_epeat_desg(info.cat_catalog_id, opt.COP_LOCALIZE_PROD) epeat_desg,
						BE_CONTENT_FALLBACK.get_short_desc( info.cat_catalog_id, opt.cop_localize_prod ) short_desc,
				   		null datasheet_name
				  FROM    cat_info info, cat_item item, cat_item_options opt,
                          cat_price_descriptor pd, cat_item_price prc, products prod,
                          cat_program prog, config_permutation_info cpi, cat_bundle_info cbi, plc_inheritance_merge pim
                  WHERE   'Y' = be_config_util.get_corona_read_flag('gui')
                  		  and ( {string1} and prod.prod = opt.COP_LOCALIZE_PROD 
                          AND pim.country_code(+) = {?:cntryCode} AND pim.product_number(+) = opt.cop_localize_prod
 						  and item.cit_config_id is not null
						  and UPPER(cpi.price_id(+)) = {?:priceMergeId} 
						  and cpi.ship_to_country = {?:cntryCode}
						  and prc.cit_src_prod = cpi.config_prod_id(+) 
						  and prc.cip_price_descriptor = cpi.price_descriptor(+) )
					)
				) a 
		) b
		where {sortByAndSortOrder}	
                ]]>     
      </stmt>
      
      <stmt id="childCatalogSearchAPNoPgn">
        <![CDATA[
        select * from (
			select a.*,rownum as ttt from (
                 SELECT	{source}:= source,
						{id}:= cat_item_key,
						{contextID}:=  context_id,
						{crossSellAvail}:= cross_sell_avail_flag,
						{showHideFlag}:=  CIT_SHOW_HIDE_FLAG,
						{locOptFlag}:=  LOC_OPT_FLAG,
						{deleteFlag}:= CIT_DELETE_FLAG,
						{prodId}:=  prodId,                          
						{srcProd}:=  CIT_SRC_PROD,
						{optBaseModel}:= COP_BASE_MODEL,
						{optLocalizeProd}:= COP_LOCALIZE_PROD,
						{cntryCode}:= COP_CNTRY_CODE,
						{validationStatus}:= COP_VALID_STATUS,
						{partType}:= part_type,
						{casualBuyFlag}:=  contract_identifier,
						{netPriceD}:=  net_price,
						{bundleFlag}:=  BUNDLE_FLAG,
						{mfgPartID}:= mfg_part_id,                          
						{lastModifiedDateD}:= LAST_MODIFIED_DATE,
						{productLine}:= pl,
						{bdID}:= bd_number,
						{configID}:= config_id,
						{pgmName}:= pgm_name,    
						{txCurrencyCode}:= tx_currency_code,
						{cpmSvcProviderEmails}:= cpm_svc_provider_emails,
						{pgmSLA}:= sla,
						{bundleSla}:= basesla,
						{configFlag}:= CBD_TYPE_FLAG,
						{programKey}:= cit_pgm_key,
						{fusionStatus}:= cop_fusn_ord_status,
						{FFsID}:=  fs_id,
						{priceSource}:=  CIP_PRICE_SRC_TYPE,
						{replacedByString}:= CBD_REPLACED_BY,
						{replacementStatus}:= CONFIG_REPLACEMENT_STATUS ,
						{zeroPriceOptFlag}:= zero_price_option,                     
						{esDateStr}:= marketing_obsolete_date,
						{priceStatus}:= cip_status,
						{bdlTemplateId}:= bdt_template_id,
						{baseProd}:= cbd_base_prod,
						{epeatDesg}:= epeat_desg,
						{shortDesc}:=short_desc,
						{dataSheetName}:= datasheet_name
                 FROM(
                 SELECT /*+ ORDERED USE_NL(info, item, pd, prc, cbi, opt, prod, prog, pim) */ 
						item.cit_source source,
						opt.cat_item_key cat_item_key,
						item.cit_context_id context_id,
						item.CIT_CS_AVAIL_FLAG cross_sell_avail_flag,
						item.CIT_SHOW_HIDE_FLAG CIT_SHOW_HIDE_FLAG,
						prod.LOC_OPT_FLAG LOC_OPT_FLAG,
						item.CIT_DELETE_FLAG CIT_DELETE_FLAG,
						item.CIT_BASE_MODEL prodId,                          
						item.CIT_SRC_PROD CIT_SRC_PROD,
						opt.COP_BASE_MODEL COP_BASE_MODEL,
						opt.COP_LOCALIZE_PROD COP_LOCALIZE_PROD,
						opt.COP_CNTRY_CODE COP_CNTRY_CODE,
						opt.COP_VALID_STATUS COP_VALID_STATUS,
						item.CIT_PART_TYPE part_type,
						nvl(item.CIT_CONTRACT_IDENTIFIER,'Contract') contract_identifier,
						prc.CIP_NET_PRICE net_price,
						NVL(item.CIT_BUNDLE_FLAG, 'S') BUNDLE_FLAG,
						prod.mfg_part_id mfg_part_id,                          
						item.CIT_LAST_MODIFIED_DATE LAST_MODIFIED_DATE,
						prod.pl pl,
						prc.CIP_PRICE_SRC_ID bd_number,
						item.CIT_CONFIG_ID config_id,
						prog.pgm_name pgm_name,    
						prc.cip_tx_curr_cd tx_currency_code,
						item.cit_cpm_svc_prov_emails cpm_svc_provider_emails,
						prc.CIP_SLA sla,
						DECODE (NVL (prc.cip_df_sla, 'N'), 'Y', prc.cip_sla, 'N', (SELECT ci2.cip_sla FROM cat_item_price ci2 WHERE ci2.cat_catalog_id = NVL (info.cat_parent_catalog_id, info.cat_catalog_id ) AND ci2.cit_src_prod = cbd_base_prod AND ROWNUM = 1) ) basesla,
						NVL(cbi.cbd_type_flag, 'C') cbd_type_flag,
						item.cit_pgm_key cit_pgm_key,
						opt.cop_fusn_ord_status cop_fusn_ord_status,
						NVL(prc.CIP_FFS_ID,(select ffs_id from cat_ffs where region_code = info.cat_region_code)) fs_id,
						DECODE(prc.CIP_PRICE_SRC_TYPE, 'PROMO','PROMO_TIER','PROMOFW','PROMO_TIERFW',CIP_PRICE_SRC_TYPE) CIP_PRICE_SRC_TYPE,
						DECODE ( cbi.cbd_replaced_by, NULL, NULL, cbi.cbd_replaced_by || ' on ' || cbi.cbd_replaced_date) cbd_replaced_by,
						DECODE ( cbi.cbd_type_flag, 'Q', DECODE(cbi.cbd_replaced_by, NULL, DECODE (cbi.cbd_replacement_for, NULL, NULL, 'RT'), 'R'), NULL) config_replacement_status, 
						(select 'Y' from zero_price_option where base_prod = item.CIT_BASE_MODEL and rownum < 2) zero_price_option,                     
						to_char(pim.marketing_obsolete_date, 'DD-Mon-YYYY') marketing_obsolete_date,
						prc.cip_status cip_status, 
						cbi.bdt_template_id bdt_template_id, cbi.cbd_base_prod cbd_base_prod,
						cat_util.get_epeat_desg(info.cat_catalog_id, opt.COP_LOCALIZE_PROD) epeat_desg,
						BE_CONTENT_FALLBACK.get_short_desc( info.cat_catalog_id, opt.cop_localize_prod ) short_desc,
				   		null datasheet_name
				  FROM    cat_info info, cat_item item, cat_item_options opt,
                          cat_price_descriptor pd, cat_item_price prc, products prod,
                          cat_program prog, cat_bundle_info cbi, plc_inheritance_merge pim
                  WHERE   {string1} and prod.prod = opt.COP_LOCALIZE_PROD 
                          AND pim.country_code(+) = {?:cntryCode} AND pim.product_number(+) = opt.cop_localize_prod
                          AND (item.cit_config_id is null OR 'N' = be_config_util.get_corona_read_flag('gui') )
                  UNION ALL
                  SELECT /*+ ORDERED USE_NL(info, item, pd, prc, cpi, cbi, opt, prod, prog, pim) */ 
						item.cit_source source,
						opt.cat_item_key cat_item_key,
						item.cit_context_id context_id,
						item.CIT_CS_AVAIL_FLAG cross_sell_avail_flag,
						item.CIT_SHOW_HIDE_FLAG CIT_SHOW_HIDE_FLAG,
						prod.LOC_OPT_FLAG LOC_OPT_FLAG,
						item.CIT_DELETE_FLAG CIT_DELETE_FLAG,
						item.CIT_BASE_MODEL prodId,                          
						item.CIT_SRC_PROD CIT_SRC_PROD,
						opt.COP_BASE_MODEL COP_BASE_MODEL,
						opt.COP_LOCALIZE_PROD COP_LOCALIZE_PROD,
						opt.COP_CNTRY_CODE COP_CNTRY_CODE,
						NVL(cpi.overall_status, DECODE( NVL(opt.cop_valid_status, 'X'), 'P', 'P', 'U')) COP_VALID_STATUS, 
						item.CIT_PART_TYPE part_type,
						nvl(item.CIT_CONTRACT_IDENTIFIER,'Contract') contract_identifier,
						cpi.net_price net_price,
						NVL(item.CIT_BUNDLE_FLAG, 'S') BUNDLE_FLAG,
						prod.mfg_part_id mfg_part_id,                          
						item.CIT_LAST_MODIFIED_DATE LAST_MODIFIED_DATE,
						prod.pl pl,
						DECODE(cpi.price_source, 'LP', DECODE(NVL(cpi.deal_number,'X'), 'X', 'LOCAL_PRICE', cpi.deal_number), NVL(cpi.deal_number, prc.cip_price_src_id))  bd_number,
						item.CIT_CONFIG_ID config_id,
						prog.pgm_name pgm_name,    
						prc.cip_tx_curr_cd tx_currency_code,
						item.cit_cpm_svc_prov_emails cpm_svc_provider_emails,
						prc.CIP_SLA sla,
						DECODE (NVL (prc.cip_df_sla, 'N'), 'Y', prc.cip_sla, 'N', (SELECT ci2.cip_sla FROM cat_item_price ci2 WHERE ci2.cat_catalog_id = NVL (info.cat_parent_catalog_id, info.cat_catalog_id ) AND ci2.cit_src_prod = cbd_base_prod AND ROWNUM = 1) ) basesla,
						NVL(cbi.cbd_type_flag, 'C') cbd_type_flag,
						item.cit_pgm_key cit_pgm_key,
						opt.cop_fusn_ord_status cop_fusn_ord_status,
						decode(cpi.BOM_FRMT, 'VALUE', decode(NVL(prc.CIP_FFS_ID,(select ffs_id from cat_ffs where region_code = info.cat_region_code)), 'AP_DIRECT', 'EG_DIRECT', 'EU_DIRECT', 'EG_DIRECT', 'US_DIRECT', 'EG_DIRECT', 'CA_DIRECT', 'EG_DIRECT', 'LA_DIRECT', 'EG_DIRECT', 'GL_DIRECT', 'EG_DIRECT', NVL(prc.CIP_FFS_ID,(select ffs_id from cat_ffs where region_code = info.cat_region_code))), NVL(prc.CIP_FFS_ID,(select ffs_id from cat_ffs where region_code = info.cat_region_code))) fs_id,
						DECODE ( NVL(cpi.PRICE_SRC_TYPE, prc.CIP_PRICE_SRC_TYPE),
					             'PROMO', 'PROMO_TIER',
					             'PROMOFW', 'PROMO_TIERFW',
					             NVL(cpi.PRICE_SRC_TYPE, prc.CIP_PRICE_SRC_TYPE)
					            ) CIP_PRICE_SRC_TYPE,
						DECODE ( cbi.cbd_replaced_by, NULL, NULL, cbi.cbd_replaced_by || ' on ' || cbi.cbd_replaced_date) cbd_replaced_by,
						DECODE ( cbi.cbd_type_flag, 'Q', DECODE(cbi.cbd_replaced_by, NULL, DECODE (cbi.cbd_replacement_for, NULL, NULL, 'RT'), 'R'), NULL) config_replacement_status, 
						(select 'Y' from zero_price_option where base_prod = item.CIT_BASE_MODEL and rownum < 2) zero_price_option,                     
						to_char(pim.marketing_obsolete_date, 'DD-Mon-YYYY') marketing_obsolete_date,
						prc.cip_status cip_status, 
						cbi.bdt_template_id bdt_template_id, cbi.cbd_base_prod cbd_base_prod,
						cat_util.get_epeat_desg(info.cat_catalog_id, opt.COP_LOCALIZE_PROD) epeat_desg,
						BE_CONTENT_FALLBACK.get_short_desc( info.cat_catalog_id, opt.cop_localize_prod ) short_desc,
				   		null datasheet_name
				  FROM    cat_info info, cat_item item, cat_item_options opt,
                          cat_price_descriptor pd, cat_item_price prc, products prod,
                          cat_program prog, config_permutation_info cpi, cat_bundle_info cbi, plc_inheritance_merge pim
                  WHERE   'Y' = be_config_util.get_corona_read_flag('gui')
                  		  and ( {string1} and prod.prod = opt.COP_LOCALIZE_PROD 
                          AND pim.country_code(+) = {?:cntryCode} AND pim.product_number(+) = opt.cop_localize_prod
 						  and item.cit_config_id is not null
						  and UPPER(cpi.price_id(+)) = {?:priceMergeId} 
						  and cpi.ship_to_country = {?:cntryCode}
						  and prc.cit_src_prod = cpi.config_prod_id(+) 
						  and prc.cip_price_descriptor = cpi.price_descriptor(+) )
					)
					) a 
		) b
		where {sortByAndSortOrder}	
                ]]>     
      </stmt>
      
      
   <stmt id="childCatalogSearch">
        <![CDATA[
        select * from (
			select a.*,rownum as ttt from (
                 SELECT 
						{source}:= source,
						{id}:= cat_item_key,
						{contextID}:= context_id,
						{crossSellAvail}:= cross_sell_avail_flag,
						{showHideFlag}:= CIT_SHOW_HIDE_FLAG,
						{locOptFlag}:= LOC_OPT_FLAG,
						{deleteFlag}:= CIT_DELETE_FLAG,
						{prodId}:= prodId,                          
						{srcProd}:= CIT_SRC_PROD,
						{optBaseModel}:= COP_BASE_MODEL,
						{optLocalizeProd}:= COP_LOCALIZE_PROD,
						{cntryCode}:= COP_CNTRY_CODE,
						{validationStatus}:= COP_VALID_STATUS,
						{partType}:= part_type,
						{casualBuyFlag}:= contract_identifier,
						{netPriceD}:= net_price,
						{bundleFlag}:= BUNDLE_FLAG,
						{mfgPartID}:= mfg_part_id,                          
						{lastModifiedDateD}:= LAST_MODIFIED_DATE,
						{productLine}:= pl,
						{bdID}:= bd_number,
						{configID}:= config_id,
						{pgmName}:= pgm_name,
						{fusionStatus}:= cop_fusn_ord_status,
						{txCurrencyCode}:= tx_currency_code,
						{cpmSvcProviderEmails}:= cpm_svc_provider_emails,
						{pgmSLA}:= sla,
						{bundleSla}:= basesla,
						{configFlag}:= CBD_TYPE_FLAG,
						{programKey}:= cit_pgm_key,
						{FFsID}:= fs_id,
						{priceSource}:= CIP_PRICE_SRC_TYPE,
						{replacedByString}:= CBD_REPLACED_BY,
						{replacementStatus}:= CONFIG_REPLACEMENT_STATUS ,
						{zeroPriceOptFlag}:= zero_price_option,
						{priceStatus}:= cip_status,
						{bdlTemplateId}:= bdt_template_id,
						{baseProd}:= cbd_base_prod,
						{epeatDesg}:= epeat_desg,     
						{shortDesc}:=short_desc,
						{dataSheetName}:= datasheet_name             
                 FROM(
                 SELECT /*+ ORDERED USE_NL(info, item, pd, prc, cbi, che, opt, prod, prog) */ 
						item.cit_source source,
						opt.cat_item_key cat_item_key,
						item.cit_context_id context_id,
						item.CIT_CS_AVAIL_FLAG cross_sell_avail_flag,
						item.CIT_SHOW_HIDE_FLAG CIT_SHOW_HIDE_FLAG,
						prod.LOC_OPT_FLAG LOC_OPT_FLAG,
						item.CIT_DELETE_FLAG CIT_DELETE_FLAG,
						item.CIT_BASE_MODEL prodId,                          
						item.CIT_SRC_PROD CIT_SRC_PROD,
						opt.COP_BASE_MODEL COP_BASE_MODEL,
						opt.COP_LOCALIZE_PROD COP_LOCALIZE_PROD,
						opt.COP_CNTRY_CODE COP_CNTRY_CODE,
						opt.COP_VALID_STATUS COP_VALID_STATUS,
						item.CIT_PART_TYPE part_type,
						nvl(item.CIT_CONTRACT_IDENTIFIER,'Contract') contract_identifier,
						prc.CIP_NET_PRICE net_price,
						NVL(item.CIT_BUNDLE_FLAG, 'S') BUNDLE_FLAG,
						prod.mfg_part_id mfg_part_id,                          
						item.CIT_LAST_MODIFIED_DATE LAST_MODIFIED_DATE,
						prod.pl pl,
						prc.CIP_PRICE_SRC_ID bd_number,
						item.CIT_CONFIG_ID config_id,
						prog.pgm_name pgm_name,    
						opt.cop_fusn_ord_status cop_fusn_ord_status,
						prc.cip_tx_curr_cd tx_currency_code,
						item.cit_cpm_svc_prov_emails cpm_svc_provider_emails,
						prc.CIP_SLA sla,
						DECODE (NVL (prc.cip_df_sla, 'N'), 'Y', prc.cip_sla, 'N', (SELECT ci2.cip_sla FROM cat_item_price ci2 WHERE ci2.cat_catalog_id = NVL (info.cat_parent_catalog_id, info.cat_catalog_id ) AND ci2.cit_src_prod = cbd_base_prod AND ROWNUM = 1) ) basesla,
						NVL(cbi.cbd_type_flag, 'C') cbd_type_flag,
						item.cit_pgm_key cit_pgm_key,
						NVL(prc.CIP_FFS_ID,(select ffs_id from cat_ffs where region_code = info.cat_region_code)) fs_id,
						DECODE(prc.CIP_PRICE_SRC_TYPE, 'PROMO','PROMO_TIER','PROMOFW','PROMO_TIERFW',CIP_PRICE_SRC_TYPE) CIP_PRICE_SRC_TYPE,
						DECODE ( cbi.cbd_replaced_by, NULL, NULL, cbi.cbd_replaced_by || ' on ' || cbi.cbd_replaced_date) cbd_replaced_by,
						DECODE ( cbi.cbd_type_flag, 'Q', DECODE(cbi.cbd_replaced_by, NULL, DECODE (cbi.cbd_replacement_for, NULL, NULL, 'RT'), 'R'), NULL) config_replacement_status, 
						(select 'Y' from zero_price_option where base_prod = item.CIT_BASE_MODEL and rownum < 2) zero_price_option,                     
						prc.cip_status cip_status, 
						cbi.bdt_template_id bdt_template_id, cbi.cbd_base_prod cbd_base_prod,
						cat_util.get_epeat_desg(info.cat_catalog_id, opt.COP_LOCALIZE_PROD) epeat_desg,
						BE_CONTENT_FALLBACK.get_short_desc( info.cat_catalog_id, opt.cop_localize_prod ) short_desc,
				   		null datasheet_name
                  FROM    cat_info info, cat_item item, cat_item_options opt,
                          cat_price_descriptor pd, cat_item_price prc, products prod,
                          cat_program prog, cat_bundle_info cbi
                  WHERE   {string1} 
                  		  and (item.cit_config_id is null OR 'N' = be_config_util.get_corona_read_flag('gui') )
                  UNION ALL
                  SELECT /*+ ORDERED USE_NL(info, item, pd, prc, cpi, cbi, opt, prod, prog) */ 
						item.cit_source source,
						opt.cat_item_key cat_item_key,
						item.cit_context_id context_id,
						item.CIT_CS_AVAIL_FLAG cross_sell_avail_flag,
						item.CIT_SHOW_HIDE_FLAG CIT_SHOW_HIDE_FLAG,
						prod.LOC_OPT_FLAG LOC_OPT_FLAG,
						item.CIT_DELETE_FLAG CIT_DELETE_FLAG,
						item.CIT_BASE_MODEL prodId,                          
						item.CIT_SRC_PROD CIT_SRC_PROD,
						opt.COP_BASE_MODEL COP_BASE_MODEL,
						opt.COP_LOCALIZE_PROD COP_LOCALIZE_PROD,
						opt.COP_CNTRY_CODE COP_CNTRY_CODE,
						NVL(cpi.overall_status, DECODE( NVL(opt.cop_valid_status, 'X'), 'P', 'P', 'U')) COP_VALID_STATUS, 
						item.CIT_PART_TYPE part_type,
						nvl(item.CIT_CONTRACT_IDENTIFIER,'Contract') contract_identifier,
						cpi.net_price net_price,
						NVL(item.CIT_BUNDLE_FLAG, 'S') BUNDLE_FLAG,
						prod.mfg_part_id mfg_part_id,                          
						item.CIT_LAST_MODIFIED_DATE LAST_MODIFIED_DATE,
						prod.pl pl,
						DECODE(cpi.price_source, 'LP', DECODE(NVL(cpi.deal_number,'X'), 'X', 'LOCAL_PRICE', cpi.deal_number), NVL(cpi.deal_number, prc.cip_price_src_id))  bd_number,
						item.CIT_CONFIG_ID config_id,
						prog.pgm_name pgm_name,    
						opt.cop_fusn_ord_status cop_fusn_ord_status,
						prc.cip_tx_curr_cd tx_currency_code,
						item.cit_cpm_svc_prov_emails cpm_svc_provider_emails,
						prc.CIP_SLA sla,
						DECODE (NVL (prc.cip_df_sla, 'N'), 'Y', prc.cip_sla, 'N', (SELECT ci2.cip_sla FROM cat_item_price ci2 WHERE ci2.cat_catalog_id = NVL (info.cat_parent_catalog_id, info.cat_catalog_id ) AND ci2.cit_src_prod = cbd_base_prod AND ROWNUM = 1) ) basesla,
						NVL(cbi.cbd_type_flag, 'C') cbd_type_flag,
						item.cit_pgm_key cit_pgm_key,
						decode(cpi.BOM_FRMT, 'VALUE', decode(NVL(prc.CIP_FFS_ID,(select ffs_id from cat_ffs where region_code = info.cat_region_code)), 'AP_DIRECT', 'EG_DIRECT', 'EU_DIRECT', 'EG_DIRECT', 'US_DIRECT', 'EG_DIRECT', 'CA_DIRECT', 'EG_DIRECT', 'LA_DIRECT', 'EG_DIRECT', 'GL_DIRECT', 'EG_DIRECT', NVL(prc.CIP_FFS_ID,(select ffs_id from cat_ffs where region_code = info.cat_region_code))), NVL(prc.CIP_FFS_ID,(select ffs_id from cat_ffs where region_code = info.cat_region_code))) fs_id,
						DECODE ( NVL(cpi.PRICE_SRC_TYPE, prc.CIP_PRICE_SRC_TYPE),
					             'PROMO', 'PROMO_TIER',
					             'PROMOFW', 'PROMO_TIERFW',
					             NVL(cpi.PRICE_SRC_TYPE, prc.CIP_PRICE_SRC_TYPE)
					            ) CIP_PRICE_SRC_TYPE,
						DECODE ( cbi.cbd_replaced_by, NULL, NULL, cbi.cbd_replaced_by || ' on ' || cbi.cbd_replaced_date) cbd_replaced_by,
						DECODE ( cbi.cbd_type_flag, 'Q', DECODE(cbi.cbd_replaced_by, NULL, DECODE (cbi.cbd_replacement_for, NULL, NULL, 'RT'), 'R'), NULL) config_replacement_status, 
						(select 'Y' from zero_price_option where base_prod = item.CIT_BASE_MODEL and rownum < 2) zero_price_option,                     
						prc.cip_status cip_status, 
						cbi.bdt_template_id bdt_template_id, cbi.cbd_base_prod cbd_base_prod,
						cat_util.get_epeat_desg(info.cat_catalog_id, opt.COP_LOCALIZE_PROD) epeat_desg,
						BE_CONTENT_FALLBACK.get_short_desc( info.cat_catalog_id, opt.cop_localize_prod ) short_desc,
				   		null datasheet_name
				  FROM    cat_info info, cat_item item, cat_item_options opt,
                          cat_price_descriptor pd, cat_item_price prc, products prod,
                          cat_program prog, config_permutation_info cpi, cat_bundle_info cbi
                  WHERE   'Y' = be_config_util.get_corona_read_flag('gui')
                  		  and ( {string1}
 						  and item.cit_config_id is not null
						  and UPPER(cpi.price_id(+)) = {?:priceMergeId} 
						  and cpi.ship_to_country = {?:cntryCode}
						  and prc.cit_src_prod = cpi.config_prod_id(+) 
						  and prc.cip_price_descriptor = cpi.price_descriptor(+) )
                  	)
                ) a 
		) b
		where {sortByAndSortOrder}
                 ]]>     
      </stmt> 
 <!-- End fetch CTO's from Corona chnages -->
 
  <stmt id="childCatalogSearchNoPgn">
        <![CDATA[
        select * from (
			select a.*,rownum as ttt from (
                 SELECT 
						{source}:= source,
						{id}:= cat_item_key,
						{contextID}:= context_id,
						{crossSellAvail}:= cross_sell_avail_flag,
						{showHideFlag}:= CIT_SHOW_HIDE_FLAG,
						{locOptFlag}:= LOC_OPT_FLAG,
						{deleteFlag}:= CIT_DELETE_FLAG,
						{prodId}:= prodId,                          
						{srcProd}:= CIT_SRC_PROD,
						{optBaseModel}:= COP_BASE_MODEL,
						{optLocalizeProd}:= COP_LOCALIZE_PROD,
						{cntryCode}:= COP_CNTRY_CODE,
						{validationStatus}:= COP_VALID_STATUS,
						{partType}:= part_type,
						{casualBuyFlag}:= contract_identifier,
						{netPriceD}:= net_price,
						{bundleFlag}:= BUNDLE_FLAG,
						{mfgPartID}:= mfg_part_id,                          
						{lastModifiedDateD}:= LAST_MODIFIED_DATE,
						{productLine}:= pl,
						{bdID}:= bd_number,
						{configID}:= config_id,
						{pgmName}:= pgm_name,
						{fusionStatus}:= cop_fusn_ord_status,
						{txCurrencyCode}:= tx_currency_code,
						{cpmSvcProviderEmails}:= cpm_svc_provider_emails,
						{pgmSLA}:= sla,
						{bundleSla}:= basesla,
						{configFlag}:= CBD_TYPE_FLAG,
						{programKey}:= cit_pgm_key,
						{FFsID}:= fs_id,
						{priceSource}:= CIP_PRICE_SRC_TYPE,
						{replacedByString}:= CBD_REPLACED_BY,
						{replacementStatus}:= CONFIG_REPLACEMENT_STATUS ,
						{zeroPriceOptFlag}:= zero_price_option,
						{priceStatus}:= cip_status,
						{bdlTemplateId}:= bdt_template_id,
						{baseProd}:= cbd_base_prod,
						{epeatDesg}:= epeat_desg,     
						{shortDesc}:=short_desc,
						{dataSheetName}:= datasheet_name             
                 FROM(
                 SELECT /*+ ORDERED USE_NL(info, item, pd, prc, cbi, che, opt, prod, prog) */ 
						item.cit_source source,
						opt.cat_item_key cat_item_key,
						item.cit_context_id context_id,
						item.CIT_CS_AVAIL_FLAG cross_sell_avail_flag,
						item.CIT_SHOW_HIDE_FLAG CIT_SHOW_HIDE_FLAG,
						prod.LOC_OPT_FLAG LOC_OPT_FLAG,
						item.CIT_DELETE_FLAG CIT_DELETE_FLAG,
						item.CIT_BASE_MODEL prodId,                          
						item.CIT_SRC_PROD CIT_SRC_PROD,
						opt.COP_BASE_MODEL COP_BASE_MODEL,
						opt.COP_LOCALIZE_PROD COP_LOCALIZE_PROD,
						opt.COP_CNTRY_CODE COP_CNTRY_CODE,
						opt.COP_VALID_STATUS COP_VALID_STATUS,
						item.CIT_PART_TYPE part_type,
						nvl(item.CIT_CONTRACT_IDENTIFIER,'Contract') contract_identifier,
						prc.CIP_NET_PRICE net_price,
						NVL(item.CIT_BUNDLE_FLAG, 'S') BUNDLE_FLAG,
						prod.mfg_part_id mfg_part_id,                          
						item.CIT_LAST_MODIFIED_DATE LAST_MODIFIED_DATE,
						prod.pl pl,
						prc.CIP_PRICE_SRC_ID bd_number,
						item.CIT_CONFIG_ID config_id,
						prog.pgm_name pgm_name,    
						opt.cop_fusn_ord_status cop_fusn_ord_status,
						prc.cip_tx_curr_cd tx_currency_code,
						item.cit_cpm_svc_prov_emails cpm_svc_provider_emails,
						prc.CIP_SLA sla,
						DECODE (NVL (prc.cip_df_sla, 'N'), 'Y', prc.cip_sla, 'N', (SELECT ci2.cip_sla FROM cat_item_price ci2 WHERE ci2.cat_catalog_id = NVL (info.cat_parent_catalog_id, info.cat_catalog_id ) AND ci2.cit_src_prod = cbd_base_prod AND ROWNUM = 1) ) basesla,
						NVL(cbi.cbd_type_flag, 'C') cbd_type_flag,
						item.cit_pgm_key cit_pgm_key,
						NVL(prc.CIP_FFS_ID,(select ffs_id from cat_ffs where region_code = info.cat_region_code)) fs_id,
						DECODE(prc.CIP_PRICE_SRC_TYPE, 'PROMO','PROMO_TIER','PROMOFW','PROMO_TIERFW',CIP_PRICE_SRC_TYPE) CIP_PRICE_SRC_TYPE,
						DECODE ( cbi.cbd_replaced_by, NULL, NULL, cbi.cbd_replaced_by || ' on ' || cbi.cbd_replaced_date) cbd_replaced_by,
						DECODE ( cbi.cbd_type_flag, 'Q', DECODE(cbi.cbd_replaced_by, NULL, DECODE (cbi.cbd_replacement_for, NULL, NULL, 'RT'), 'R'), NULL) config_replacement_status, 
						(select 'Y' from zero_price_option where base_prod = item.CIT_BASE_MODEL and rownum < 2) zero_price_option,                     
						prc.cip_status cip_status, 
						cbi.bdt_template_id bdt_template_id, cbi.cbd_base_prod cbd_base_prod,
						cat_util.get_epeat_desg(info.cat_catalog_id, opt.COP_LOCALIZE_PROD) epeat_desg,
						BE_CONTENT_FALLBACK.get_short_desc( info.cat_catalog_id, opt.cop_localize_prod ) short_desc,
				   		null datasheet_name
                  FROM    cat_info info, cat_item item, cat_item_options opt,
                          cat_price_descriptor pd, cat_item_price prc, products prod,
                          cat_program prog, cat_bundle_info cbi
                  WHERE   {string1} 
                  		  and (item.cit_config_id is null OR 'N' = be_config_util.get_corona_read_flag('gui') )
                  UNION ALL
                  SELECT /*+ ORDERED USE_NL(info, item, pd, prc, cpi, cbi, opt, prod, prog) */ 
						item.cit_source source,
						opt.cat_item_key cat_item_key,
						item.cit_context_id context_id,
						item.CIT_CS_AVAIL_FLAG cross_sell_avail_flag,
						item.CIT_SHOW_HIDE_FLAG CIT_SHOW_HIDE_FLAG,
						prod.LOC_OPT_FLAG LOC_OPT_FLAG,
						item.CIT_DELETE_FLAG CIT_DELETE_FLAG,
						item.CIT_BASE_MODEL prodId,                          
						item.CIT_SRC_PROD CIT_SRC_PROD,
						opt.COP_BASE_MODEL COP_BASE_MODEL,
						opt.COP_LOCALIZE_PROD COP_LOCALIZE_PROD,
						opt.COP_CNTRY_CODE COP_CNTRY_CODE,
						NVL(cpi.overall_status, DECODE( NVL(opt.cop_valid_status, 'X'), 'P', 'P', 'U')) COP_VALID_STATUS, 
						item.CIT_PART_TYPE part_type,
						nvl(item.CIT_CONTRACT_IDENTIFIER,'Contract') contract_identifier,
						cpi.net_price net_price,
						NVL(item.CIT_BUNDLE_FLAG, 'S') BUNDLE_FLAG,
						prod.mfg_part_id mfg_part_id,                          
						item.CIT_LAST_MODIFIED_DATE LAST_MODIFIED_DATE,
						prod.pl pl,
						DECODE(cpi.price_source, 'LP', DECODE(NVL(cpi.deal_number,'X'), 'X', 'LOCAL_PRICE', cpi.deal_number), NVL(cpi.deal_number, prc.cip_price_src_id))  bd_number,
						item.CIT_CONFIG_ID config_id,
						prog.pgm_name pgm_name,    
						opt.cop_fusn_ord_status cop_fusn_ord_status,
						prc.cip_tx_curr_cd tx_currency_code,
						item.cit_cpm_svc_prov_emails cpm_svc_provider_emails,
						prc.CIP_SLA sla,
						DECODE (NVL (prc.cip_df_sla, 'N'), 'Y', prc.cip_sla, 'N', (SELECT ci2.cip_sla FROM cat_item_price ci2 WHERE ci2.cat_catalog_id = NVL (info.cat_parent_catalog_id, info.cat_catalog_id ) AND ci2.cit_src_prod = cbd_base_prod AND ROWNUM = 1) ) basesla,
						NVL(cbi.cbd_type_flag, 'C') cbd_type_flag,
						item.cit_pgm_key cit_pgm_key,
						decode(cpi.BOM_FRMT, 'VALUE', decode(NVL(prc.CIP_FFS_ID,(select ffs_id from cat_ffs where region_code = info.cat_region_code)), 'AP_DIRECT', 'EG_DIRECT', 'EU_DIRECT', 'EG_DIRECT', 'US_DIRECT', 'EG_DIRECT', 'CA_DIRECT', 'EG_DIRECT', 'LA_DIRECT', 'EG_DIRECT', 'GL_DIRECT', 'EG_DIRECT', NVL(prc.CIP_FFS_ID,(select ffs_id from cat_ffs where region_code = info.cat_region_code))), NVL(prc.CIP_FFS_ID,(select ffs_id from cat_ffs where region_code = info.cat_region_code))) fs_id,
						DECODE ( NVL(cpi.PRICE_SRC_TYPE, prc.CIP_PRICE_SRC_TYPE),
					             'PROMO', 'PROMO_TIER',
					             'PROMOFW', 'PROMO_TIERFW',
					             NVL(cpi.PRICE_SRC_TYPE, prc.CIP_PRICE_SRC_TYPE)
					            ) CIP_PRICE_SRC_TYPE,
						DECODE ( cbi.cbd_replaced_by, NULL, NULL, cbi.cbd_replaced_by || ' on ' || cbi.cbd_replaced_date) cbd_replaced_by,
						DECODE ( cbi.cbd_type_flag, 'Q', DECODE(cbi.cbd_replaced_by, NULL, DECODE (cbi.cbd_replacement_for, NULL, NULL, 'RT'), 'R'), NULL) config_replacement_status, 
						(select 'Y' from zero_price_option where base_prod = item.CIT_BASE_MODEL and rownum < 2) zero_price_option,                     
						prc.cip_status cip_status, 
						cbi.bdt_template_id bdt_template_id, cbi.cbd_base_prod cbd_base_prod,
						cat_util.get_epeat_desg(info.cat_catalog_id, opt.COP_LOCALIZE_PROD) epeat_desg,
						BE_CONTENT_FALLBACK.get_short_desc( info.cat_catalog_id, opt.cop_localize_prod ) short_desc,
				   		null datasheet_name
				  FROM    cat_info info, cat_item item, cat_item_options opt,
                          cat_price_descriptor pd, cat_item_price prc, products prod,
                          cat_program prog, config_permutation_info cpi, cat_bundle_info cbi
                  WHERE   'Y' = be_config_util.get_corona_read_flag('gui')
                  		  and ( {string1}
 						  and item.cit_config_id is not null
						  and UPPER(cpi.price_id(+)) = {?:priceMergeId} 
						   and cpi.ship_to_country = {?:cntryCode}
						  and prc.cit_src_prod = cpi.config_prod_id(+) 
						  and prc.cip_price_descriptor = cpi.price_descriptor(+) )
                  	)
                  	) a 
		) b
		where {sortByAndSortOrder}	
                 ]]>     
      </stmt> 
      
      <stmt id="stdCatalogSearch">
                <![CDATA[
                        SELECT /*+ ORDERED USE_NL(cat_info , cat_item ,cat_item_options ,cat_item_price , products) */
                               {id}:= cat_item_options.cop_opt_key,
                                {prodId}:= cat_item_options.COP_LOCALIZE_PROD,
                                {shortDesc}:= BE_CONTENT_FALLBACK.get_short_desc(cat_info.cat_catalog_id, cat_item_options.cop_localize_prod),
                                {netPriceD}:= cat_item_price.CIP_NET_PRICE,                         
                                {activityFlag}:= nvl(cat_item_options.COP_USR_DEF_ACT_FLAG,'U'),
                                {validationStatus}:= cat_item_options.COP_VALID_STATUS,
                                {productLine}:= products.pl,
                                {bundleFlag}:=nvl(cat_item.cit_bundle_flag,'S')
                        FROM    cat_info , cat_item , cat_item_options ,
                                cat_item_price , products                                    
                        WHERE   {string1}
                      ]]>       
      </stmt>
      
      <stmt id="gsaCatalogSearch">
        <![CDATA[
                  SELECT /*+ ORDERED USE_NL(info , item ,pd, prc , opt ,prod, prog) */ 
                          {source}:= item.cit_source source,
                          {id}:= opt.cat_item_key,
                          {contextID}:= item.cit_context_id context_id,
                          {crossSellAvail}:= item.CIT_CS_AVAIL_FLAG cross_sell_avail_flag,
                          {FFsID}:= prc.cip_ffs_id fs_id,                          
                          {showHideFlag}:= item.CIT_SHOW_HIDE_FLAG,
                          {locOptFlag}:= prod.LOC_OPT_FLAG,
                          {deleteFlag}:= item.CIT_DELETE_FLAG,
                          {prodId}:= item.CIT_BASE_MODEL prodId,                          
                          {srcProd}:= item.CIT_SRC_PROD,
                          {optBaseModel}:= opt.COP_BASE_MODEL,
                          {optLocalizeProd}:= opt.COP_LOCALIZE_PROD,
                          {cntryCode}:= opt.COP_CNTRY_CODE,
                          {validationStatus}:= opt.COP_VALID_STATUS,
                          {partType}:= item.CIT_PART_TYPE part_type,
                          {casualBuyFlag}:= nvl(item.CIT_CONTRACT_IDENTIFIER,'Contract') contract_identifier,
                          {netPriceD}:= prc.CIP_NET_PRICE net_price,
                          {bundleFlag}:= NVL(item.CIT_BUNDLE_FLAG, 'S'),
                          {mfgPartID}:= prod.mfg_part_id,                          
                          {lastModifiedDateD}:= item.CIT_LAST_MODIFIED_DATE LAST_MODIFIED_DATE,
                          {productLine}:= prod.pl pl,
                          {bdID}:= prc.CIP_PRICE_SRC_ID bd_number,
                          {shortDesc}:= gsa.PROD_DESC short_desc,
                          {configID}:= item.CIT_CONFIG_ID config_id,
                          {pgmName}:= prog.pgm_name pgm_name,    
                          {txCurrencyCode}:= prc.cip_tx_curr_cd tx_currency_code,
                          {cpmSvcProviderEmails}:= item.cit_cpm_svc_prov_emails cpm_svc_provider_emails,
                          {pgmSLA}:= prc.CIP_SLA sla,
                          {programKey}:= item.cit_pgm_key,
                          {FFsID}:= NVL(prc.CIP_FFS_ID,(select ffs_id from cat_ffs where region_code = info.cat_region_code)),
                          {priceSource}:= prc.CIP_PRICE_SRC_TYPE,
                          {coo}:=GSA.COO,
			  {sin}:=NVL(GSA.SUBSIN,GSA.SIN),
			  {warrNumber}:=nvl(GSA.WARR_NUMBER,0),
			  {warrPeriod}:=GSA.WARR_PERIOD,
			  {mfgName}:=GSA.MFG_NAME,
			  {imageName}:=GSA.IMAGE_NAME
                  FROM    cat_info info, cat_item item, cat_item_options opt,
                          cat_price_descriptor pd, cat_item_price prc, products prod,
                          cat_program prog, GSA_STG_CATALOG gsa
                  WHERE   {string1}
                ]]>     
      </stmt>

      <stmt id="getAPDVldPrcOnlineUsedProdWithOption">
              <![CDATA[
                        
                SELECT      {localPriceD}:= prc.cip_local_price,                
                            {netPriceD}:= prc.CIP_NET_PRICE,
                            {prodId}:= opt.COP_LOCALIZE_PROD, 
                            {cntryCode}:= opt.COP_CNTRY_CODE,
                            {id}:= item.cit_item_key,
                            {contextID}:= item.cit_context_id,
                            {FFsID}:= prc.CIP_FFS_ID,
                            {lastModifiedDateD}:= opt.COP_LAST_MODIFIED_DATE,
                            {longDesc}:=BE_CONTENT_FALLBACK.get_long_desc(info.cat_catalog_id, opt.cop_localize_prod),
                            {bundleFlag}:= item.cit_bundle_flag,                            
                            {supplierID}:= info.CAT_SUPPLIER_ID,
                            {priceEndDateD}:= prc.CIP_PRICE_END_DATE,
                            {validationStatus}:= opt.COP_VALID_STATUS,
                            {supplierName}:= sup.SUPPLIER_NAME,
                            {dealPriceD}:= prc.CIP_DEAL_PRICE,
                            {mfg}:= NVL(item.CIT_DF_MFG, prod.MFG),
                            {shortDesc}:= BE_CONTENT_FALLBACK.get_short_desc(info.cat_catalog_id, opt.cop_localize_prod),
                            {priceDescriptor}:= prc.cip_price_descriptor,
                            {programKey}:=item.CIT_PGM_KEY
                                
                        FROM cat_info info, CAT_ITEM_OPTIONS opt, cat_item item, 
                             cat_item_price prc,
                            products prod, supplier_info sup
                                
                WHERE   info.CAT_CATALOG_ID = {?:catalogID}
                  and   item.CAT_CATALOG_ID = info.CAT_CATALOG_ID
                  and   opt.CAT_CATALOG_ID = item.CAT_CATALOG_ID
                  and   opt.CAT_ITEM_KEY   = item.CIT_ITEM_KEY            
                  and   prc.CIT_PRICE_ITEM_KEY = item.CIT_PRICE_ITEM_KEY            
                  and   prc.CIP_PRICE_DESCRIPTOR = {?:priceDescriptor}
                  and   NVL(prc.CIP_ZONE_DESCRIPTOR, 0) = NVL({?:zonePriceDescriptor}, 0)                 
                  and   prc.CIP_NET_PRICE is NOT NULL  
                  and   prod.PROD = item.CIT_SRC_PROD
                  and   sup.SUPPLIER_ID = info.CAT_SUPPLIER_ID                    
               ]]>      
      </stmt>
      
      <stmt id="getAPDOnlineUsedProdWithOption">
            <![CDATA[
                        
                SELECT    {localPriceD}:= prc.cip_local_price,                    
                          {netPriceD}:= prc.CIP_NET_PRICE,
                          {prodId}:= opt.COP_LOCALIZE_PROD, 
                          {cntryCode}:= opt.COP_CNTRY_CODE,
                          {id}:= item.cit_item_key,
                          {contextID}:= item.cit_context_id,
                          {FFsID}:= prc.CIP_FFS_ID,
                          {lastModifiedDateD}:= opt.COP_LAST_MODIFIED_DATE,
                          {longDesc}:=BE_CONTENT_FALLBACK.get_long_desc(info.cat_catalog_id, opt.cop_localize_prod),
                          {bundleFlag}:= item.cit_bundle_flag,                  
                          {supplierID}:= info.CAT_SUPPLIER_ID,
                          {priceEndDateD}:= prc.CIP_PRICE_END_DATE,
                          {validationStatus}:= opt.COP_VALID_STATUS, 
                          {supplierName}:= sup.SUPPLIER_NAME,
                          {dealPriceD}:= prc.CIP_DEAL_PRICE,
                          {mfg}:= NVL(item.CIT_DF_MFG, prod.MFG),
                          {shortDesc}:=BE_CONTENT_FALLBACK.get_short_desc(info.cat_catalog_id, opt.cop_localize_prod),
                          {priceDescriptor}:= prc.cip_price_descriptor,
                          {programKey}:=item.CIT_PGM_KEY
                                
                FROM     cat_info info, cat_item item, CAT_ITEM_OPTIONS opt, 
                         cat_item_price prc,
                         products prod, supplier_info sup
                                
                WHERE   info.CAT_CATALOG_ID = {?:catalogID}
                and     item.CAT_CATALOG_ID = info.CAT_CATALOG_ID       
                and     opt.CAT_CATALOG_ID = item.CAT_CATALOG_ID                  
                and     opt.CAT_ITEM_KEY   = item.CIT_ITEM_KEY
                and     prc.CIT_PRICE_ITEM_KEY = item.CIT_PRICE_ITEM_KEY            
                and     prc.CIP_PRICE_DESCRIPTOR = {?:priceDescriptor}
                and     NVL(prc.CIP_ZONE_DESCRIPTOR, 0) = NVL({?:zonePriceDescriptor}, 0)
                and     prod.PROD = item.CIT_SRC_PROD
                and     sup.SUPPLIER_ID = info.CAT_SUPPLIER_ID                                          
             ]]>        
      </stmt>
      
      <stmt id="getOnlineUsedProdWithOption">
          <![CDATA[
                SELECT  /*+ ORDERED USE_NL(info , item, opt, prc, prod, sup ) */ 
                        {netPriceD}:= prc.cip_net_price,
                        {dealPriceD}:= prc.cip_deal_price,
                        {priceEndDateD}:= prc.CIP_PRICE_END_DATE,
                        {supplierID}:= sup.supplier_id,
                        {supplierName}:=sup.supplier_name,
                        {mfg}:= nvl(item.CIT_DF_MFG,prod.mfg),
                        {mfgURL}:= nvl(item.CIT_DF_MFG_URL,prod.mfg_url),
                        {srt}:=nvl(item.CIT_DF_SRT, prod.srt),
                        {imageName}:= BE_CONTENT_FALLBACK.get_image_url(info.cat_catalog_id, opt.cop_localize_prod),
                        {longDesc}:= BE_CONTENT_FALLBACK.get_long_desc(info.cat_catalog_id, opt.cop_localize_prod),
                        {shortDesc}:= BE_CONTENT_FALLBACK.get_short_desc(info.cat_catalog_id, opt.cop_localize_prod),
                        {dataSheetName}:= BE_CONTENT_FALLBACK.get_datasheet_url(info.cat_catalog_id, opt.cop_localize_prod),
                        {lastModifiedDateD}:= item.cit_last_modified_date,
                        {prodId}:= opt.COP_LOCALIZE_PROD,
                        {cntryCode}:= opt.COP_CNTRY_CODE,
                        {id}:= item.cit_item_key,
                        {contextID}:= item.cit_context_id,
                        {supplierURL}:= nvl(item.CIT_DF_SUPPLIER_URL, prod.supplier_url),
                        {uom}:= prod.uom,
                        {FFsID}:= prc.cip_ffs_id,
                        {validationStatus}:= opt.COP_VALID_STATUS
              
                        FROM    cat_info info, cat_item item, CAT_ITEM_OPTIONS opt,
                                cat_item_price prc, 
                                products prod, supplier_info sup
                                        
                        WHERE info.CAT_CATALOG_ID = {?:catalogID}
                        and   item.CAT_CATALOG_ID = info.CAT_CATALOG_ID                 
                        and   opt.CAT_ITEM_KEY   = item.CIT_ITEM_KEY
                        and   item.CIT_DELETE_FLAG = 'N'
                        and   item.CIT_EXCLUDE_FLAG = 'N'                       
                        and   prc.CIT_PRICE_ITEM_KEY = item.CIT_PRICE_ITEM_KEY      
                        and   prc.CIP_PRICE_DESCRIPTOR = {?:priceDescriptor}
                        and   NVL(prc.CIP_ZONE_DESCRIPTOR, 0) = NVL({?:zonePriceDescriptor}, 0)
                        and   prod.PROD = item.CIT_SRC_PROD
                        and   sup.supplier_id = nvl(info.cat_supplier_id, '149761140')           
           ]]>  
      </stmt>
      
      <stmt id="getVldPrcOnlineUsedProdWithOption">
        <![CDATA[
              SELECT    /*+ ORDERED USE_NL(info , item, opt, prc, prod, sup ) */ 
                        {netPriceD}:= prc.cip_net_price,
                        {dealPriceD}:= prc.cip_deal_price,
                        {priceEndDateD}:= prc.CIP_PRICE_END_DATE,
                        {supplierID}:= sup.supplier_id,
                        {supplierName}:=sup.supplier_name,
                        {mfg}:= nvl(item.CIT_DF_MFG,prod.mfg),
                        {mfgURL}:= nvl(item.CIT_DF_MFG_URL,prod.mfg_url),
                        {srt}:=nvl(item.CIT_DF_SRT, prod.srt),
                        {imageName}:= BE_CONTENT_FALLBACK.get_image_url(info.cat_catalog_id, opt.cop_localize_prod),
                        {longDesc}:= BE_CONTENT_FALLBACK.get_long_desc(info.cat_catalog_id, opt.cop_localize_prod),
                        {shortDesc}:= BE_CONTENT_FALLBACK.get_short_desc(info.cat_catalog_id, opt.cop_localize_prod),
                        {dataSheetName}:= BE_CONTENT_FALLBACK.get_datasheet_url(info.cat_catalog_id, opt.cop_localize_prod),
                        {lastModifiedDateD}:= item.cit_last_modified_date,
                        {prodId}:= opt.COP_LOCALIZE_PROD,
                        {cntryCode}:= opt.COP_CNTRY_CODE,
                        {id}:= item.cit_item_key,
                        {contextID}:= item.cit_context_id,
                        {supplierURL}:= nvl(item.CIT_DF_SUPPLIER_URL, prod.supplier_url),
                        {uom}:= prod.uom,
                        {FFsID}:= prc.cip_ffs_id,
                        {validationStatus}:= opt.COP_VALID_STATUS
              
                        FROM    cat_info info, cat_item item, CAT_ITEM_OPTIONS opt,
                                cat_item_price prc,
                                products prod, supplier_info sup
                                        
                        WHERE info.CAT_CATALOG_ID = {?:catalogID}
                        and   item.CAT_CATALOG_ID = info.CAT_CATALOG_ID                 
                        and   opt.CAT_ITEM_KEY   = item.CIT_ITEM_KEY
                        and   item.CIT_DELETE_FLAG = 'N'
                        and   item.CIT_EXCLUDE_FLAG = 'N'                       
                        and   prc.CIT_PRICE_ITEM_KEY = item.CIT_PRICE_ITEM_KEY      
                        and   prc.CIP_PRICE_DESCRIPTOR = {?:priceDescriptor}
                        and   NVL(prc.CIP_ZONE_DESCRIPTOR, 0) = NVL({?:zonePriceDescriptor}, 0)                                         
                        and   prc.CIP_NET_PRICE is not NULL
                        and   prod.PROD = item.CIT_SRC_PROD
                        and   sup.supplier_id = nvl(info.cat_supplier_id, '149761140')       
         ]]>    
      </stmt>

     <stmt id="getCatalogItem">
                <![CDATA[
                      SELECT  
                              {prodId}:= item.cit_base_model,
                              {cntryCode}:= opt.COP_CNTRY_CODE,
                              {id}:=item.cit_item_key,
                              {catalogID}:= item.cat_catalog_id,
                              {shortDesc}:= BE_CONTENT_FALLBACK.get_short_desc(info.cat_catalog_id,opt.cop_localize_prod) AS SHORT_DESC,                                                                                   
                              {longDesc}:= BE_CONTENT_FALLBACK.get_long_desc(info.cat_catalog_id,opt.cop_localize_prod) AS LONG_DESC,
                              {uom}:= prod.uom,
                              {netPriceD}:= prc.CIP_NET_PRICE,                        
                              {dataSheetName}:= null AS DATASHEET_NAME,
                              {imageName}:= BE_CONTENT_FALLBACK.get_image_url(info.cat_catalog_id,opt.cop_localize_prod) AS IMAGE_NAME,
                              {supplierID}:= sup.supplier_id,
                              {supplierPartID}:= prod.supplier_part_id,
                              {supplierName}:= sup.supplier_name,
                              {supplierURL}:= nvl(item.CIT_DF_SUPPLIER_URL, prod.supplier_url) AS SUPPLIER_URL,
                              {mfg}:= nvl(prod.mfg, 'HP') AS MFG_NAME,
                              {mfgPartID}:= prod.mfg_part_id,
                              {mfgURL}:= nvl(item.CIT_DF_MFG_URL,prod.mfg_url) AS MFG_URL,
                              {priceEndDateD}:=prc.CIP_PRICE_END_DATE,
                              {priceEffDateD}:= prc.cip_price_start_date,
                              {contextID}:= item.cit_context_id,
                              {contextName}:= item.cit_context_name,
                              {source}:= item.cit_source,
                              {bundleFlag}:= item.cit_bundle_flag,
                              {priceDescriptor}:= prc.cip_price_descriptor,
                              {showHideFlag}:= item.cit_show_hide_flag,
                              {txCurrencyCode}:= prc.cip_tx_curr_cd,
                              {cpmSvcProviderEmails}:= item.cit_cpm_svc_prov_emails,
                              {pgmSLA}:= prc.CIP_SLA,
                              {programKey}:= item.cit_pgm_key,
                              {FFsID}:= NVL(prc.CIP_FFS_ID,(select ffs_id from cat_ffs where region_code = info.cat_region_code)) AS FFS_ID,
                              {hpLangCode}:= info.CAT_HP_LANG_CODE,
                              {priceChangeReason}:= (select CPS_PRICE_CHANGE_REASON from cat_item_price_source where
                              CIT_PRICE_ITEM_KEY =  item.CIT_PRICE_ITEM_KEY and   
                                               CPS_PRICE_SRC_TYPE = 'CUSTOM') AS PRICE_CHANGE_REASON
                              
                        FROM   cat_info info, cat_item item, cat_item_options opt, 
                               cat_item_price prc, 
                               products prod, supplier_info sup
                                                                
                        WHERE  item.CIT_ITEM_KEY = {?:id}
                        and    info.cat_catalog_id = item.cat_catalog_id
                        and    opt.cat_item_key = item.CIT_ITEM_KEY
                        and    prc.CIT_PRICE_ITEM_KEY = item.CIT_PRICE_ITEM_KEY 
                        and    prc.CIP_PRICE_DESCRIPTOR = {?:priceDescriptor}
                        and    NVL(prc.CIP_ZONE_DESCRIPTOR, 0) = NVL({?:zonePriceDescriptor}, 0)                        
                        and    prod.PROD = item.CIT_SRC_PROD
                        and    sup.supplier_id = nvl(info.cat_supplier_id, '149761140')
                        
                 ]]>    
      </stmt>
      
      
      <stmt id="getStdItem">
                <![CDATA[
                      SELECT /*+ ORDERED USE_NL(opt ,item, info,  prc , prod) */ 
                              {id}:= opt.cat_item_key,  
                              {prodId}:= opt.COP_LOCALIZE_PROD,
                              {source}:= item.cit_source,
                              {mfg}:= nvl(prod.mfg, 'HP'),
                              {cpmSvcProviderEmails}:= item.cit_cpm_svc_prov_emails,
                              {hpLangCode}:= info.cat_hp_lang_code,
                              {shortDesc}:= BE_CONTENT_FALLBACK.get_short_desc(info.cat_catalog_id,opt.COP_LOCALIZE_PROD),                                                                                   
                              {longDesc}:= BE_CONTENT_FALLBACK.get_long_desc(info.cat_catalog_id,opt.COP_LOCALIZE_PROD),
                              {dataSheetName}:= BE_CONTENT_FALLBACK.get_datasheet_url(info.cat_catalog_id,opt.COP_LOCALIZE_PROD),
                              {imageName}:= BE_CONTENT_FALLBACK.get_image_url(info.cat_catalog_id,opt.COP_LOCALIZE_PROD),
                              {mfgPartID}:= prod.mfg_part_id,
                              {supplierURL}:= nvl(item.CIT_DF_SUPPLIER_URL, prod.supplier_url),
                              {srt}:= prc.CIP_SLA,
                              {priceDescriptor}:=prc.cip_price_descriptor
                              
                        FROM   cat_item_options opt, cat_item item, cat_info info,
                               cat_item_price prc, products prod
                                                                
                        WHERE  opt.COP_OPT_KEY = {?:id}
                        and    item.cit_item_key = opt.CAT_ITEM_KEY
                        and    info.cat_catalog_id = item.cat_catalog_id
                        and    prc.CIT_PRICE_ITEM_KEY(+) = item.CIT_PRICE_ITEM_KEY 
						and    nvl(prc.CIP_PRICE_DESCRIPTOR,nvl({?:priceDescriptor},'0') ) = nvl({?:priceDescriptor}, '0')                       
                        and    prod.PROD = opt.COP_LOCALIZE_PROD
                        
                 ]]>    
      </stmt>
      
      
    <stmt id="getStdItemQckMng">
                <![CDATA[
                SELECT /*+ ORDERED USE_NL(pll ,lp, prod) */
                        {prodId}:= pll.prod,
                        {source}:= prod.source,
                        {mfg}:= prod.mfg,
                        {hpLangCode}:= pll.hp_lang_cd,
                        {shortDesc}:= pll.SHORT_DESC,
                        {longDesc}:= pll.LONG_DESC,
                        {dataSheetName}:= pll.datasheet_name,
                        {imageName}:= pll.image_name,
                        {mfgPartID}:= prod.mfg_part_id,
                        {supplierURL}:= prod.SUPPLIER_URL,
                        {priceDescriptor}:=lp.price_descriptor

                        FROM prod_local_lang pll,
                        products prod,
                        local_price lp
                        WHERE  prod.PROD = {?:prodId}
                        and prod.PROD = pll.PROD
                        and pll.HP_LANG_CD = '99'
                        and prod.PROD = lp.PROD
                        and lp.price_descriptor ={?:priceDescriptor}
                 ]]>
    </stmt>
      

      
      <stmt id="getBdNumber">
        <![CDATA[
              SELECT  
                      {bdNumber}:= deal_id                    
              FROM    cat_deal_mapping
              WHERE    cat_catalog_id = {?:catalogID}
            
            
         ]]>    
      </stmt>
      <stmt id="getItemWithCustomPrice">
        <![CDATA[
              SELECT  
                      {id}:= opt.CAT_ITEM_KEY,
                      {prodId} := opt.COP_LOCALIZE_PROD,
                      FROM    cat_item_options opt, cat_item_price_source psrc
              WHERE   opt.cat_catalog_id = {?:catalogID}
              AND     psrc.cat_catalog_id = opt.cat_catalog_id
              AND     psrc.CPS_PRICE_SRC_TYPE = 'CUSTOM'
            
            
         ]]>    
      </stmt>
      <stmt id="masterUpdateProdCtxNameSP">
                         call Fe_Modify_Mst_Prod.m_master_show_hide (
                             {i:id},
                             {i:showHideFlag},
                             {i:lastModifiedBy},
                             {o:returnStatus})
      </stmt>
      <stmt id="masterUpdateProdOptionsSP">
                        call Localize_product.updateMasterUserOptions (
                           {i:id},
               {i:optionsList|IN_OPT_ARRAY},
               {i:prodId},
               {i:lastModifiedBy},
                       {o:returnStatus})
      </stmt>

        <stmt id="masterUpdateProdSP">
                        call be_master_item.is_locprod_in_stdcat (
                           {i:id},
               {i:optionsList|IN_OPT_ARRAY},
               {i:prodId},
               {i:lastModifiedBy},
               {o:returnMessage},
                       {o:returnStatus})
      </stmt>
      
    <stmt id="validateProductCatalog">
              call LOCALIZE_PRODUCT.VALIDATE_PRODUCT_CATALOG (               
           {i:prodId},
           {i:catalogID},
		   {i:itemKey},
		   {i:lastModifiedBy},
		   {i:omHeaderFlag},
		   {i:lclpHeaderFlag},
		   {i:plcHeaderFlag},
           {o:returnStatus},
           {o:returnMessage}
           )
    </stmt>
    <stmt id="validatePlcProductCatalog">
              call BE_PLC_ORDERABILITY.VALIDATE_CATALOG_STG (               
           {i:catalogID},
           {o:returnStatus},
           {o:returnMessage}
           )
    </stmt>
    <stmt id="validateLclpProductCatalog">
              call LOCALIZE_PRODUCT.ASSIGNLOCALPRODUCTS (               
           {i:catalogID},
           {o:returnStatus}
           )
    </stmt>

    <stmt id="validateAllProductCatalog">
              call LOCALIZE_PRODUCT.VALIDATE_ALL_PRODUCT_CATALOG (               
           {i:catalogID},
           {o:returnStatus},
           {o:returnMessage}
           )
    </stmt>

      <stmt id="masterUpdateProductSP">
                      call Fe_Modify_Mst_Prod.m_master_product_other (
                         {i:id},
                         {i:prodId},
                         {i:catalogID},
                         {i:lastModifiedBy}
                         {i:options},
                         {i:uom}
                         {i:srt},
                         {i:mfgPartId},
                         {i:mfg}
                         {i:mfgURL},
                         {i:supplierID},
                         {i:supplierPartId}
                         {i:supplierName},
                         {i:supplierURL})
      </stmt>
      <stmt id="masterAddProductSP">
              call Fe_Add_Del_Mst_Prod.add_prod_before_pricing (
                 {i:prodId},
                 {i:catalogID},
                 {i:bundleFlag},
                 {i:lastModifiedBy},
                 {i:regionCode},
                 {o:returnStatus})
      </stmt>
      
           
      <stmt id="masterDeleteProductSP">
              call Fe_Add_Del_Mst_Prod.D_MASTER_PRODUCT (
                 {i:id},
                 {i:deleteFlag},
                 {i:lastModifiedBy},
                 {o:returnStatus})
      </stmt>
      
      <stmt id="masterUpdatePriceSP">
              call Fe_Modify_Mst_Prod.M_MASTER_PRODUCT_PRICE (
                 {i:id},
                 {i:catalogID},
                 {i:netPriceD},
                 {i:currDate},
                 {i:priceEndDateD},
                 {i:lastModifiedBy}
                 {i:bomFlag},
                 {i:prodId},
                 {i:contextID},
                 {i:source},
                 {i:priceChangeReason})
      </stmt>
      
      <stmt id="CheckCatalogProdAvail">
              call FE_PROD.chkCatProdAvail (
                 {i:prodId},
                 {i:catalogIds|CATIDS},
                 {o:catalogIds|CATIDS})
      </stmt>
      
      <stmt id="DeleteCatalogProductSP">
              call Fe_Prod.Del_Cat_Product (
                 {i:id},
                 {i:deleteFlag},
                 {i:lastModifiedBy},
                 {o:returnStatus})
      </stmt>
      <stmt id="UpdateCatalogOptionsSP">
              call Localize_product.updateUserOptions (
                 {i:id},
                 {i:optionsList|IN_OPT_ARRAY},
                 {i:prodId},
                 {i:lastModifiedBy},
                 {o:returnStatus})
      </stmt>
      <stmt id="UpdateCatalogSP">
               call BE_MASTER_ITEM.is_locprod_in_cat (
           {i:id},
           {i:optionsList|IN_OPT_ARRAY},
           {i:prodId},
           {i:lastModifiedBy},
           {o:returnStatus})
      </stmt>
<!-- Added to solve the pagination problem-->
<!-- Chardornney: Removed the PLC fallback logic.- DKMankotia -->
  <stmt id="getCatalogProdAtt">
        <![CDATA[
        		select * from (
							select a.*,rownum as ttt from (
                  	SELECT
								{source}:= cat_item.cit_source source,
								{id}:= cat_item_options.cop_opt_key,
                                {prodId}:= cat_item_options.COP_LOCALIZE_PROD,
                                {shortDesc}:= BE_CONTENT_FALLBACK.get_short_desc(cat_info.CAT_CATALOG_ID, cat_item_options.cop_localize_prod) shortDesc,
                                {netPriceD}:= cat_item_price.CIP_NET_PRICE CIP_NET_PRICE1,    
                                {netPrice}:= cat_item_price.CIP_NET_PRICE CIP_NET_PRICE2,   
                                {netPriceSource}:= cat_item_price.CIP_PRICE_SRC_ID,   
                                {cntryCode}:={?:cntryCode},                             
                                {localPriceD}:=cat_item_price.CIP_LOCAL_PRICE CIP_LOCAL_PRICE1,
                                {localPrice}:=cat_item_price.CIP_LOCAL_PRICE CIP_LOCAL_PRICE2,
                                {activityFlag}:= nvl(cat_item_options.COP_USR_DEF_ACT_FLAG,'U'),
                                {validationStatus}:= cat_item_options.COP_VALID_STATUS,
                                {productLine}:= products.pl,
								{priceStatus}:= (select pip_status from profile_item_price where pip_key = 'P^'||{?:profileId}||'^'||cat_item.cit_src_prod||'^'||cat_item.cit_context_id||'^'||'^'||cat_item.cit_bundle_flag||'^'||{?:priceDescriptor}),
                                {bundleFlag}:=nvl(cat_item.cit_bundle_flag,'S') as bundleFlag,
			   				    {bdlTemplateId}:=(select bdt_template_id from cat_bundle_info where 
								cat_catalog_id=NVL(cat_info.CAT_PARENT_CATALOG_ID,cat_info.CAT_CATALOG_ID) 
					  		    and cbd_id=cat_item.CIT_SRC_PROD),
                                {ctgProdId}:=(select PRODUCT_NUMBER from PLC_INHERITANCE_MERGE where country_code={?:cntryCode} and product_number=cat_item_options.COP_LOCALIZE_PROD),
                                {eolDate}:=(select END_OF_LIFE_DATE from PLC_INHERITANCE_MERGE where country_code={?:cntryCode} and product_number=cat_item_options.COP_LOCALIZE_PROD),
                                {discontinueDate}:=(select DISCONTINUED_DATE from PLC_INHERITANCE_MERGE where country_code={?:cntryCode} and product_number=cat_item_options.COP_LOCALIZE_PROD),
				{gaDate}:=(select PRODUCT_RELEASE_DATE from PLC_INHERITANCE_MERGE where country_code={?:cntryCode} and product_number=cat_item_options.COP_LOCALIZE_PROD),
				{esDate}:=(select MARKETING_OBSOLETE_DATE from PLC_INHERITANCE_MERGE where country_code={?:cntryCode} and product_number=cat_item_options.COP_LOCALIZE_PROD),
				{replProdInfo}:=(select REPLACEMENT_PRODUCT from PLC_INHERITANCE_MERGE where country_code={?:cntryCode} and product_number=cat_item_options.COP_LOCALIZE_PROD),
                                {skipFusionValidation}:=cat_item_options.cop_skip_fusn_ord,
                                {fusionStatus}:=cat_item_options.cop_fusn_ord_status,
                                {skipPlcValidation}:=cat_item_options.cop_skip_plc_ord,
                                {plcStatus}:=cat_item_options.cop_plc_ord_status,
                                {skipLclpValidation}:=cat_item_options.cop_skip_lclp_ord,
                                {lclpStatus}:=cat_item_options.cop_lclp_ord_status,
								{priceDescriptor}:=cat_item_price.cip_price_descriptor,
								{configFlag}:=(select NVL(CBD_TYPE_FLAG,'C') from cat_bundle_info where cbd_id=cat_item.CIT_SRC_PROD and rownum=1) as configFlag,
								{itemKey}:=cat_item_options.cat_item_key,
								{dchainCode}:=orderability_master.om_dchain_code,
    								{description}:=fusion_constraint_details.description 
		FROM   cat_info , cat_item , cat_item_options ,
		       cat_item_price ,products,
			 orderability_master,
			 fusion_constraint_details
		WHERE  {string1} and cat_item_options.COP_LOCALIZE_PROD = orderability_master.OM_PROD(+)
		and orderability_master.OM_CNTRY_CD(+) = 
		decode({q:regionCode},
		   'GL', 
		decode( cat_util.get_region_for_cntry({?:cntryCode}), 'EU', 'EU', {?:cntryCode}), 
		   'EU', 
		{q:regionCode},
		{?:cntryCode})
		and fusion_constraint_details.CONSTRAINT_CODE(+) = orderability_master.OM_DCHAIN_CODE
		) a 
		) b
		where {sortByAndSortOrder}
        ]]>  
    </stmt>    
    
<!-- default price descriptor for Standard Catalog Promo bundles USUSDDP is linked to BE_BUNDLE_PRS.create_std_promo_cat() -->
<stmt id="getCatalogPromoBundles">
        <![CDATA[
            SELECT              {id}:= cat_item_options.cop_opt_key,
                                {prodId}:= cat_item_options.COP_LOCALIZE_PROD,
                                {catalogID}:= cat_stdcat_mapping.STD_CATALOG_ID,
                                {shortDesc}:= BE_CONTENT_FALLBACK.get_short_desc(cat_info.cat_catalog_id,cat_item_options.COP_LOCALIZE_PROD) shortDesc,
                              	{priceDescriptor}:=nvl(cat_item_price.CIP_PRICE_DESCRIPTOR,'USUSDDP') priceDescriptor,
                               	{netPriceD}:= cat_item_price.CIP_NET_PRICE,   
                                {netPriceSource}:= cat_item_price.CIP_PRICE_SRC_ID,                                
                                {activityFlag}:= nvl(cat_item_options.COP_USR_DEF_ACT_FLAG,'U') activityFlag,
                                {validationStatus}:= cat_item_options.COP_VALID_STATUS
                        FROM    cat_info , cat_item , cat_item_options ,
                                cat_item_price , cat_stdcat_mapping 
                        WHERE  
                       		 	cat_item.cat_catalog_id  = cat_info.cat_catalog_id 
 							 	and cat_item_options.cat_item_key = cat_item.cit_item_key 
 								and cat_item_price.CIT_PRICE_ITEM_KEY(+) = cat_item.CIT_PRICE_ITEM_KEY 
 								and cat_item.cit_bundle_flag = 'B'
 								and cat_stdcat_mapping.std_catalog_id = cat_info.cat_catalog_id 
 								and exists (select 1 from cat_bundle_info cbi
	                     			 		where cbd_id = cat_item_options.COP_LOCALIZE_PROD 
						    				AND exists (select 1 from bdl_template_info 
								         	    where bdt_id = cbi.bdt_template_id 
										  		AND bdt_type = 'PROMO' 
										   		AND bdt_auto_flag ='Y'
										   		AND bdt_cust_flag='N')) 
							    {string1} 
        ]]>  
    </stmt>

    <stmt id="getTotalStdCatalogItemCount">
       <![CDATA[
        select /*+ ORDERED USE_NL(cat_info , cat_item ,cat_item_options ,cat_item_price , products) */ {totalCount}:=count(1)
        FROM   cat_info , cat_item , cat_item_options ,
               cat_item_price , products,
               ( select PRODUCT_RELEASE_DATE, END_OF_LIFE_DATE, DISCONTINUED_DATE, MARKETING_OBSOLETE_DATE, REPLACEMENT_PRODUCT, PRODUCT_NUMBER CTG_PROD 
		 FROM PLC_INHERITANCE_MERGE WHERE country_code = {?:cntryCode}) v_ctg_prod_att
        WHERE  {string1} and cat_item_options.COP_LOCALIZE_PROD = v_ctg_prod_att.CTG_PROD(+)
         ]]> 
     </stmt>
     
<!--	Added 2 of the following stmts in order to fetch product for Catalog Product Offering. 
	These stmts will be used when there is atleast one Price Profile Id associated with the std catalog.
	-Raghavendra -->
<!-- Chardornney: Removed the PLC fallback logic.- DKMankotia -->	
  <stmt id="getCatalogProdAtt_PIP">
        <![CDATA[
       
       select * from (
			select a.*,rownum as ttt from (
              SELECT             
{source}:= cat_item.cit_source source,
 {id}:= cat_item_options.cop_opt_key,
                                {prodId}:= cat_item_options.COP_LOCALIZE_PROD,
                                {shortDesc}:=  BE_CONTENT_FALLBACK.get_short_desc(cat_info.CAT_CATALOG_ID, cat_item_options.cop_localize_prod) shortDesc,
                                {netPriceD}:= profile_item_price.PIP_NET_PRICE CIP_NET_PRICE1 ,   
                                {netPrice}:= profile_item_price.PIP_NET_PRICE CIP_NET_PRICE2 ,   
                                {netPriceSource}:= profile_item_price.PIP_PRICE_SRC_TYPE,
                                {cntryCode}:={?:cntryCode},    
                                {localPriceD}:=profile_item_price.PIP_LOCAL_PRICE CIP_LOCAL_PRICE1,
                                {localPrice}:=profile_item_price.PIP_LOCAL_PRICE CIP_LOCAL_PRICE,
                                {activityFlag}:= nvl(cat_item_options.COP_USR_DEF_ACT_FLAG,'U'),
                                {validationStatus}:= cat_item_options.COP_VALID_STATUS,
                                {productLine}:= products.pl,
								{priceStatus}:= profile_item_price.pip_status,
                                {bundleFlag}:=nvl(cat_item.cit_bundle_flag,'S'),
			   				    {bdlTemplateId}:=(select bdt_template_id from cat_bundle_info where 
								cat_catalog_id=NVL(cat_info.CAT_PARENT_CATALOG_ID,cat_info.CAT_CATALOG_ID)  
					  		    and cbd_id=cat_item.CIT_SRC_PROD and rownum = 1),
                                {ctgProdId}:=(SELECT PRODUCT_NUMBER FROM PLC_INHERITANCE_MERGE WHERE country_code={?:cntryCode} AND product_number=cat_item_options.COP_LOCALIZE_PROD), 
                                {eolDate}:=(SELECT END_OF_LIFE_DATE FROM PLC_INHERITANCE_MERGE WHERE country_code={?:cntryCode} AND product_number=cat_item_options.COP_LOCALIZE_PROD),
                                {discontinueDate}:=(SELECT DISCONTINUED_DATE FROM PLC_INHERITANCE_MERGE WHERE country_code={?:cntryCode} AND product_number=cat_item_options.COP_LOCALIZE_PROD),
				{gaDate}:=(SELECT PRODUCT_RELEASE_DATE FROM PLC_INHERITANCE_MERGE WHERE country_code={?:cntryCode} AND product_number=cat_item_options.COP_LOCALIZE_PROD),
 				{esDate}:=(SELECT MARKETING_OBSOLETE_DATE FROM PLC_INHERITANCE_MERGE WHERE country_code={?:cntryCode} AND product_number=cat_item_options.COP_LOCALIZE_PROD),
 				{replProdInfo}:=(SELECT REPLACEMENT_PRODUCT FROM PLC_INHERITANCE_MERGE WHERE country_code={?:cntryCode} AND product_number=cat_item_options.COP_LOCALIZE_PROD),
 				{skipFusionValidation}:=cat_item_options.cop_skip_fusn_ord,
                                {fusionStatus}:=cat_item_options.cop_fusn_ord_status,
                                {skipPlcValidation}:=cat_item_options.cop_skip_plc_ord,
                                {plcStatus}:=cat_item_options.cop_plc_ord_status,
                                {skipLclpValidation}:=cat_item_options.cop_skip_lclp_ord,
                                {lclpStatus}:=cat_item_options.cop_lclp_ord_status,
								{priceDescriptor}:=profile_item_price.Pip_price_descriptor,
{configFlag}:=(select NVL(CBD_TYPE_FLAG,'C') from cat_bundle_info where cbd_id=cat_item.CIT_SRC_PROD and rownum=1),                                {itemKey}:=cat_item_options.cat_item_key
        FROM   cat_info , cat_item , cat_item_options ,
               profile_item_price , products
               WHERE  {string1}
      ) a 
		) b
		where {sortByAndSortOrder}
        ]]>  
    </stmt>

    <stmt id="getTotalStdCatalogItemCount_PIP">
       <![CDATA[
        select /*+ ORDERED USE_NL(cat_info , cat_item ,cat_item_options ,profile_item_price , products) */ {totalCount}:=count(1)
        FROM   cat_info , cat_item , cat_item_options ,
	       profile_item_price ,products,
	       ( select PRODUCT_RELEASE_DATE, END_OF_LIFE_DATE, DISCONTINUED_DATE, MARKETING_OBSOLETE_DATE, REPLACEMENT_PRODUCT, PRODUCT_NUMBER CTG_PROD 
		 FROM PLC_INHERITANCE_MERGE 
		 WHERE country_code = {?:cntryCode}) v_ctg_prod_att
        WHERE  {string1} and cat_item_options.COP_LOCALIZE_PROD = v_ctg_prod_att.CTG_PROD(+) 
         ]]>
     </stmt>     
          <!-- Added to solve the pagination problem-->


    
    <stmt id="getCatProdAtt">
        <![CDATA[
            select {prodId}:= prod,
                   {eolDate}:= eol_date,
                   {discontinueDate}:= discontinue_date                    
            from   ctg_prod_att 
            where  ctg_id = {?:ctgId}
            and    prod in ({@q:prodIdInList})
            and    country_code = {?:cntryCode}
        ]]>     
      </stmt>      
      <stmt id="getWarrantyInfo">
        <![CDATA[
            select {warrantyCode}:= warranty_code,
                   {warrantyDesc}:= warranty_desc,
                   {countryCode}:= country_code                   
            from   ctg_prod_att
            where  ctg_id = {?:ctgId}
            and    prod = {?:prodId}
            and    country_code = {?:cntryCode}
        ]]>     
      </stmt>
      <stmt id="getProdXmsAvail">
                <![CDATA[
                    call FE_PROD.getXmsAvailability (
                         {i:prodId},
                         {o:xmsAvailabilty|CAT_COUNTRY_TBL})
              ]]>       
      </stmt>
      <stmt id="updateActiveStatus">
                <![CDATA[
                    call FE_PROD.updateActiveStatus (
                        {i:keyList|CAT_ITEM_KEY_TBL}
                        )
                 ]]>    
      </stmt>
      <stmt id="getTotalNumByAlertPriority">
              <![CDATA[
                  SELECT/*+ ORDERED USE_NL(info , item, pd, prc, opt, alog , prod, sup) */ 
                        {totalCount}:=count(*)          
              
                        FROM    cat_info info, cat_item item, cat_price_descriptor pd, cat_item_price prc,
                                CAT_ITEM_OPTIONS opt, alert_log alog, 
                                products prod, supplier_info sup
                                        
                        WHERE info.CAT_CATALOG_ID = {?:catalogID}
                        and   item.CAT_CATALOG_ID = info.CAT_CATALOG_ID
                        and   pd.CAT_CATALOG_ID = item.CAT_CATALOG_ID
                        and   opt.CAT_CATALOG_ID = item.CAT_CATALOG_ID
                        and   opt.CAT_ITEM_KEY   = item.CIT_ITEM_KEY
                        and   item.CIT_DELETE_FLAG = 'N'
                        and   item.CIT_EXCLUDE_FLAG = 'N'                       
                        and   alog.catalog_id = item.cat_catalog_id
                        and   alog.alert_priority >= {?:alertPriority}
                        and   alog.catalog_item_key = item.CIT_ITEM_KEY
                        and   prc.CIT_PRICE_ITEM_KEY = item.CIT_PRICE_ITEM_KEY      
                        and   prc.CIP_PRICE_DESCRIPTOR = pd.CPD_PRICE_DESCRIPTOR
                        and   NVL(prc.CIP_ZONE_DESCRIPTOR, 0) = NVL(pd.CPD_ZONE_DESCRIPTOR, 0)
                        and   prod.PROD = item.CIT_SRC_PROD                                             
                        and   sup.supplier_id = nvl(info.cat_supplier_id, '149761140')  
              ]]>
      </stmt>  
          
          <stmt id="getTotalCatItemCount">
                        <![CDATA[
                select /*+ ORDERED USE_NL(info , item ,pd, prc , opt ,prod, prog) */{totalCount}:=count(distinct item.cit_item_key)
                FROM  cat_info info, cat_item item, cat_item_options opt,
                    cat_price_descriptor pd, cat_item_price prc, products prod,  cat_program prog, cat_bundle_info cbi
                        WHERE {string1}                        ]]>
          </stmt>        
                    
          <stmt id="getTotalCatItemCountFedCust">
	                          <![CDATA[
	                  select /*+ ORDERED USE_NL(info , item ,pd, prc , opt ,prod, prog) */{totalCount}:=count(distinct item.cit_item_key)
	                  FROM  cat_info info, cat_item item, cat_item_options opt,
	                      cat_price_descriptor pd, cat_item_price prc, products prod, cat_item_att cia
	                          WHERE {string1}                        ]]>
          </stmt>
          
          <stmt id="getGSATotalCatItemCount">
      <![CDATA[
        select /*+ ORDERED USE_NL(info , item ,pd, prc , opt ,prod, prog) */{totalCount}:=count(distinct item.cit_item_key)
        FROM    cat_info info, cat_item item, cat_item_options opt,
                          cat_price_descriptor pd, cat_item_price prc, products prod,
                          cat_program prog, GSA_STG_CATALOG gsa
                  WHERE   {string1}
             ]]>
          </stmt>
          <stmt id="getTotalStdCatItemCount">
       <![CDATA[
        select /*+ ORDERED USE_NL(cat_info , cat_item ,cat_item_options ,cat_item_price , products) */ {totalCount}:=count(1)
        FROM   cat_info , cat_item , cat_item_options ,
               cat_item_price , products
        WHERE {string1} 
         ]]>
          </stmt>
          <stmt id="getCatProdCtgAttByCntry">
                <![CDATA[
                        select distinct {warrCode}:= att.warranty_code,
                               {warrInfo}:= att.warranty_desc,
                               {cntryCode}:= att.country_code,
                               {prodId}:=att.prod,
                               {prodExpireDate}:=att.DISCONTINUE_DATE
                        from   cat_info info, cat_item_options opt, ctg_prod_att att
                        where  info.cat_catalog_id = {?:catalogID}
                        and    opt.cat_catalog_id = info.cat_catalog_id
                        and    att.ctg_id = info.cat_product_ctg_id
                        and    att.prod = opt.cop_localize_prod
                        and    att.country_code in ({@q:cntryList})
                        order by att.prod, att.country_code
                ]]>
          </stmt>
          <stmt id="getCatProdCtgAtt">
                <![CDATA[
                        select distinct {warrCode}:= att.warranty_code,
                   {warrInfo}:= att.warranty_desc,
                   {cntryCode}:= att.country_code,
                   {prodId}:=att.prod,
                               {prodExpireDate}:=att.DISCONTINUE_DATE
                        from   cat_info info, cat_item_options opt, ctg_prod_att att
                        where  info.cat_catalog_id = {?:catalogID}
                        and    opt.cat_catalog_id = info.cat_catalog_id
                        and    att.ctg_id = info.cat_product_ctg_id
                        and    att.prod = opt.cop_localize_prod
                        order by att.prod, att.country_code
                ]]>
          </stmt>
          <stmt id="getProdToDisConDateByCntry">
          <![CDATA[
              select distinct {prodId}:=att.prod,
                 {cntryCode}:= att.country_code,
                 {prodExpireDate}:=att.DISCONTINUE_DATE
              from   cat_info info, cat_item_options opt, ctg_prod_att att
              where  info.cat_catalog_id = {?:catalogID}
              and    opt.cat_catalog_id = info.cat_catalog_id
              and    att.ctg_id = info.cat_product_ctg_id
              and    att.prod = opt.cop_localize_prod
              and    att.country_code in ({@q:cntryList})
              and    att.discontinue_date is not null
              order by att.prod, att.country_code
          ]]>
        </stmt>
        <stmt id="getProdToDisConDate">
          <![CDATA[
              select distinct {prodId}:=att.prod,
                 {cntryCode}:= att.country_code,
                 {prodExpireDate}:=att.DISCONTINUE_DATE
              from   cat_info info, cat_item_options opt, ctg_prod_att att
              where  info.cat_catalog_id = {?:catalogID}
              and    opt.cat_catalog_id = info.cat_catalog_id
              and    att.ctg_id = info.cat_product_ctg_id
              and    att.prod = opt.cop_localize_prod
              and    att.discontinue_date is not null
              order by att.prod, att.country_code
          ]]>
     </stmt>
          <stmt id="updatePriceSource">
        <![CDATA[
            call BE_PRICE_UTIL.update_vista_price_from_gui (
                        {i:id},
                        {i:netPrice},
                        {o:returnStatus}
                        )
        ]]>     
      </stmt> 
      
      <stmt id="getProductUnspsc">
          <![CDATA[
              select {unspsc}:= NVL(ctree.node_ext_path, '43170000'),
                 {prodId}:= opt.cop_localize_prod            
              from   cat_info info, cat_item_options opt, ctg_prod cprod, ctg_tree ctree
              where  info.cat_catalog_id = {?:catalogID}
              and    opt.cat_catalog_id = info.cat_catalog_id
              and    cprod.ctg_id = (select ctg_id from ctg_info where ctg_name = 'UNSPSC'
                            and ctg_type = 'UNSPSC')
              and    cprod.prod = opt.cop_localize_prod
              and    ctree.ctg_id = cprod.ctg_id
              and    ctree.node_id = cprod.node_id
          ]]>
     </stmt>
     
     
   <stmt id="getProductUnspscWithNames">
       <![CDATA[
	   select {unspsc}:= NVL(ctree.node_ext_path, '43170000'),
	      {prodId}:= opt.cop_localize_prod,
	      {nodeName}:=nvl(ctree.node_name,'Hardware and accessories')
	   from   cat_info info, cat_item_options opt, ctg_prod cprod, ctg_tree ctree
	   where  info.cat_catalog_id = {?:catalogID}
	   and    opt.cat_catalog_id = info.cat_catalog_id
	   and    cprod.ctg_id = (select ctg_id from ctg_info where ctg_name = 'UNSPSC'
			 and ctg_type = 'UNSPSC')
	   and    cprod.prod = opt.cop_localize_prod
	   and    ctree.ctg_id = cprod.ctg_id
	   and    ctree.node_id = cprod.node_id
       ]]>
  </stmt>
  
     <stmt id="getBundleUnspscWithNames">
         <![CDATA[
  	   select /*+ordered use_nl(bdt, cbd,tr, cp) */
	                      {prodId}:=cbd.CBD_ID,
	   			{unspsc}:=NVL(tr.node_ext_path,'43170000'),
	   			{nodeName}:=nvl(tr.NODE_NAME,'Hardware and accessories')                  
	                   from cat_bundle_info cbd, BDL_TEMPLATE_INFO bdt,
	                        ctg_prod cp , ctg_tree tr
	                   where
	                     cbd.CAT_CATALOG_ID=(select cat_parent_catalog_id from cat_info where cat_catalog_id={?:catalogID})
	                     and bdt.BDT_ID=cbd.BDT_TEMPLATE_ID
	                     and cp.ctg_id=(select ctg_id from ctg_info where ctg_name = 'UNSPSC'
	                               and ctg_type = 'UNSPSC')
	                     and cp.prod=bdt.BDT_BASE_PROD
                  and tr.node_id=cp.NODE_ID	
         ]]>
    </stmt>


      
     <stmt id="getProductUndp">
                     <![CDATA[
                         select {undp}:= ctree.node_ext_path,
                            {prodId}:= opt.cop_localize_prod            
                         from   cat_info info, cat_item_options opt, ctg_prod cprod, ctg_tree ctree
                         where  info.cat_catalog_id = {?:catalogID}
                         and    opt.cat_catalog_id = info.cat_catalog_id
                         and    cprod.ctg_id = 5598
                         and    cprod.prod = opt.cop_localize_prod
                         and    ctree.ctg_id = cprod.ctg_id
                         and    ctree.node_id = cprod.node_id
                     ]]>
     </stmt>
      
      <stmt id="updateCatFilterItems">
          <![CDATA[
				call Fe_Cat_Filter.Update_Catalog ({i:updatedItemArray|CAT_FLTR_MOD_ITEM_TBL:CAT_FLTR_MOD_ITEM:itemType,itemId,deleteStatus,itemLevel},
			     {i:catalogId},{i:sessionId},{i:filterType},{i:ctgId})				   
          ]]>
     </stmt>
     
     <stmt id="view_pull_products">
      	<![CDATA[
      		call FE_MASTER.PULL_PRODUCTS_FROM_PRICE_TIER({i:priceTierIDs|CAT_CATALOG_ID_TBL},
      			{i:masterCatalogID}, {i:productsArray|PROD_TAB}, {i:lastModifiedBy},
      			{o:message}, {o:retCode})
		]]>
	</stmt>
     
	<stmt id="getProdsForPull">
		<![CDATA[
		select * from (
			select a.*,rownum as ttt from (
				SELECT	{catalogID}:=catalogId,
					{pullFlag}:=pullFlag,
					{validationStatus}:=validationStatus,
        			{srcProd}:=srcProd,
					{optLocalizeProd}:=localizeProd,
					{prodId}:=baseModel,
					{bdID}:=priceSrcId,
					{netPriceStr}:=netPrice,
					{priceSourceType}:=priceSrcType,
				    {contextID}:=contextId,
					{gaDate}:=gaDate,
					{eolDate}:=peDate,
			        {discontinueDate}:=emDate,
			        {esDate}:=esDate,
			        {crossSellAvail}:=csFlag,
					{FFsID}:=ffsId,
					{txCurrencyCode}:=currencyCode,
					{pgmName}:=program,
					{source}:=source,
					{configID}:=configId,
					{productLine}:=pl,
			        {partType}:=partType,
			        {priceType}:=contractIdentifier,
					{bundleFlag}:=bundleFlag,
					{locOptFlag}:=locOptFlag,
                    {deleteFlag}:=deleteFlag,
                    {replacedByString}:=replacedByString,
                    {replacementStatus}:=configReplacementStatus,
                    {configFlag}:= configFlag,
                    {zeroPriceOptFlag}:=zeroPriceOptFlag,
                    {pgmSLA}:=sla,
                    {fusionStatus}:=fusionStatus,
	                {skipFusionValidation}:=skipFusionValidation,
					{lclpStatus}:=lclpStatus,
					{skipLclpValidation}:=skipLclpValidation,
					{plcStatus}:=plcStatus,
					{skipPlcValidation}:=skipPlcValidation
			FROM
			(select /*+ ordered use_nl(info, item, cio, price, cbi, prod, pim, prog, item1 )*/  
		   		info.cat_catalog_id catalogId,
	           	item.cit_src_prod srcProd,
	           	cio.cop_localize_prod localizeProd,
	           	item.cit_base_model baseModel,
	           	item.cit_context_id contextId,
	           	item.CIT_CS_AVAIL_FLAG csFlag,
	           	item.CIT_PART_TYPE partType,
	           	nvl(item.CIT_CONTRACT_IDENTIFIER,'Contract') contractIdentifier,
	           	item.cit_source source,
	           	item.CIT_CONFIG_ID configId,
	           	cio.cop_valid_status validationStatus,
	           	prod.pl pl,
	           	price.cip_net_price netPrice,
	           	price.cip_price_src_type priceSrcType,
	           	price.cip_price_src_id priceSrcId,
	           	price.cip_ffs_id ffsId,
	           	price.cip_tx_curr_cd currencyCode,
	           	price.cip_sla sla,
	           	nvl(item.cit_bundle_flag, 'S') bundleFlag,
	           	pim.end_of_life_date peDate,
	           	pim.discontinued_date emDate,
	           	pim.product_release_date gaDate,
	           	pim.marketing_obsolete_date esDate,
	           	prog.pgm_name program,
	           	nvl(item1.CIT_PT_PULL_FLAG,'N') pullFlag,
	           	prod.LOC_OPT_FLAG locOptFlag,
	           	item.CIT_DELETE_FLAG deleteFlag,
                DECODE(cbi.cbd_replaced_by, NULL, NULL, cbi.cbd_replaced_by || ' on ' || cbi.cbd_replaced_date) replacedbystring,
                DECODE(cbi.cbd_type_flag, 'Q' , DECODE(cbi.cbd_replaced_by, NULL, DECODE (cbi.cbd_replacement_for, NULL, NULL, 'RT'), 'R'), NULL) configreplacementstatus,
                NVL (cbd_type_flag, 'C') configflag,
	     		(select 'Y' from zero_price_option where base_prod = item.CIT_BASE_MODEL and rownum < 2) zeroPriceOptFlag,
				cio.cop_fusn_ord_status fusionStatus,
				cio.cop_skip_fusn_ord skipFusionValidation,
				cio.cop_lclp_ord_status lclpStatus,
				cio.cop_skip_lclp_ord skipLclpValidation,
				cio.cop_plc_ord_status plcStatus,
				cio.cop_skip_plc_ord skipPlcValidation
			   FROM cat_info info, cat_item item, cat_item_options cio, cat_item_price price,  products prod,
		        plc_inheritance_merge pim, cat_program prog, cat_item item1, cat_bundle_info cbi
		   		WHERE info.cat_catalog_id in ({@q:priceTierIDs}) 
		     		AND item.cat_catalog_id = info.cat_catalog_id
				    AND cio.cat_item_key = item.cit_item_key 
		     		AND price.cit_price_item_key(+) = item.cit_price_item_key
		     		AND price.cip_price_descriptor(+) in ({@q:priceDescriptor})
                    AND  cbi.cat_catalog_id(+) in ({@q:priceTierIDs}) 
                    AND item.cit_src_prod = cbi.cbd_id(+)
		     		AND prod.prod = cio.cop_localize_prod
		     		AND pim.product_number(+) = cio.cop_localize_prod 
		     		AND pim.country_code(+) in ({@q:catalogCountry})
		     		AND prog.PGM_KEY(+) = NVL(item.CIT_PGM_KEY,'')
		     		AND item1.cat_catalog_id(+) = {?:masterCatalogID}
		     		AND item1.cit_Src_prod(+) = item.cit_Src_prod
		     		AND (item.cit_config_id is null OR be_config_util.get_corona_read_flag('GUI') = 'N' )
		     	UNION ALL
			(select /*+ordered use_nl(X, cbi, prod, pim, prog, item1, cpi)*/ distinct 
		   		X.catalogId catalogId,
	           	X.srcProd srcProd,
	           	X.localizeProd localizeProd,
	           	X.baseModel baseModel,
	           	X.contextId contextId,
	           	X.csFlag csFlag,
	           	X.partType partType,
	           	X.contractIdentifier contractIdentifier,
	           	X.source source,
	           	X.configId configId,
	           	NVL(cpi.overall_status, DECODE( NVL(X.validStatus, 'X'), 'P', 'P', 'N')) validationStatus,
	           	prod.pl pl,
	      		cpi.NET_PRICE netPrice,
           		NVL(cpi.PRICE_SRC_TYPE, X.priceSrctyp) priceSrcType,	           	
	           	DECODE(cpi.price_source, 'LP', DECODE(NVL(cpi.deal_number,'X'), 'X', 'LOCAL_PRICE', cpi.deal_number), NVL(cpi.deal_number, X.priceSrc)) priceSrcId,
	           	X.ffsId ffsId,
	           	X.currencyCode currencyCode,
	           	X.sla sla,
	           	X.bundleFlag bundleFlag,
	           	pim.end_of_life_date peDate,
	           	pim.discontinued_date emDate,
	           	pim.product_release_date gaDate,
	           	pim.marketing_obsolete_date esDate,
	           	prog.pgm_name program,
	           	nvl(item1.CIT_PT_PULL_FLAG,'N') pullFlag,
	           	prod.LOC_OPT_FLAG locOptFlag,
	           	X.deleteFlag deleteFlag,
                DECODE(cbi.cbd_replaced_by, NULL, NULL, cbi.cbd_replaced_by || ' on ' || cbi.cbd_replaced_date) replacedbystring,
                DECODE(cbi.cbd_type_flag, 'Q' , DECODE(cbi.cbd_replaced_by, NULL, DECODE (cbi.cbd_replacement_for, NULL, NULL, 'RT'), 'R'), NULL) configreplacementstatus,
                NVL (cbd_type_flag, 'C') configflag,
	     		(select 'Y' from zero_price_option where base_prod = X.baseModel and rownum < 2) zeroPriceOptFlag,
				X.fusionStatus  fusionStatus,
				X.skipFusionValidation skipFusionValidation,
				X.lclpStatus lclpStatus,
				X.skipLclpValidation skipLclpValidation,
				X.plcStatus plcStatus,
				X.skipPlcValidation skipPlcValidation
			   FROM 
			(select info.cat_catalog_id catalogId,
					info.cat_price_merge_id priceMergeId,
			        item.cit_src_prod srcProd,
			        cio.cop_localize_prod localizeProd,
			        item.cit_base_model baseModel,
			        item.cit_context_id contextId,
			        item.CIT_CS_AVAIL_FLAG csFlag,
			        item.CIT_PART_TYPE partType,
			        nvl(item.CIT_CONTRACT_IDENTIFIER,'Contract') contractIdentifier,
			        item.cit_source source,
			        item.CIT_CONFIG_ID configId,
					NVL(item.CIT_PGM_KEY,'') pgmKey,
					price.cip_ffs_id ffsId,
			        price.cip_tx_curr_cd currencyCode,
			        price.cip_sla sla,
					price.cip_price_src_id priceSrc,
					price.cip_price_src_type priceSrctyp,
					price.cip_price_descriptor priceDescriptor,
			        nvl(item.cit_bundle_flag, 'S') bundleFlag,
					item.CIT_DELETE_FLAG deleteFlag, 
					cio.cop_valid_status validStatus,
					cio.cop_fusn_ord_status fusionStatus,
					cio.cop_skip_fusn_ord skipFusionValidation,
					cio.cop_lclp_ord_status lclpStatus,
					cio.cop_skip_lclp_ord skipLclpValidation,
					cio.cop_plc_ord_status plcStatus,
					cio.cop_skip_plc_ord skipPlcValidation
				FROM cat_info info, cat_item item, cat_item_options cio, cat_item_price price
				WHERE info.cat_catalog_id in ({@q:priceTierIDs}) 
					AND item.cat_catalog_id = info.cat_catalog_id
					AND cio.cat_item_key = item.cit_item_key 
				    AND price.cit_price_item_key(+) = item.cit_price_item_key
				    AND price.cip_price_descriptor(+) in ({@q:priceDescriptor})
					and item.cit_config_id is not null
                )X, products prod,
		        plc_inheritance_merge pim, cat_program prog, cat_item item1, config_permutation_info cpi, cat_bundle_info cbi
		   		WHERE be_config_util.get_corona_read_flag('GUI') = 'Y'
		   			and (cbi.cat_catalog_id(+) = X.catalogId
                    AND X.srcProd = cbi.cbd_id(+)
		     		AND prod.prod = X.localizeProd
		     		AND pim.product_number(+) = X.localizeProd 
		     		AND pim.country_code(+) in ({@q:catalogCountry})
		     		AND prog.PGM_KEY(+) = X.pgmKey
		     		AND item1.cat_catalog_id(+) = {?:masterCatalogID}
		     		AND item1.cit_Src_prod(+) = X.srcProd
		     		and UPPER(cpi.price_id(+)) = X.priceMergeId 
					and X.srcProd = cpi.config_prod_id (+)
					and X.priceDescriptor = cpi.price_descriptor(+))	 ) 		     	
	     	) 
	     		) a {string1}
		) b
		where {sortByAndSortOrder}
		]]>
	</stmt>
	
	<stmt id="getProdsForPullCount">
		<![CDATA[
		
		SELECT {count}:= count(distinct a.cit_item_key) from cat_item a,
		 cat_item_options b, cat_item_price c   where a.cat_catalog_id in ({@q:priceTierIDs}) 
		 and a.CIT_ITEM_KEY = b.CaT_ITEM_KEY and a.CIT_PRICE_ITEM_KEY = c.CIT_PRICE_ITEM_KEY and a.cit_exclude_flag = 'N' {string1}
			 
		]]>
	</stmt>
	
	<stmt id="getCombinedOffering">
		<![CDATA[
			SELECT	{catalogID}:=catalogId,
					{pullFlag}:=pullFlag,
					{deleteFlag}:= deleteFlag,
					{showHideFlag}:=showHideFlag,
					{validationStatus}:=validationStatus,
        			{srcProd}:=srcProd,
					{optLocalizeProd}:=localizeProd,
					{prodId}:=baseModel,
					{bdID}:=priceSrcId,
					{netPriceStr}:=netPrice,
					{priceSourceType}:=priceSrcType,
					{txCurrencyCode}:=currencyCode,
					{pgmName}:=program,
					{bundleFlag}:=bundleFlag,
					{locOptFlag}:= locOptFlag,
                    {replacedByString}:= replacedByString,
                    {replacementStatus}:= configReplacementStatus,
                    {configFlag}:= configFlag,
                    {zeroPriceOptFlag}:= zeroPriceOptFlag,
                    {pgmSLA}:= sla,
                    {fusionStatus}:=fusionStatus,
	                {skipFusionValidation}:=skipFusionValidation,
					{lclpStatus}:=lclpStatus,
					{skipLclpValidation}:=skipLclpValidation,
					{plcStatus}:=plcStatus,
					{skipPlcValidation}:=skipPlcValidation
			FROM
			( (SELECT /*+ ordered use_nl(info, item, cio, price, cbi, prod, prog) */  info.cat_catalog_id catalogId,
           		item.cit_src_prod srcProd,
	           	cio.cop_localize_prod localizeProd,
           		item.cit_base_model baseModel,
          	 	item.cit_show_hide_flag showHideFlag,
           		cio.cop_valid_status validationStatus,
           		price.cip_net_price netPrice,
           		price.cip_price_src_type priceSrcType,
           		price.cip_price_src_id priceSrcId,
           		price.cip_tx_curr_cd currencyCode,
           		price.cip_sla sla,
           		nvl(item.cit_bundle_flag, 'S') bundleFlag,
           		prog.pgm_name program,
           		item.CIT_PT_PULL_FLAG pullFlag,
           		prod.LOC_OPT_FLAG locOptFlag,
           		item.CIT_DELETE_FLAG deleteFlag,
                DECODE(cbi.cbd_replaced_by, NULL, NULL, cbi.cbd_replaced_by || ' on ' || cbi.cbd_replaced_date) replacedbystring,
                DECODE(cbi.cbd_type_flag, 'Q' , DECODE(cbi.cbd_replaced_by, NULL, DECODE (cbi.cbd_replacement_for, NULL, NULL, 'RT'), 'R'), NULL) configreplacementstatus,
                NVL (cbd_type_flag, 'C') configflag,
                (select 'Y' from zero_price_option where base_prod = item.CIT_BASE_MODEL and rownum < 2) zeroPriceOptFlag,
				cio.cop_fusn_ord_status fusionStatus,
				cio.cop_skip_fusn_ord skipFusionValidation,
				cio.cop_lclp_ord_status lclpStatus,
				cio.cop_skip_lclp_ord skipLclpValidation,
				cio.cop_plc_ord_status plcStatus,
				cio.cop_skip_plc_ord skipPlcValidation
   			FROM cat_info info, cat_item item,  cat_item_options cio, cat_item_price price, cat_bundle_info cbi,
   				 products prod, cat_program prog
   			WHERE info.cat_catalog_id = {?:masterCatalogID} AND item.cat_catalog_id = info.cat_catalog_id
   				AND cio.cat_item_key = item.cit_item_key AND price.cit_price_item_key(+) = item.cit_price_item_key
   				AND price.cip_price_descriptor in ({@q:priceDescriptor})
                AND {?:masterCatalogID} = cbi.cat_catalog_id(+) AND item.cit_src_prod = cbi.cbd_id(+)
				 AND prod.prod = cio.cop_localize_prod   
   				AND prog.PGM_KEY(+) = NVL(item.CIT_PGM_KEY,'')
   				AND (item.cit_config_id is NULL OR be_config_util.get_corona_read_flag('GUI') = 'N')
   		union all
   		select /*+ ordered use_nl(info, item, cio, price, cbi,  prod, prog) */ 
   			info.cat_catalog_id catalogId,
           	item.cit_src_prod srcProd,
           	cio.cop_localize_prod localizeProd,
           	item.cit_base_model baseModel,
           	item.cit_show_hide_flag showHideFlag,
           	cio.cop_valid_status validationStatus,
           	price.cip_net_price netPrice,
           	price.cip_price_src_type priceSrcType,
           	price.cip_price_src_id priceSrcId,
           	price.cip_tx_curr_cd currencyCode,
           	price.cip_sla sla,
           	nvl(item.cit_bundle_flag, 'S') bundleFlag,
           	prog.pgm_name program,
           	item.CIT_PT_PULL_FLAG pullFlag,
           	prod.LOC_OPT_FLAG locOptFlag,
           	item.CIT_DELETE_FLAG deleteFlag,
            DECODE(cbi.cbd_replaced_by, NULL, NULL, cbi.cbd_replaced_by || ' on ' || cbi.cbd_replaced_date) replacedbystring,
            DECODE(cbi.cbd_type_flag, 'Q' , DECODE(cbi.cbd_replaced_by, NULL, DECODE (cbi.cbd_replacement_for, NULL, NULL, 'RT'), 'R'), NULL) configreplacementstatus,
            NVL (cbd_type_flag, 'C') configflag,
     		(select 'Y' from zero_price_option where base_prod = item.CIT_BASE_MODEL and rownum < 2) zeroPriceOptFlag,
				cio.cop_fusn_ord_status fusionStatus,
				cio.cop_skip_fusn_ord skipFusionValidation,
				cio.cop_lclp_ord_status lclpStatus,
				cio.cop_skip_lclp_ord skipLclpValidation,
				cio.cop_plc_ord_status plcStatus,
				cio.cop_skip_plc_ord skipPlcValidation
   		FROM cat_info info, cat_item item, cat_item_options cio, cat_item_price price, cat_bundle_info cbi,
   				products prod, cat_program prog
   		WHERE info.cat_catalog_id in ({@q:priceTierIDs}) AND item.cat_catalog_id = info.cat_catalog_id
   			AND cio.cat_item_key = item.cit_item_key AND price.cit_price_item_key(+) = item.cit_price_item_key
   			AND price.cip_price_descriptor in ({@q:priceDescriptor})
            AND cbi.cat_catalog_id(+) in ({@q:priceTierIDs}) AND item.cit_src_prod = cbi.cbd_id(+)
			AND prod.prod = cio.cop_localize_prod  
   			AND prog.PGM_KEY(+) = NVL(item.CIT_PGM_KEY,'')
   			AND NOT EXISTS (SELECT 1 FROM cat_item citem WHERE cat_catalog_id = {?:masterCatalogID} AND item.cit_src_prod = citem.cit_src_prod)
   			AND (item.cit_config_id is NULL OR be_config_util.get_corona_read_flag('GUI')= 'N'))
       UNION ALL
            (SELECT /*+ ordered use_nl(info, item, cio, price, cpi, cbi,  prod, prog) */  info.cat_catalog_id catalogId,
                  item.cit_src_prod srcProd,
                  cio.cop_localize_prod localizeProd,
                  item.cit_base_model baseModel,
                  item.cit_show_hide_flag showHideFlag,
	           	  NVL(cpi.overall_status, DECODE( NVL(cio.cop_valid_status, 'X'), 'P', 'P', 'N')) validationStatus,
           		  cpi.NET_PRICE netPrice,
           		  NVL(cpi.PRICE_SRC_TYPE, price.cip_price_src_type) priceSrcType,
                  DECODE(cpi.price_source, 'LP', DECODE(NVL(cpi.deal_number,'X'), 'X', 'LOCAL_PRICE', cpi.deal_number), NVL(cpi.deal_number, price.cip_price_src_id)) priceSrcId,
                  price.cip_tx_curr_cd currencyCode,
                  price.cip_sla sla,
                  nvl(item.cit_bundle_flag, 'S') bundleFlag,
                  prog.pgm_name program,
                  item.CIT_PT_PULL_FLAG pullFlag,
                  prod.LOC_OPT_FLAG locOptFlag,
                  item.CIT_DELETE_FLAG deleteFlag,
                  DECODE(cbi.cbd_replaced_by, NULL, NULL, cbi.cbd_replaced_by || ' on ' || cbi.cbd_replaced_date) replacedbystring,
                  DECODE(cbi.cbd_type_flag, 'Q' , DECODE(cbi.cbd_replaced_by, NULL, DECODE (cbi.cbd_replacement_for, NULL, NULL, 'RT'), 'R'), NULL) configreplacementstatus,
                  NVL (cbd_type_flag, 'C') configflag,
                (select 'Y' from zero_price_option where base_prod = item.CIT_BASE_MODEL and rownum < 2) zeroPriceOptFlag,
                        cio.cop_fusn_ord_status fusionStatus,
                        cio.cop_skip_fusn_ord skipFusionValidation,
                        cio.cop_lclp_ord_status lclpStatus,
                        cio.cop_skip_lclp_ord skipLclpValidation,
                        cio.cop_plc_ord_status plcStatus,
                        cio.cop_skip_plc_ord skipPlcValidation
                  FROM cat_info info, cat_item item,  cat_item_options cio, cat_item_price price, cat_bundle_info cbi,
                        products prod, cat_program prog, config_permutation_info cpi
                  WHERE be_config_util.get_corona_read_flag('GUI') = 'Y'
                  		AND (info.cat_catalog_id = {?:masterCatalogID} AND item.cat_catalog_id = info.cat_catalog_id
                        AND cio.cat_item_key = item.cit_item_key AND price.cit_price_item_key(+) = item.cit_price_item_key
                        AND price.cip_price_descriptor in ({@q:priceDescriptor}) AND item.cit_config_id IS NOT NULL 
                        AND {?:masterCatalogID} = cbi.cat_catalog_id(+) AND item.cit_src_prod = cbi.cbd_id(+)
                        AND UPPER(cpi.price_id(+)) = {?:masterPriceMergeId}  
                        AND price.cit_src_prod = cpi.config_prod_id(+)
                        AND nvl(price.cip_price_descriptor, '0') = cpi.price_descriptor(+)
						AND prod.prod = cio.cop_localize_prod   
                        AND prog.PGM_KEY(+) = NVL(item.CIT_PGM_KEY,''))
            union all
            select distinct /*+ ordered use_nl(info, item, cio, price, cpi, cbi, prod, prog) */ 
                  info.cat_catalog_id catalogId,
           item.cit_src_prod srcProd,
           cio.cop_localize_prod localizeProd,
           item.cit_base_model baseModel,
           item.cit_show_hide_flag showHideFlag,
           NVL(cpi.overall_status, DECODE( NVL(cio.cop_valid_status, 'X'), 'P', 'P', 'N')) validationStatus,
           cpi.NET_PRICE netPrice,
           NVL(cpi.PRICE_SRC_TYPE, price.cip_price_src_type) priceSrcType,
           DECODE(cpi.price_source, 'LP', DECODE(NVL(cpi.deal_number,'X'), 'X', 'LOCAL_PRICE', cpi.deal_number), NVL(cpi.deal_number, price.cip_price_src_id)) priceSrcId,
           price.cip_tx_curr_cd currencyCode,
           price.cip_sla sla,
           nvl(item.cit_bundle_flag, 'S') bundleFlag,
           prog.pgm_name program,
           item.CIT_PT_PULL_FLAG pullFlag,
           prod.LOC_OPT_FLAG locOptFlag,
           item.CIT_DELETE_FLAG deleteFlag,
           DECODE(cbi.cbd_replaced_by, NULL, NULL, cbi.cbd_replaced_by || ' on ' || cbi.cbd_replaced_date) replacedbystring,
           DECODE(cbi.cbd_type_flag, 'Q' , DECODE(cbi.cbd_replaced_by, NULL, DECODE (cbi.cbd_replacement_for, NULL, NULL, 'RT'), 'R'), NULL) configreplacementstatus,
           NVL (cbd_type_flag, 'C') configflag,
            (select 'Y' from zero_price_option where base_prod = item.CIT_BASE_MODEL and rownum < 2) zeroPriceOptFlag,
                        cio.cop_fusn_ord_status fusionStatus,
                        cio.cop_skip_fusn_ord skipFusionValidation,
                        cio.cop_lclp_ord_status lclpStatus,
                        cio.cop_skip_lclp_ord skipLclpValidation,
                        cio.cop_plc_ord_status plcStatus,
                        cio.cop_skip_plc_ord skipPlcValidation
            FROM cat_info info, cat_item item, cat_item_options cio, cat_item_price price, cat_bundle_info cbi,
                        products prod, cat_program prog, config_permutation_info cpi
            WHERE  be_config_util.get_corona_read_flag('GUI')= 'Y'
            	  AND (info.cat_catalog_id in ({@q:priceTierIDs}) AND item.cat_catalog_id = info.cat_catalog_id
                  AND cio.cat_item_key = item.cit_item_key AND price.cit_price_item_key(+) = item.cit_price_item_key
                  AND price.cip_price_descriptor in ({@q:priceDescriptor}) AND item.cit_config_id IS NOT NULL 
                  AND cbi.cat_catalog_id(+) in ({@q:priceTierIDs}) AND item.cit_src_prod = cbi.cbd_id(+)
                  AND UPPER(cpi.price_id(+)) = {?:masterPriceMergeId} 
                  AND price.cit_src_prod = cpi.config_prod_id(+)
                  AND nvl(price.cip_price_descriptor, '0') = cpi.price_descriptor(+) 
                  AND prod.prod = cio.cop_localize_prod  
                  AND prog.PGM_KEY(+) = NVL(item.CIT_PGM_KEY,'')
                  AND NOT EXISTS (SELECT 1 FROM cat_item citem WHERE cat_catalog_id = {?:masterCatalogID} AND item.cit_src_prod = citem.cit_src_prod)))
   		) {whereClause}
		]]>
	</stmt>
	
	<stmt id="getCombinedOfferingCount">
		<![CDATA[
			SELECT	{count}:=count(srcProd)
			FROM
			(SELECT /*+ ordered use_nl(info, item, cio, price, cbi,  prod, prog) */
				item.cit_src_prod srcProd
   			FROM cat_info info, cat_item item,  cat_item_options cio, cat_item_price price, cat_bundle_info cbi,
   				products prod, cat_program prog
   			WHERE info.cat_catalog_id = {?:masterCatalogID} AND item.cat_catalog_id = info.cat_catalog_id
   				AND cio.cat_item_key = item.cit_item_key AND price.cit_price_item_key(+) = item.cit_price_item_key
   				AND price.cip_price_descriptor in ({@q:priceDescriptor})
                AND {?:masterCatalogID} = cbi.cat_catalog_id(+) AND item.cit_src_prod = cbi.cbd_id(+)
   				AND prod.prod = cio.cop_localize_prod   
   				AND prog.PGM_KEY(+) = NVL(item.CIT_PGM_KEY,'')
   		union all
   		select /*+ ordered use_nl(info, item, cio, price, cbi, prod, prog) */ 
   			item.cit_src_prod srcProd
   		FROM cat_info info, cat_item item, cat_item_options cio, cat_item_price price, cat_bundle_info cbi,
   				 products prod, cat_program prog
   		WHERE info.cat_catalog_id in ({@q:priceTierIDs}) AND item.cat_catalog_id = info.cat_catalog_id
   			AND cio.cat_item_key = item.cit_item_key AND price.cit_price_item_key(+) = item.cit_price_item_key
   			AND price.cip_price_descriptor in ({@q:priceDescriptor})
            AND cbi.cat_catalog_id(+) in ({@q:priceTierIDs}) AND item.cit_src_prod = cbi.cbd_id(+)
   			 AND prod.prod = cio.cop_localize_prod  
   			AND prog.PGM_KEY(+) = NVL(item.CIT_PGM_KEY,'')
   			AND item.cit_src_prod not in (SELECT cit_src_prod FROM cat_item WHERE cat_catalog_id = {?:masterCatalogID})
   		) {whereClause}
		]]>
	</stmt>

    </stmt-group>

    <stmt-group id="catalogProd-counts">
      <stmt id="getVistaItemsByAlertPriorityCount">
              <![CDATA[
              SELECT/*+ ORDERED USE_NL(info , item, prc, opt, prod) */                 
              {count}:=count(1)
            FROM  cat_info info, cat_item item, cat_item_price prc,
                  CAT_ITEM_OPTIONS opt, products prod
            WHERE info.CAT_CATALOG_ID = {?:catalogID}
            and   item.CAT_CATALOG_ID = info.CAT_CATALOG_ID                         
            and   item.CIT_DELETE_FLAG = 'N'
            and   item.CIT_EXCLUDE_FLAG = 'N'                                               
            and   prc.CIT_PRICE_ITEM_KEY = item.CIT_PRICE_ITEM_KEY      
            and   prc.CIP_PRICE_DESCRIPTOR = {?:priceDescriptor}
            and   prc.CIP_ZONE_DESCRIPTOR is null
            and   opt.CAT_CATALOG_ID = item.CAT_CATALOG_ID
        and   opt.CAT_ITEM_KEY   = item.CIT_ITEM_KEY
        and   (opt.cop_valid_status = 'V' or
            (opt.cop_valid_status = 'I' and 
                exists (select 'x' from alert_log where catalog_id = info.cat_catalog_id
                and catalog_item_key = item.cit_item_key
                and alert_priority > {?:alertPriority})
            )
                  )
            and prod.prod = opt.cop_localize_prod      
              ]]>   
      </stmt>
      
      <stmt id="getItemsByAlertPriorityCount">
        <![CDATA[
    SELECT
        {count}:=sum(prods)
    FROM (
        SELECT/*+ ORDERED USE_NL(info , item, pd, prc, opt, alog , prod, sup) */
            count(1) as prods 
        FROM    cat_info info, 
            cat_item item, 
            cat_item_price prc, 
            cat_price_descriptor pd, 
            CAT_ITEM_OPTIONS opt, 
            (SELECT MIN(alert_priority) alert_priority, catalog_item_key 
            FROM alert_log WHERE catalog_id= {?:catalogID}
            AND src_type='catalog_item' GROUP BY catalog_item_key) alog, 
            products prod, 
            supplier_info sup 
        WHERE info.CAT_CATALOG_ID = {?:catalogID}
            and item.CAT_CATALOG_ID = info.CAT_CATALOG_ID and 
            pd.CAT_CATALOG_ID(+) = item.CAT_CATALOG_ID and 
            opt.CAT_CATALOG_ID= item.CAT_CATALOG_ID and 
            opt.CAT_ITEM_KEY = item.CIT_ITEM_KEY and opt.cop_valid_status = 'I' and 
            item.CIT_DELETE_FLAG = 'N' and item.CIT_EXCLUDE_FLAG = 'N' and 
            alog.alert_priority > {?:alertPriority} and 
            alog.catalog_item_key = item.CIT_ITEM_KEY and 
            prc.CIT_PRICE_ITEM_KEY(+) = item.CIT_PRICE_ITEM_KEY and 
            NVL(prc.CIP_PRICE_DESCRIPTOR, 0) = NVL(pd.CPD_PRICE_DESCRIPTOR, 0) 
            and NVL(prc.CIP_ZONE_DESCRIPTOR, 0) =NVL(pd.CPD_ZONE_DESCRIPTOR, 0) and 
            prod.PROD = opt.COP_LOCALIZE_PROD and 
            sup.supplier_id = nvl(info.cat_supplier_id, '149761140') 
    UNION 
      SELECT/*+ ORDERED USE_NL(info , item, pd, prc, opt, prod, sup) */
      count(1) as prods 
      FROM cat_info info, cat_item item, cat_item_price prc, cat_price_descriptor pd, 
      CAT_ITEM_OPTIONS opt, 
      products prod, supplier_info sup 
      WHERE 
        info.CAT_CATALOG_ID = {?:catalogID} and 
        item.CAT_CATALOG_ID = info.CAT_CATALOG_ID and 
        pd.CAT_CATALOG_ID(+) = item.CAT_CATALOG_ID and 
        opt.CAT_CATALOG_ID = item.CAT_CATALOG_ID and opt.CAT_ITEM_KEY = item.CIT_ITEM_KEY 
        and opt.cop_valid_status = 'V' and item.CIT_DELETE_FLAG = 'N' and 
        item.CIT_EXCLUDE_FLAG = 'N' and 
        prc.CIT_PRICE_ITEM_KEY(+) = item.CIT_PRICE_ITEM_KEY and 
        NVL(prc.CIP_PRICE_DESCRIPTOR, 0) = NVL(pd.CPD_PRICE_DESCRIPTOR, 0) and 
        NVL(prc.CIP_ZONE_DESCRIPTOR, 0) = NVL(pd.CPD_ZONE_DESCRIPTOR, 0) and 
      	prod.PROD = opt.COP_LOCALIZE_PROD and 
        sup.supplier_id = nvl(info.cat_supplier_id, '149761140') )          
         ]]>    
      </stmt>
      
      <stmt id="getValidItemsCount">
        <![CDATA[
              SELECT/*+ ORDERED USE_NL(info , item, pd, prc, opt, prod, sup) */ 
        {count}:=count(1)
                        FROM    cat_info info, cat_item item, cat_item_price prc,
                                cat_price_descriptor pd, CAT_ITEM_OPTIONS opt, 
                                products prod, supplier_info sup

                        WHERE info.CAT_CATALOG_ID = {?:catalogID}
                        and   item.CAT_CATALOG_ID = info.CAT_CATALOG_ID
                        and   pd.CAT_CATALOG_ID(+) = item.CAT_CATALOG_ID
                        and   opt.CAT_CATALOG_ID = item.CAT_CATALOG_ID
                        and   opt.CAT_ITEM_KEY   = item.CIT_ITEM_KEY
                        and   opt.cop_valid_status = 'V'
                        and   item.CIT_DELETE_FLAG = 'N'
                        and   item.CIT_EXCLUDE_FLAG = 'N'                                               
                        and   prc.CIT_PRICE_ITEM_KEY(+) = item.CIT_PRICE_ITEM_KEY      
                        and   NVL(prc.CIP_PRICE_DESCRIPTOR, 0) = NVL(pd.CPD_PRICE_DESCRIPTOR,0)
                        and   NVL(prc.CIP_ZONE_DESCRIPTOR, 0) = NVL(pd.CPD_ZONE_DESCRIPTOR, 0)                                          
                        and   prod.PROD = opt.COP_LOCALIZE_PROD                                             
                        and   sup.supplier_id = nvl(info.cat_supplier_id, '149761140')
         ]]>    
      </stmt>
      <stmt id="getVistaValidItemsCount">
              <![CDATA[
                    SELECT/*+ ORDERED USE_NL(info , item, prc, opt, prod) */ 
                    {count}:=count(1)
              FROM    cat_info info, cat_item item, cat_item_price prc,
                  CAT_ITEM_OPTIONS opt, products prod

              WHERE info.CAT_CATALOG_ID = {?:catalogID}
              and   item.CAT_CATALOG_ID = info.CAT_CATALOG_ID                         
              and   item.CIT_DELETE_FLAG = 'N'
              and   item.CIT_EXCLUDE_FLAG = 'N'                                               
              and   prc.CIT_PRICE_ITEM_KEY = item.CIT_PRICE_ITEM_KEY      
              and   prc.CIP_PRICE_DESCRIPTOR = {?:priceDescriptor}
              and   prc.CIP_ZONE_DESCRIPTOR is null
              and   opt.CAT_CATALOG_ID = item.CAT_CATALOG_ID
              and   opt.CAT_ITEM_KEY   = item.CIT_ITEM_KEY
              and   opt.cop_valid_status = 'V'  
              and   prod.prod = opt.cop_localize_prod
               ]]>    
      </stmt>
      <stmt id="getAllItemsCount">
        <![CDATA[
              SELECT/*+ ORDERED USE_NL(info , item, pd, prc, opt, prod, sup) */ 
            {count}:=count(1)
                        FROM    cat_info info, cat_item item, cat_item_price prc,
                                cat_price_descriptor pd, CAT_ITEM_OPTIONS opt, 
                                products prod, supplier_info sup
      
                        WHERE info.CAT_CATALOG_ID = {?:catalogID}
                        and   item.CAT_CATALOG_ID = info.CAT_CATALOG_ID
                        and   pd.CAT_CATALOG_ID(+) = item.CAT_CATALOG_ID
                        and   opt.CAT_CATALOG_ID = item.CAT_CATALOG_ID
                        and   opt.CAT_ITEM_KEY   = item.CIT_ITEM_KEY                            
                        and   item.CIT_DELETE_FLAG = 'N'
                        and   item.CIT_EXCLUDE_FLAG = 'N'                                               
                        and   prc.CIT_PRICE_ITEM_KEY(+) = item.CIT_PRICE_ITEM_KEY      
                        and   NVL(prc.CIP_PRICE_DESCRIPTOR, 0) = NVL(pd.CPD_PRICE_DESCRIPTOR, 0)
                        and   NVL(prc.CIP_ZONE_DESCRIPTOR, 0) = NVL(pd.CPD_ZONE_DESCRIPTOR, 0)                                          
                        and   prod.PROD = opt.COP_LOCALIZE_PROD                                             
                        and   sup.supplier_id = nvl(info.cat_supplier_id, '149761140')
         ]]>    
      </stmt>
      
      <stmt id="getVistaAllItemsCount">
              <![CDATA[
                    SELECT/*+ ORDERED USE_NL(info , item, prc, opt, prod) */ 
                    {count}:=count(1)
              FROM    cat_info info, cat_item item, cat_item_price prc,
                  CAT_ITEM_OPTIONS opt, products prod

              WHERE info.CAT_CATALOG_ID = {?:catalogID}
              and   item.CAT_CATALOG_ID = info.CAT_CATALOG_ID                         
              and   item.CIT_DELETE_FLAG = 'N'
              and   item.CIT_EXCLUDE_FLAG = 'N'                                               
              and   prc.CIT_PRICE_ITEM_KEY = item.CIT_PRICE_ITEM_KEY      
              and   prc.CIP_PRICE_DESCRIPTOR = {?:priceDescriptor}
              and   prc.CIP_ZONE_DESCRIPTOR is null
              and   opt.CAT_CATALOG_ID = item.CAT_CATALOG_ID
              and   opt.CAT_ITEM_KEY   = item.CIT_ITEM_KEY
              and   prod.prod = opt.cop_localize_prod
               ]]>    
      </stmt>
      
      <stmt id="getOmihItemsByAlertPriorityCount">
      <![CDATA[
      SELECT 
      {count}:=sum(prods)
      FROM (
     SELECT/*+ ORDERED USE_NL(info , item, pd, prc, opt, alog, bundle, prod, sup) */ 
        count(1) as prods
          from CAT_INFO info,  cat_price_descriptor pd, CAT_ITEM item, 
           CAT_ITEM_OPTIONS opt, alert_log alog, CAT_BUNDLE bundle, CAT_ITEM_PRICE prc,
            products prod, supplier_info sup
          WHERE info.CAT_CATALOG_ID = {?:catalogID}
          and   pd.CAT_CATALOG_ID = item.CAT_CATALOG_ID
          and   item.CAT_CATALOG_ID = info.CAT_CATALOG_ID           
          and   opt.CAT_ITEM_KEY   = item.CIT_ITEM_KEY
          and   opt.cop_valid_status = 'I'
          and   alog.catalog_id = item.cat_catalog_id
          and   alog.alert_priority >= {?:alertPriority}
          and   alog.catalog_item_key = item.CIT_ITEM_KEY
          and   bundle.CIT_ITEM_KEY = item.CIT_PARENT_ITEM_KEY
          and   upper(bundle.BDL_STATE) = 'R' and bundle.BDL_END_DATE >= SYSDATE
          and   item.CIT_SOURCE = 'COMCAT_BDL' 
          and   prc.CIP_NET_PRICE is not null
          and   prc.CIT_PRICE_ITEM_KEY = item.CIT_PRICE_ITEM_KEY      
          and   NVL(prc.CIP_PRICE_DESCRIPTOR, 0) = NVL(pd.CPD_PRICE_DESCRIPTOR, 0)
          and   NVL(prc.CIP_ZONE_DESCRIPTOR, 0) = NVL(pd.CPD_ZONE_DESCRIPTOR, 0)                                                                        
          and   prod.PROD = opt.COP_LOCALIZE_PROD                               
          and   sup.supplier_id = nvl(info.cat_supplier_id, '149761140')    
                 
          UNION
          SELECT/*+ ORDERED USE_NL(info , item, pd, prc, opt, bundle, prod, sup) */ 
        count(1) as prods
        from CAT_INFO info,  cat_price_descriptor pd, CAT_ITEM item, 
           CAT_ITEM_OPTIONS opt, CAT_BUNDLE bundle, CAT_ITEM_PRICE prc,
            products prod, supplier_info sup
          WHERE info.CAT_CATALOG_ID = {?:catalogID}
          and   pd.CAT_CATALOG_ID = item.CAT_CATALOG_ID
          and   item.CAT_CATALOG_ID = info.CAT_CATALOG_ID           
          and   opt.CAT_ITEM_KEY   = item.CIT_ITEM_KEY
          and   opt.cop_valid_status = 'V'
          and   bundle.CIT_ITEM_KEY = item.CIT_PARENT_ITEM_KEY
          and   upper(bundle.BDL_STATE) = 'R' and bundle.BDL_END_DATE >= SYSDATE
          and   item.CIT_SOURCE = 'COMCAT_BDL' 
          and   prc.CIP_NET_PRICE is not null
          and   prc.CIT_PRICE_ITEM_KEY = item.CIT_PRICE_ITEM_KEY      
          and   NVL(prc.CIP_PRICE_DESCRIPTOR, 0) = NVL(pd.CPD_PRICE_DESCRIPTOR, 0)
          and   NVL(prc.CIP_ZONE_DESCRIPTOR, 0) = NVL(pd.CPD_ZONE_DESCRIPTOR, 0)                                                                        
          and   prod.PROD = opt.COP_LOCALIZE_PROD                               
          and   sup.supplier_id = nvl(info.cat_supplier_id, '149761140')    
    )      
             ]]>    
            </stmt>
            
            <stmt id="getOmihValidItemsCount">
              <![CDATA[
                    SELECT/*+ ORDERED USE_NL(info , item, pd, prc, opt, bundle, prod, sup) */ 
            {count}:=count(1)
              from CAT_INFO info,  cat_price_descriptor pd, CAT_ITEM item, 
                   CAT_ITEM_OPTIONS opt, CAT_BUNDLE bundle, CAT_ITEM_PRICE prc,
                    products prod, supplier_info sup
              WHERE info.CAT_CATALOG_ID = {?:catalogID}
              and   pd.CAT_CATALOG_ID = item.CAT_CATALOG_ID
              and   item.CAT_CATALOG_ID = info.CAT_CATALOG_ID           
              and   opt.CAT_ITEM_KEY   = item.CIT_ITEM_KEY
              and   opt.cop_valid_status = 'V'
              and   bundle.CIT_ITEM_KEY = item.CIT_PARENT_ITEM_KEY
              and   upper(bundle.BDL_STATE) = 'R' and bundle.BDL_END_DATE >= SYSDATE
              and   item.CIT_SOURCE = 'COMCAT_BDL' 
              and   prc.CIP_NET_PRICE is not null
              and   prc.CIT_PRICE_ITEM_KEY = item.CIT_PRICE_ITEM_KEY      
                  and   NVL(prc.CIP_PRICE_DESCRIPTOR, 0) = NVL(pd.CPD_PRICE_DESCRIPTOR, 0)
                  and   NVL(prc.CIP_ZONE_DESCRIPTOR, 0) = NVL(pd.CPD_ZONE_DESCRIPTOR, 0)                                                                        
                    and   prod.PROD = opt.COP_LOCALIZE_PROD                               
                  and   sup.supplier_id = nvl(info.cat_supplier_id, '149761140')    
               ]]>    
            </stmt>
            
            <stmt id="getOmihAllItemsCount">
              <![CDATA[
                    SELECT/*+ ORDERED USE_NL(info , item, pd, prc, opt, bundle, prod, sup) */ 
            {count}:=count(1)
              from CAT_INFO info,  cat_price_descriptor pd, CAT_ITEM item, 
               CAT_ITEM_OPTIONS opt, CAT_BUNDLE bundle, CAT_ITEM_PRICE prc,
                products prod, supplier_info sup
              WHERE info.CAT_CATALOG_ID = {?:catalogID}
              and   pd.CAT_CATALOG_ID = item.CAT_CATALOG_ID
              and   item.CAT_CATALOG_ID = info.CAT_CATALOG_ID           
              and   opt.CAT_ITEM_KEY   = item.CIT_ITEM_KEY            
              and   bundle.CIT_ITEM_KEY = item.CIT_PARENT_ITEM_KEY
              and   upper(bundle.BDL_STATE) = 'R' and bundle.BDL_END_DATE >= SYSDATE
              and   item.CIT_SOURCE = 'COMCAT_BDL' 
              and   prc.CIP_NET_PRICE is not null
              and   prc.CIT_PRICE_ITEM_KEY = item.CIT_PRICE_ITEM_KEY      
              and   NVL(prc.CIP_PRICE_DESCRIPTOR, 0) = NVL(pd.CPD_PRICE_DESCRIPTOR, 0)
              and   NVL(prc.CIP_ZONE_DESCRIPTOR, 0) = NVL(pd.CPD_ZONE_DESCRIPTOR, 0)                                                                        
              and   prod.PROD = opt.COP_LOCALIZE_PROD                               
              and   sup.supplier_id = nvl(info.cat_supplier_id, '149761140')    
               ]]>    
      </stmt>    
    </stmt-group>
</comcat-dax-config>
