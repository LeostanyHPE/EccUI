/**
 * 
 */
package com.hp.ecc.ui.db.util;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.util.AbstractList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Properties;
import java.util.Set;

import org.json.simple.JSONArray;
import org.json.simple.JSONObject;

import com.hp.ecc.ui.biz.product.CatProdDataCollector;
import com.hp.ecc.ui.common.util.FeCTX;

import redis.clients.jedis.BinaryJedis;
import redis.clients.jedis.Jedis;


/**
 * @author 
 *
 */
public class JedisDbUtil {
	
	private static String REDIS_HOST_NAME;
	private static int REDIS_HOST_PORT;
	private static int REDIS_KEY_TIMEOUT;
	
	public JedisDbUtil () {
		
	}
	
	static{
		try{
			 Properties prop=new Properties();
			 String homeDirectory = FeCTX.getCTX().getConfig().getHomeDir();
			 String filePath= homeDirectory + File.separator + "conf" + File.separator + "ecc_to_redis.properties";
			 prop.load(new FileInputStream(filePath));
			
			 REDIS_HOST_NAME = prop.getProperty("redis.host.name");
			 REDIS_HOST_PORT = Integer.parseInt(prop.getProperty("redis.port.number"));
			 REDIS_KEY_TIMEOUT = Integer.parseInt(prop.getProperty("redis.key.timeout"));
		 }
		 catch(Exception e) {
			 e.printStackTrace();
		 }		
	}

	public byte[] serialize(Object obj) throws IOException {
		ByteArrayOutputStream b = new ByteArrayOutputStream();
		ObjectOutputStream o = new ObjectOutputStream(b);
		o.writeObject(obj);
		return b.toByteArray();
	}

	
	
	public boolean putQueryDataToJedis (String queryId, JSONArray list)  { 		
		long startTime = System.currentTimeMillis();
		try {
			 byte[] listByts = serialize(list);
			 byte[] key =serialize(queryId);
			 
			 
			 BinaryJedis jedisConnection=new Jedis(REDIS_HOST_NAME, REDIS_HOST_PORT); 
			 
			 jedisConnection.set(key, listByts);
			 jedisConnection.expire(key, REDIS_KEY_TIMEOUT);
			 
			 System.out.println("Time taken to store products in radis: "+ (System.currentTimeMillis() - startTime) + "msec");

		}catch (Exception e){
			e.printStackTrace();
			return false;
		}
		
		return true;
	}
	
	
	public boolean putPriceMergeIdToJedis (String catalogId, String priceMergeId)  { 		
		long startTime = System.currentTimeMillis();
		try {
			 byte[] listByts = serialize(priceMergeId);
			 byte[] key =serialize(catalogId);
			 
			 
			 BinaryJedis jedisConnection=new Jedis(REDIS_HOST_NAME, REDIS_HOST_PORT); 
			 
			 jedisConnection.set(key, listByts);
			 jedisConnection.expire(key, REDIS_KEY_TIMEOUT);
			 
			 System.out.println("Time taken to store priceMergeId in radis: "+ (System.currentTimeMillis() - startTime) + "msec");

		}catch (Exception e){
			e.printStackTrace();
			return false;
		}
		
		return true;
	}
	
	public String popPriceMergeIdFromJedis (String catalogId )  { 
		String priceMergeId = null;
		
		System.out.println("Reading from Jedis popPriceMergeIdFromJedis method for..."+ catalogId);
		long startTime = System.currentTimeMillis();
		
		try {
			 byte[] key =serialize(catalogId);			 
			 
			 BinaryJedis jedisConnection=new BinaryJedis(REDIS_HOST_NAME, REDIS_HOST_PORT); 
			 
			 byte[] listByts =jedisConnection.get(key);
			 
			 if( listByts == null){
				 return null;
			 }
	
			 ByteArrayInputStream byts = new ByteArrayInputStream(listByts);
			 
			 ObjectInputStream objectInputStream = new ObjectInputStream(byts);
			 priceMergeId= (String) objectInputStream.readObject();
			 
		     objectInputStream.close();
		     byts.close();
			 
		}catch (Exception e){
			e.printStackTrace();
		}
		
		System.out.println("Completed Reading from Jedis popPriceMergeIdFromJedis method for..."+ catalogId + "in" + (System.currentTimeMillis() - startTime)+ " msec");
		
		return priceMergeId;
	}//popPriceMergeIdFromJedis
	
	public void removeDataFromJedis(String catalogId){
		try {
			 long startTime = System.currentTimeMillis();
			 byte[] key =serialize(catalogId);			 
			 
			 BinaryJedis jedisConnection=new BinaryJedis(REDIS_HOST_NAME, REDIS_HOST_PORT); 
			 Set keys = jedisConnection.keys(key);
			 if( keys == null){
				 return;
			 }
			 
			 Iterator iterator = keys.iterator();
			 while(iterator.hasNext()){
				 long del = jedisConnection.del((byte[]) iterator.next());
			 }
			 System.out.println("Completed removing from Jedis for..."+ catalogId + "in" + (System.currentTimeMillis() - startTime)+ " msec");
		}
		catch (Exception e){
			e.printStackTrace();
		}			 
			 
	}//removeDataFromJedis

	
	public JSONArray popQueryDataFromJedis (String queryId, int start, int end )  { 
		JSONArray list = null;
		
		System.out.println("Reading from Jedis popQueryDataFromJedis method for..."+ queryId + " from : "+ start + " to: "+ end);
		long startTime = System.currentTimeMillis();
		
		try {
			 byte[] key =serialize(queryId);			 
			 
			 BinaryJedis jedisConnection=new BinaryJedis(REDIS_HOST_NAME, REDIS_HOST_PORT); 
			 
			 byte[] listByts =jedisConnection.get(key);
			 
			 if( listByts == null){
				 return null;
			 }
	
			 ByteArrayInputStream byts = new ByteArrayInputStream(listByts);
			 
			 ObjectInputStream objectInputStream = new ObjectInputStream(byts);
			 list= (JSONArray) objectInputStream.readObject();
			 
		     objectInputStream.close();
		     byts.close();
			 
		}catch (Exception e){
			e.printStackTrace();
		}
			
		JSONArray returnJsonArray  = new JSONArray();			
		JSONObject jsonObject = null;
		int size=list.size();
		if( size > 0){
			for(int i=start-1; i<end; i++){
				
				if( size == i){
					break;
				}
				
				jsonObject = (JSONObject)list.get(i);
	
				returnJsonArray.add(jsonObject);		
			}	
		}
		System.out.println("Completed Reading from Jedis popQueryDataFromJedis method for..."+ queryId + " from : "+ start + " to: "+ end + "in " + (System.currentTimeMillis() - startTime) + "msec");
		
		return returnJsonArray;
		
		//return list;
	}

	
	public boolean putResultSetToJedis (String queryId , ResultSet rs)  { 		
		
		try {
			ResultSetMetaData md = rs.getMetaData();
			int columns = md.getColumnCount();
	
			Jedis jedisConnection=new Jedis(REDIS_HOST_NAME, REDIS_HOST_PORT); 
	
			while (rs.next()) {
				Map<String, Object> tuple = new HashMap<String, Object>();
	
				for (int i = 1; i <= columns; ++i) {
					jedisConnection.hset(queryId,md.getColumnName(i), rs.getString(i));
				}
			}
			jedisConnection.expire(queryId, REDIS_KEY_TIMEOUT);
		}catch (Exception e){
			e.printStackTrace();
			
			return false;
			
		}
		return true;
	}
	
	
	private Map<String, String > popFromJedis(String queryId) {
		
		Map<String , String> hm = new HashMap<String, String>();
		Jedis jedisConnection=new Jedis(REDIS_HOST_NAME, REDIS_HOST_PORT); 

		try {
			hm =jedisConnection.hgetAll(queryId);
		}catch (Exception e){
			e.printStackTrace();
			
		}
		
		return hm;
	}
	
	
	public JSONArray popResultsetFromJedis( String queryId)  {

		JSONObject jObject = null;
		JSONArray jsonArray = null;
		
		int type = 0;
		Jedis jedisConnection=new Jedis(REDIS_HOST_NAME, REDIS_HOST_PORT); 

		try {
			Map<String , String> hm = jedisConnection.hgetAll(queryId);
			
			if( hm!= null){
				jsonArray = new JSONArray();
				
				jObject = new JSONObject();
				int size = hm.size();
				Set<String> keySets = hm.keySet();
				Iterator<String> itr = keySets.iterator();
				String key = null;
				while(itr.hasNext()){
					key = itr.next();
					jObject.put(key, hm.get(key));
					
					jsonArray.add(jObject);
					jObject = null;
				}
				
			}			
			
		}catch (Exception e){
			e.printStackTrace();			
		}
		
		return jsonArray;
	}//popResultsetFromJedis
	
	
	public static void main(String[] args){
		try{
			Jedis jedisConnection=new Jedis(REDIS_HOST_NAME, REDIS_HOST_PORT);
			System.out.println("Hello: " + jedisConnection);
			System.out.println("Key values: "+ jedisConnection.get("name"));
		}
		catch(Exception ex){
			ex.printStackTrace();
		}
	}
	

}//class
